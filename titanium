#!/usr/bin/env bash

# get base dir regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" = /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")

. "$basedir/scripts/init.sh"

paperstash() {
  STASHED=$(git stash)
}

paperunstash() {
  if [[ "$STASHED" != "No local changes to save" ]]; then
    git stash pop
  fi
}

buildpaperclipjar() {
  cp -f ./scripts/basepaperclip.sh ./base/Paper/paperclip.sh
  cd ./base/Paper
  ./paperclip.sh
  basedir
}

if [ -z "$1" ]; then
  echo "Titanium build tool."
  echo ""
  echo " Commands:"
  echo "  * setup, s, upstream, up   | Setup the build environment"
  echo "  * patch, p, apply          | Apply patches"
  echo "  * rebuild, rb              | Rebuild patches"
  echo "  * jar, j                   | Create a runnable JAR"
  echo "    * (papeprclip, pc)       | Create runnable JAR with Paperclip"
  echo "  * build, b                 | Setup the build environment, apply patches, and create a runnable JAR"
  echo "    * (papeprclip, pc)       | Setup the build environment, apply patches, and create a runnable JAR with Paperclip"
  echo "  * deploy                   | Deploy to maven repository"
  echo "    * release, snapshot      | Define if deploy to releases or snapshots repository"
fi

PREVIOUS_COMMAND=""

for var in "$@"; do
  case "$var" in
    "setup" | "s" | "upstream" | "up")
      PREVIOUS_COMMAND="setup"

      cd "$basedir"
      ./scripts/upstream.sh
    ;;
    "patch" | "p" | "apply" )
      PREVIOUS_COMMAND="patch"

      set -e
      cd "$basedir"
      ./scripts/apply.sh "$basedir"

      log_info "    Run './titanium jar' to create a runnable JAR."
    ;;
    "rebuild" | "rb")
      PREVIOUS_COMMAND="rebuild"

      set -e
      cd "$basedir"
      ./scripts/rebuildpatches.sh "$basedir"
    ;;
    "jar" | "j")
      PREVIOUS_COMMAND="jar"

      set -e
      ./gradlew build
    ;;
    "build" | "b")
      PREVIOUS_COMMAND="build"

      log_info "Preparing to build Titanium"

      cd "$basedir"
      ./scripts/upstream.sh
      ./scripts/apply.sh "$basedir"
      ./gradlew build
    ;;
    "paperclip" | "pc")
      PREVIOUS_COMMAND="paperclip"
      if ! ( test -f "Titanium-Server/build/libs/titanium-1.8.8-R0.1-SNAPSHOT.jar" ); then
        log_info "Built server jar doesn't exist. Run ./titanium build or ./titanium jar before running this command."
        continue
      fi
      set -e
      buildpaperclipjar
    ;;
    "deploy" | "d" | "publish")
      PREVIOUS_COMMAND="deploy"

      set -e
    ;;
    "release" | "releases" | "snapshot" | "snapshots")
      if [ "$PREVIOUS_COMMAND" != "deploy" ]; then
        continue
      fi
      set -e
      case "$var" in
        "release" | "releases")
          echo "Deploying to Releases repository"
          ./gradlew publishAllPublicationsToReleasesRepository
        ;;
        "snapshot" | "snapshots")
          echo "Deploying to Snapshots repository"
          ./gradlew publishAllPublicationsToSnapshotsRepository
        ;;
        esac
    ;;
    esac
done

unset -f paperstash
unset -f paperunstash
