From 967a500cb35ef691e2a83ef95bb878c5060de4f4 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Fri, 1 Jul 2022 04:03:26 -0500
Subject: [PATCH] Implement [Purpur-0049] Remove Timings by BillyGalbreath


diff --git a/build.gradle b/build.gradle
index 6e604310..38b5afe9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -21,7 +21,7 @@ dependencies {
     api 'org.slf4j:slf4j-simple:1.7.36' // Titanium - backport Plugin#getSLF4JLogger from Paper
     // Titanium libraries end
 
-    api 'org.jetbrains:annotations:16.0.2' // Titanium - add jetbrains annotations - future is now ðŸ˜Ž
+    api 'org.jetbrains:annotations:23.0.0' // Titanium - add jetbrains annotations - future is now ðŸ˜Ž
 
     testImplementation 'junit:junit:4.13.2' // Titanium - Updated junit to 4.13.2
     testImplementation 'org.hamcrest:hamcrest-library:1.3'
diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index e3da034f..98a5a5c8 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -74,8 +74,8 @@ public class TimedEventExecutor implements EventExecutor {
             executor.execute(listener, event);
             return;
         }
-        timings.startTiming();
+        //timings.startTiming(); // Purpur
         executor.execute(listener, event);
-        timings.stopTiming();
+        //timings.stopTiming(); // Purpur
     }
 }
diff --git a/src/main/java/co/aikar/timings/Timing.java b/src/main/java/co/aikar/timings/Timing.java
index 4d990b13..23626f6c 100644
--- a/src/main/java/co/aikar/timings/Timing.java
+++ b/src/main/java/co/aikar/timings/Timing.java
@@ -30,6 +30,7 @@ public interface Timing extends AutoCloseable {
     /**
      * Starts timing the execution until {@link #stopTiming()} is called.
      */
+    @io.papermc.paper.annotation.DoNotUse // Purpur
     public void startTiming();
 
     /**
@@ -37,6 +38,7 @@ public interface Timing extends AutoCloseable {
      *
      * Will automatically be called when this Timing is used with try-with-resources
      */
+    @io.papermc.paper.annotation.DoNotUse // Purpur
     public void stopTiming();
 
     /**
@@ -44,6 +46,7 @@ public interface Timing extends AutoCloseable {
      *
      * But only if we are on the primary thread.
      */
+    @io.papermc.paper.annotation.DoNotUse // Purpur
     public void startTimingIfSync();
 
     /**
@@ -53,11 +56,13 @@ public interface Timing extends AutoCloseable {
      *
      * But only if we are on the primary thread.
      */
+    @io.papermc.paper.annotation.DoNotUse // Purpur
     public void stopTimingIfSync();
 
     /**
      * Stops timing and disregards current timing data.
      */
+    @io.papermc.paper.annotation.DoNotUse // Purpur
     public void abort();
 
     /**
@@ -68,5 +73,6 @@ public interface Timing extends AutoCloseable {
     TimingHandler getTimingHandler();
 
     @Override
+    @io.papermc.paper.annotation.DoNotUse // Purpur
     void close();
 }
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index 0f7be036..d59171f3 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -105,7 +105,7 @@ public final class Timings {
      */
     public static Timing ofStart(Plugin plugin, String name, Timing groupHandler) {
         Timing timing = of(plugin, name, groupHandler);
-        timing.startTimingIfSync();
+        //timing.startTimingIfSync(); // Purpur
         return timing;
     }
 
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index cfb99253..5ecb6bb2 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -40,7 +40,7 @@ public class TimingsCommand extends BukkitCommand {
     public TimingsCommand(String name) {
         super(name);
         this.description = "Manages Spigot Timings data to see performance of the server.";
-        this.usageMessage = "/timings <reset|report|on|off|verbon|verboff>";
+        this.usageMessage = "/timings"; // <reset|report|on|off|verbon|verboff>"; // Purpur
         this.setPermission("bukkit.command.timings");
     }
 
@@ -49,6 +49,14 @@ public class TimingsCommand extends BukkitCommand {
         if (!testPermission(sender)) {
             return true;
         }
+        // Purpur start
+        if (true) {
+            sender.sendMessage(ChatColor.DARK_PURPLE + "Titanium (Purpur)" + ChatColor.GRAY + " has removed timings to save your performance. Please use " + ChatColor.GOLD + "/spark" + ChatColor.GRAY + " instead.");
+            sender.sendMessage(ChatColor.GRAY + "For more information, view its documentation at");
+            sender.sendMessage(ChatColor.GOLD + "https://spark.lucko.me/docs/Command-Usage");
+            return true;
+        }
+        // Purpur end
         if (args.length < 1) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return true;
@@ -101,7 +109,7 @@ public class TimingsCommand extends BukkitCommand {
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
 
-        if (args.length == 1) {
+        if (false && args.length == 1) { // Purpur
             return StringUtil.copyPartialMatches(args[0], TIMINGS_SUBCOMMANDS,
                 new ArrayList<String>(TIMINGS_SUBCOMMANDS.size()));
         }
diff --git a/src/main/java/io/papermc/paper/annotation/DoNotUse.java b/src/main/java/io/papermc/paper/annotation/DoNotUse.java
new file mode 100644
index 00000000..4766e49d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/annotation/DoNotUse.java
@@ -0,0 +1,18 @@
+package io.papermc.paper.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * Annotation used to mark methods or constructors which should not be called.
+ *
+ * <p>Separate from {@link Deprecated} to differentiate from the large amount of deprecations.</p>
+ */
+@ApiStatus.Internal
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
+public @interface DoNotUse {
+}
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index f35bc092..6038c577 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -141,15 +141,15 @@ public class SimpleCommandMap implements CommandMap {
         }
 
         try {
-            target.timings.startTiming(); // Spigot
+            //target.timings.startTiming(); // Spigot // Purpur
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
             target.execute(sender, sentCommandLabel, Arrays_copyOfRange(args, 1, args.length));
-            target.timings.stopTiming(); // Spigot
+            //target.timings.stopTiming(); // Spigot
         } catch (CommandException ex) {
-            target.timings.stopTiming(); // Spigot
+            //target.timings.stopTiming(); // Spigot // Purpur
             throw ex;
         } catch (Throwable ex) {
-            target.timings.stopTiming(); // Spigot
+            //target.timings.stopTiming(); // Spigot // Purpur
             String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
             server.getPluginManager().callEvent(new ServerExceptionEvent(new ServerCommandException(ex, target, sender, args))); // Paper
             throw new CommandException(msg, ex);
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 56e932b8..641dd7ff 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -69,7 +69,7 @@ public final class CustomTimingsHandler {
         handler = timing;
     }
 
-    public void startTiming() { handler.startTiming(); }
-    public void stopTiming() { handler.stopTiming(); }
+    public void startTiming() { /*handler.startTiming();*/ } // Purpur
+    public void stopTiming() { /*handler.stopTiming();*/ } // Purpur
 
 }
-- 
2.36.0.windows.1

