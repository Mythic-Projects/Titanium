From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Fri, 22 Jul 2022 16:01:45 +0200
Subject: [PATCH] Backport Paper Entity#teleportAsync


diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 7fb08af407dcacfbe37222dfd66064ffc3dd6963..6c28f121f8f6553e7c466050eab609f77e7a228c 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -12,6 +12,7 @@ import java.util.List;
 import java.util.UUID;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a base entity in the world
@@ -104,6 +105,35 @@ public interface Entity extends Metadatable, CommandSender {
      */
     public boolean teleport(Entity destination, TeleportCause cause);
 
+    // Paper start
+    /**
+     * Loads the Chunk asynchronously, and then teleports the entity when the chunk is ready.
+     * @param loc Location to teleport to
+     * @return A future that will be completed with the result of the teleport
+     */
+    @NotNull
+    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc) {
+        return teleportAsync(loc, TeleportCause.PLUGIN);
+    }
+    /**
+     * Loads the Chunk asynchronously, and then teleports the entity when the chunk is ready.
+     * @param loc Location to teleport to
+     * @param cause Reason for teleport
+     * @return A future that will be completed with the result of the teleport
+     */
+    @NotNull
+    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc, @NotNull TeleportCause cause) {
+        java.util.concurrent.CompletableFuture<Boolean> future = new java.util.concurrent.CompletableFuture<>();
+        loc.getWorld().titanium().getChunkAtAsync(loc)
+                .thenAccept(chunk -> future.complete(teleport(loc, cause)))
+                .exceptionally(ex -> {
+                    future.completeExceptionally(ex);
+                    return null;
+                });
+        return future;
+    }
+    // Paper end
+
     /**
      * Returns a list of entities within a bounding box centered around this
      * entity
@@ -349,7 +379,7 @@ public interface Entity extends Metadatable, CommandSender {
 
         /**
          * Returns whether this entity is invulnerable.
-         *         
+         *
         * @return True if the entity is invulnerable.
          */
         public boolean isInvulnerable()
