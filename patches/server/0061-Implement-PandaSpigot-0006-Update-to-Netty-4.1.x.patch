From 22a570cbfeb0aab87c337bcb16aacc2a51b702c2 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 22 May 2022 23:34:18 +0200
Subject: [PATCH] Implement [PandaSpigot-0006] Update to Netty 4.1.x


diff --git a/pom.xml b/pom.xml
index 2c66c5aa5..02dcaae99 100644
--- a/pom.xml
+++ b/pom.xml
@@ -35,6 +35,11 @@
             <artifactId>fastutil</artifactId>
             <version>8.5.8</version>
         </dependency>
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-all</artifactId>
+            <version>4.1.77.Final</version>
+        </dependency>
         <dependency>
             <groupId>net.sf.trove4j</groupId>
             <artifactId>trove4j</artifactId>
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index e2eb30546..b6b0e6dd3 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -8,6 +8,7 @@ import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.ByteBufProcessor;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
+import io.netty.util.ByteProcessor;
 import io.netty.util.ReferenceCounted;
 import java.io.DataInput;
 import java.io.DataOutput;
@@ -16,6 +17,7 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
+import java.nio.channels.FileChannel;
 import java.nio.channels.GatheringByteChannel;
 import java.nio.channels.ScatteringByteChannel;
 import java.nio.charset.Charset;
@@ -221,7 +223,11 @@ public class PacketDataSerializer extends ByteBuf {
         } else if (j < 0) {
             throw new DecoderException("The received encoded string buffer length is less than zero! Weird string!");
         } else {
-            String s = new String(this.readBytes(j).array(), Charsets.UTF_8);
+            // PandaSpigot start - Switch from readBytes().array() to readBytes(byte[]) as we could be dealing with a DirectByteBuf
+            byte[] b = new byte[j];
+            this.readBytes(b);
+            String s = new String(b, Charsets.UTF_8);
+            // PandaSpigot end
 
             if (s.length() > i) {
                 throw new DecoderException("The received string length is longer than maximum allowed (" + j + " > " + i + ")");
@@ -822,4 +828,267 @@ public class PacketDataSerializer extends ByteBuf {
     public boolean release(int i) {
         return this.a.release(i);
     }
+
+
+    // PandaSpigot start - Delegate new Netty 4.1 methods.
+    @Override
+    public boolean isReadOnly() {
+        return a.isReadOnly();
+    }
+
+    @Override
+    public ByteBuf asReadOnly() {
+        return a.asReadOnly();
+    }
+
+    @Override
+    public int maxFastWritableBytes() {
+        return a.maxFastWritableBytes();
+    }
+
+    @Override
+    public short getShortLE(int index) {
+        return a.getShortLE(index);
+    }
+
+    @Override
+    public int getUnsignedShortLE(int index) {
+        return a.getUnsignedShortLE(index);
+    }
+
+    @Override
+    public int getMediumLE(int index) {
+        return a.getMediumLE(index);
+    }
+
+    @Override
+    public int getUnsignedMediumLE(int index) {
+        return a.getUnsignedMediumLE(index);
+    }
+
+    @Override
+    public int getIntLE(int index) {
+        return a.getIntLE(index);
+    }
+
+    @Override
+    public long getUnsignedIntLE(int index) {
+        return a.getUnsignedIntLE(index);
+    }
+
+    @Override
+    public long getLongLE(int index) {
+        return a.getLongLE(index);
+    }
+
+    @Override
+    public float getFloatLE(int index) {
+        return a.getFloatLE(index);
+    }
+
+    @Override
+    public double getDoubleLE(int index) {
+        return a.getDoubleLE(index);
+    }
+
+    @Override
+    public int getBytes(int index, FileChannel out, long position, int length) throws IOException {
+        return a.getBytes(index, out, position, length);
+    }
+
+    @Override
+    public CharSequence getCharSequence(int index, int length, Charset charset) {
+        return a.getCharSequence(index, length, charset);
+    }
+
+    @Override
+    public ByteBuf setShortLE(int index, int value) {
+        return a.setShortLE(index, value);
+    }
+
+    @Override
+    public ByteBuf setMediumLE(int index, int value) {
+        return a.setMediumLE(index, value);
+    }
+
+    @Override
+    public ByteBuf setIntLE(int index, int value) {
+        return a.setIntLE(index, value);
+    }
+
+    @Override
+    public ByteBuf setLongLE(int index, long value) {
+        return a.setLongLE(index, value);
+    }
+
+    @Override
+    public ByteBuf setFloatLE(int index, float value) {
+        return a.setFloatLE(index, value);
+    }
+
+    @Override
+    public ByteBuf setDoubleLE(int index, double value) {
+        return a.setDoubleLE(index, value);
+    }
+
+    @Override
+    public int setBytes(int index, FileChannel in, long position, int length) throws IOException {
+        return a.setBytes(index, in, position, length);
+    }
+
+    @Override
+    public int setCharSequence(int index, CharSequence sequence, Charset charset) {
+        return a.setCharSequence(index, sequence, charset);
+    }
+
+    @Override
+    public short readShortLE() {
+        return a.readShortLE();
+    }
+
+    @Override
+    public int readUnsignedShortLE() {
+        return a.readUnsignedShortLE();
+    }
+
+    @Override
+    public int readMediumLE() {
+        return a.readMediumLE();
+    }
+
+    @Override
+    public int readUnsignedMediumLE() {
+        return a.readUnsignedMediumLE();
+    }
+
+    @Override
+    public int readIntLE() {
+        return a.readIntLE();
+    }
+
+    @Override
+    public long readUnsignedIntLE() {
+        return a.readUnsignedIntLE();
+    }
+
+    @Override
+    public long readLongLE() {
+        return a.readLongLE();
+    }
+
+    @Override
+    public float readFloatLE() {
+        return a.readFloatLE();
+    }
+
+    @Override
+    public double readDoubleLE() {
+        return a.readDoubleLE();
+    }
+
+    @Override
+    public ByteBuf readRetainedSlice(int length) {
+        return a.readRetainedSlice(length);
+    }
+
+    @Override
+    public CharSequence readCharSequence(int length, Charset charset) {
+        return a.readCharSequence(length, charset);
+    }
+
+    @Override
+    public int readBytes(FileChannel out, long position, int length) throws IOException {
+        return a.readBytes(out, position, length);
+    }
+
+    @Override
+    public ByteBuf writeShortLE(int value) {
+        return a.writeShortLE(value);
+    }
+
+    @Override
+    public ByteBuf writeMediumLE(int value) {
+        return a.writeMediumLE(value);
+    }
+
+    @Override
+    public ByteBuf writeIntLE(int value) {
+        return a.writeIntLE(value);
+    }
+
+    @Override
+    public ByteBuf writeLongLE(long value) {
+        return a.writeLongLE(value);
+    }
+
+    @Override
+    public ByteBuf writeFloatLE(float value) {
+        return a.writeFloatLE(value);
+    }
+
+    @Override
+    public ByteBuf writeDoubleLE(double value) {
+        return a.writeDoubleLE(value);
+    }
+
+    @Override
+    public int writeBytes(FileChannel in, long position, int length) throws IOException {
+        return a.writeBytes(in, position, length);
+    }
+
+    @Override
+    public int writeCharSequence(CharSequence sequence, Charset charset) {
+        return a.writeCharSequence(sequence, charset);
+    }
+
+    @Override
+    public int forEachByte(ByteProcessor processor) {
+        return a.forEachByte(processor);
+    }
+
+    @Override
+    public int forEachByte(int index, int length, ByteProcessor processor) {
+        return a.forEachByte(index, length, processor);
+    }
+
+    @Override
+    public int forEachByteDesc(ByteProcessor processor) {
+        return a.forEachByteDesc(processor);
+    }
+
+    @Override
+    public int forEachByteDesc(int index, int length, ByteProcessor processor) {
+        return a.forEachByteDesc(index, length, processor);
+    }
+
+    @Override
+    public ByteBuf retainedSlice() {
+        return a.retainedSlice();
+    }
+
+    @Override
+    public ByteBuf retainedSlice(int index, int length) {
+        return a.retainedSlice(index, length);
+    }
+
+    @Override
+    public ByteBuf retainedDuplicate() {
+        return a.retainedDuplicate();
+    }
+
+    @Override
+    public boolean isContiguous() {
+        return a.isContiguous();
+    }
+
+    @Override
+    public ByteBuf touch() {
+        return a.touch();
+    }
+
+    @Override
+    public ByteBuf touch(Object hint) {
+        return a.touch(hint);
+    }
+    // PandaSpigot end
 }
-- 
2.36.0.windows.1

