From dcbe95a38ee5a6eeaa17d978ac8a107c478c5bfc Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 5 Jun 2022 19:52:25 +0200
Subject: [PATCH] Implement [Nacho-????] Async TNT by Sculas


diff --git a/src/main/java/ga/windpvp/windspigot/async/AsyncUtil.java b/src/main/java/ga/windpvp/windspigot/async/AsyncUtil.java
new file mode 100644
index 00000000..b1143e24
--- /dev/null
+++ b/src/main/java/ga/windpvp/windspigot/async/AsyncUtil.java
@@ -0,0 +1,43 @@
+package ga.windpvp.windspigot.async;
+
+import java.util.concurrent.Executor;
+import java.util.concurrent.ForkJoinPool;
+import net.minecraft.server.MinecraftServer;
+
+public class AsyncUtil {
+
+	/**
+	 * Runs a given task async
+	 * @param runnable The task to run
+	 */
+	public static void run(Runnable runnable) {
+		ForkJoinPool.commonPool().execute(runnable);
+	}
+	
+	/**
+	 * Runs a given task on a specified Executor
+	 * @param runnable The task to run
+	 * @param executor The executor to run this task on
+	 */
+	public static void run(Runnable runnable, Executor executor) {
+		executor.execute(runnable);
+	}
+	
+	/**
+	 * Runs a given task the next tick on the main thread
+	 * @param runnable The task to run
+	 */
+	public static void runSyncNextTick(Runnable runnable) {
+		MinecraftServer.getServer().processQueue.add(runnable);
+	}
+	
+	/**
+	 * Runs a given task after the current tick on the main thread
+	 * @param runnable The task to run
+	 */
+	public static void runPostTick(Runnable runnable) {
+		MinecraftServer.getServer().priorityProcessQueue.add(runnable);
+	}
+
+
+}
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 741697e2..9b267e87 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -3,22 +3,27 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import ga.windpvp.windspigot.async.AsyncUtil;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
-
-// CraftBukkit start
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadPoolExecutor;
 import net.titanium.config.SpigotWorldConfig;
-import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.entity.EntityExplodeEvent;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.block.BlockExplodeEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
 // CraftBukkit end
 
 public class Explosion {
 
+    private static final ThreadPoolExecutor EXECUTOR = (ThreadPoolExecutor) Executors.newCachedThreadPool();
+
     private final boolean a;
     private final boolean b;
     private final Random c = new Random();
@@ -134,32 +139,21 @@ public class Explosion {
                         d8 /= d11;
                         d9 /= d11;
                         d10 /= d11;
-                        double d12 = this.getBlockDensity(vec3d, entity.getBoundingBox()); // PaperSpigot - Optimize explosions
-                        double d13 = (1.0D - d7) * d12;
-
-                        // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));+                        // CraftBukkit start
-                        CraftEventFactory.entityDamage = source;
-                        entity.forceExplosionKnockback = false;
-                        boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));
-                        CraftEventFactory.entityDamage = null;
-                        if (!wasDamaged && !(entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && !entity.forceExplosionKnockback) {
-                            continue;
-                        }
-                        // CraftBukkit end
-                        double d14 = entity instanceof EntityHuman && world.paperConfigTitanium.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
-
-                        // PaperSpigot start - Fix cannons
-                        /*
-                        entity.motX += d8 * d14;
-                        entity.motY += d9 * d14;
-                        entity.motZ += d10 * d14;
-                        */
-                        // This impulse method sets the dirty flag, so clients will get an immediate velocity update
-                        entity.g(d8 * d14, d9 * d14, d10 * d14);
-                        // PaperSpigot end
-
-                        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperConfigTitanium.disableExplosionKnockback) { // PaperSpigot
-                            this.k.put((EntityHuman) entity, new Vec3D(d8 * d13, d9 * d13, d10 * d13));
+
+                        // Paper - Optimize explosions
+                        // double d12 = this.getBlockDensity(vec3d, entity);
+                        double finalD = d8;
+                        double finalD1 = d9;
+                        double finalD11 = d10;
+
+                        if (TitaniumConfig.get().tnt.async.enabled) {
+                            this.getBlockDensityAsync(vec3d, entity.getBoundingBox())
+                                    .thenAccept((d12) -> AsyncUtil.runPostTick(() -> {
+                                        processEntityKnockback(entity, d7, finalD, finalD1, finalD11, f3, d12);
+                                    }));
+                        } else {
+                            processEntityKnockback(entity, d7, finalD, finalD1, finalD11, f3,
+                                    this.getBlockDensitySync(vec3d, entity.getBoundingBox()));
                         }
                     }
                 }
@@ -168,6 +162,35 @@ public class Explosion {
 
     }
 
+    private void processEntityKnockback(Entity entity, double d7, double finalD, double finalD1, double finalD11, float f3, double d12) {
+        double d13 = (1.0D - d7) * d12;
+
+        // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));+                        // CraftBukkit start
+        CraftEventFactory.entityDamage = source;
+        entity.forceExplosionKnockback = false;
+        boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));
+        CraftEventFactory.entityDamage = null;
+        if (!wasDamaged && !(entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && !entity.forceExplosionKnockback) {
+            return;
+        }
+        // CraftBukkit end
+        double d14 = entity instanceof EntityHuman && world.paperConfigTitanium.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
+
+        // PaperSpigot start - Fix cannons
+        /*
+        entity.motX += d8 * d14;
+        entity.motY += d9 * d14;
+        entity.motZ += d10 * d14;
+        */
+        // This impulse method sets the dirty flag, so clients will get an immediate velocity update
+        entity.g(finalD * d14, finalD1 * d14, finalD11 * d14);
+        // PaperSpigot end
+
+        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperConfigTitanium.disableExplosionKnockback) { // PaperSpigot
+            this.k.put((EntityHuman) entity, new Vec3D(finalD * d13, finalD1 * d13, finalD11 * d13));
+        }
+    }
+
     public void a(boolean flag) {
         // PaperSpigot start - Configurable TNT explosion volume.
         float volume = source instanceof EntityTNTPrimed ? world.paperConfigTitanium.tntExplosionVolume : 4.0F;
@@ -304,7 +327,7 @@ public class Explosion {
     }
 
     // PaperSpigot start - Optimize explosions
-    private float getBlockDensity(Vec3D vec3d, AxisAlignedBB aabb) {
+    private float getBlockDensitySync(Vec3D vec3d, AxisAlignedBB aabb) {
         if (!this.world.paperConfigTitanium.optimizeExplosions) {
             return this.world.a(vec3d, aabb);
         }
@@ -319,6 +342,10 @@ public class Explosion {
         return blockDensity;
     }
 
+    private CompletableFuture<Float> getBlockDensityAsync(Vec3D vec3d, AxisAlignedBB aabb) {
+        return CompletableFuture.supplyAsync(() -> this.getBlockDensitySync(vec3d, aabb), EXECUTOR);
+    }
+
     static class CacheKey {
         private final World world;
         private final double posX, posY, posZ;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fca9461f..78cf40e4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -122,6 +122,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
     public static int currentTick = 0; // PaperSpigot - Further improve tick loop
     public final Thread primaryThread;
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public java.util.Queue<Runnable> priorityProcessQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>(); // WindSpigot
     public int autosavePeriod;
     // CraftBukkit end
 
@@ -1058,6 +1059,12 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
 
+        // WindSpigot start - priority process queue
+        while (!priorityProcessQueue.isEmpty()) {
+            priorityProcessQueue.poll().run();
+        }
+        // WindSpigot end
+
         this.methodProfiler.c("connection");
         SpigotTimings.connectionTimer.startTiming(); // Spigot
         this.aq().c();
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 96a53723..88d3aa85 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -131,6 +131,21 @@ public class TitaniumConfig extends TitaniumConfigSection {
 
     }
 
+    public Tnt tnt = new Tnt();
+
+    public static class Tnt extends TitaniumConfigSection {
+
+        public Async async = new Async();
+
+        public static class Async extends TitaniumConfigSection {
+
+            //TODO comment this
+            public boolean enabled = false;
+
+        }
+
+    }
+
     @Comment("When this option is enabled, the server will create a directory `legacy_configs` with files like bukkit.yml, spigot.yml etc.")
     @Comment("Changing option there will not affect the server, it's only mirror of this file.")
     @Comment("Enable this option only if some of your plugins are not compatible with the new configs.")
-- 
2.36.0.windows.1

