From 4a7075a2610b1c58343311f419f8609d1c328e3f Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Mon, 23 May 2022 21:15:55 +0200
Subject: [PATCH] Implement [PandaSpigot-0011] Allow controlled flushing for
 network manager


diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 7bd9e427c..95b9a5ad4 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -79,6 +79,38 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public boolean queueImmunity = false;
     public EnumProtocol protocol;
     // PandaSpigot end
+    // PandaSpigot start - allow controlled flushing
+    volatile boolean canFlush = true;
+    private final java.util.concurrent.atomic.AtomicInteger packetWrites = new java.util.concurrent.atomic.AtomicInteger();
+    private int flushPacketsStart;
+    private final Object flushLock = new Object();
+
+    public void disableAutomaticFlush() {
+        synchronized (this.flushLock) {
+            this.flushPacketsStart = this.packetWrites.get(); // must be volatile and before canFlush = false
+            this.canFlush = false;
+        }
+    }
+
+    public void enableAutomaticFlush() {
+        synchronized (this.flushLock) {
+            this.canFlush = true;
+            if (this.packetWrites.get() != this.flushPacketsStart) { // must be after canFlush = true
+                this.flush(); // only make the flush call if we need to
+            }
+        }
+    }
+
+    private void flush() {
+        if (this.channel.eventLoop().inEventLoop()) {
+            this.channel.flush();
+        } else {
+            this.channel.eventLoop().execute(() -> {
+                this.channel.flush();
+            });
+        }
+    }
+    // PandaSpigot end
 
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
@@ -228,6 +260,14 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     private void dispatchPacket(Packet<?> packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) { this.a(packet, agenericfuturelistener); } // PandaSpigot - OBFHELPER
     private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
+        // PandaSpigot start - add flush parameter
+        this.writePacket(packet, agenericfuturelistener, Boolean.TRUE);
+    }
+    private void writePacket(Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener, Boolean flushConditional) {
+        this.packetWrites.getAndIncrement(); // must be before using canFlush
+        boolean effectiveFlush = flushConditional == null ? this.canFlush : flushConditional;
+        final boolean flush = effectiveFlush || packet instanceof PacketPlayOutKeepAlive || packet instanceof PacketPlayOutKickDisconnect; // no delay for certain packets
+        // PandaSpigot end - add flush parameter
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
         final EnumProtocol enumprotocol1 = this.channel.attr(NetworkManager.c).get();
 
@@ -250,7 +290,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
             try {
                 // PandaSpigot end
 
-                ChannelFuture channelfuture = this.channel.writeAndFlush(packet);
+                ChannelFuture channelfuture = (flush) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // PandaSpigot - add flush parameter
 
                 if (agenericfuturelistener != null) {
                     channelfuture.addListeners(agenericfuturelistener);
@@ -287,7 +327,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                 try {
                     // PandaSpigot end
 
-                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
+                    ChannelFuture channelfuture = (flush) ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet); // PandaSpigot - add flush parameter
 
                     if (agenericfuturelistener != null) {
                         channelfuture.addListeners(agenericfuturelistener);
@@ -316,7 +356,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     // PandaSpigot start - rewrite this to be safer if ran off main thread
     private boolean sendPacketQueue() { return this.m(); } // PandaSpigot - OBFHELPER // void -> boolean
     private boolean m() {
-        if(this.i.isEmpty()) return false; // [Nacho-0019] :: Avoid lock every packet send
+        if(this.i.isEmpty()) return true; // [Nacho-0019] :: Avoid lock every packet send
         if (MinecraftServer.getServer().isMainThread()) {
             return this.processQueue();
         } else if (this.isPending) {
@@ -329,6 +369,11 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     }
     private boolean processQueue() {
         if (this.i.isEmpty()) return true;
+        // PandaSpigot start - make only one flush call per sendPacketQueue() call
+        final boolean needsFlush = this.canFlush; // make only one flush call per sendPacketQueue() call
+        boolean hasWrotePacket = false;
+        // PandaSpigot end
+
         // If we are on main, we are safe here in that nothing else should be processing queue off main anymore
         // But if we are not on main due to login/status, the parent is synchronized on packetQueue
         java.util.Iterator<QueuedPacket> iterator = this.i.iterator();
@@ -340,10 +385,18 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
             Packet<?> packet = queued.getPacket();
             if (!packet.isReady()) {
+                // PandaSpigot start - make only one flush call per sendPacketQueue() call
+                if (hasWrotePacket && (needsFlush || this.canFlush)) {
+                    this.flush();
+                }
+                // PandaSpigot end
                 return false;
             } else {
                 iterator.remove();
-                this.dispatchPacket(packet, queued.getGenericFutureListeners());
+                // PandaSpigot start - make only one flush call per sendPacketQueue() call
+                this.writePacket(packet, queued.getGenericFutureListeners(), (!iterator.hasNext() && (needsFlush || this.canFlush)) ? Boolean.TRUE : Boolean.FALSE);
+                hasWrotePacket = true;
+                // PandaSpigot end
             }
         }
         return true;
-- 
2.36.0.windows.1

