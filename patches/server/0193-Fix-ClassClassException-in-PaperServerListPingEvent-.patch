From 927943db604d1b916b7b20ed5603633967377a51 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Thu, 22 Sep 2022 22:22:11 +0200
Subject: [PATCH] Fix ClassClassException in PaperServerListPingEvent and
 support PaperLegacyStatusClient


diff --git a/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java b/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
new file mode 100644
index 00000000..532c7516
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
@@ -0,0 +1,71 @@
+package com.destroystokyo.paper.network;
+
+import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
+import java.net.InetSocketAddress;
+import javax.annotation.Nullable;
+import net.minecraft.server.MinecraftServer;
+import org.apache.commons.lang3.StringUtils;
+import org.bukkit.ChatColor;
+
+public final class PaperLegacyStatusClient implements StatusClient {
+
+    private final InetSocketAddress address;
+    private final int protocolVersion;
+    @Nullable private final InetSocketAddress virtualHost;
+
+    private PaperLegacyStatusClient(InetSocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
+        this.address = address;
+        this.protocolVersion = protocolVersion;
+        this.virtualHost = virtualHost;
+    }
+
+    @Override
+    public InetSocketAddress getAddress() {
+        return this.address;
+    }
+
+    @Override
+    public int getProtocolVersion() {
+        return this.protocolVersion;
+    }
+
+    @Nullable
+    @Override
+    public InetSocketAddress getVirtualHost() {
+        return this.virtualHost;
+    }
+
+    @Override
+    public boolean isLegacy() {
+        return true;
+    }
+
+    public static PaperServerListPingEvent processRequest(MinecraftServer server,
+            InetSocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
+
+        PaperServerListPingEvent event =  new PaperServerListPingEventImpl(server,
+                new PaperLegacyStatusClient(address, protocolVersion, virtualHost), Byte.MAX_VALUE, null);
+        server.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return null;
+        }
+
+        return event;
+    }
+
+    public static String getMotd(PaperServerListPingEvent event) {
+        return getFirstLine(event.getMotd());
+    }
+
+    public static String getUnformattedMotd(PaperServerListPingEvent event) {
+        // Strip color codes and all other occurrences of the color char (because it's used as delimiter)
+        return getFirstLine(StringUtils.remove(ChatColor.stripColor(event.getMotd()), ChatColor.COLOR_CHAR));
+    }
+
+    private static String getFirstLine(String s) {
+        int pos = s.indexOf('\n');
+        return pos >= 0 ? s.substring(0, pos) : s;
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
index 146e0d9d..c9c6b66c 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
@@ -2,8 +2,11 @@ package com.destroystokyo.paper.network;
 
 import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
 import javax.annotation.Nullable;
+import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
+import org.bukkit.entity.Player;
 import org.bukkit.util.CachedServerIcon;
+import org.jetbrains.annotations.NotNull;
 
 class PaperServerListPingEventImpl extends PaperServerListPingEvent {
 
@@ -20,4 +23,9 @@ class PaperServerListPingEventImpl extends PaperServerListPingEvent {
         return this.server.getPlayerList().players.toArray();
     }
 
+    @Override
+    protected final Player getBukkitPlayer(Object player) {
+        return ((EntityPlayer) player).getBukkitEntity();
+    }
+
 }
diff --git a/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
index 55ef5213..c7007dce 100644
--- a/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
+++ b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
@@ -24,8 +24,21 @@ public final class StandardPaperServerListPingEventImpl extends PaperServerListP
 
     private GameProfile[] originalSample;
 
-    private StandardPaperServerListPingEventImpl(MinecraftServer server, NetworkManager networkManager) {
-        super(server, new PaperStatusClient(networkManager), 47 /* 1.8.x protocol */, server.server.getServerIcon());
+    private StandardPaperServerListPingEventImpl(MinecraftServer server, NetworkManager networkManager, ServerPing ping) {
+        super(server, new PaperStatusClient(networkManager), ping.getVersion() != null ? ping.getVersion().getProtocol(): -1, server.server.getServerIcon());
+
+        List<GameProfile> profiles = server.getPlayerList().players
+                .stream()
+                .map(EntityPlayer::getProfile)
+                .collect(Collectors.toList());
+        // Spigot Start
+        if (!profiles.isEmpty()) {
+            profiles = profiles.subList(0, Math.min(profiles.size(), TitaniumConfig.get().spigot.settings.sampleCount)); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            java.util.Collections.shuffle(profiles); // This sucks, its inefficient but we have no simple way of doing it differently
+        }
+        // Spigot End
+
+        this.originalSample = profiles.toArray(new GameProfile[0]);
     }
 
     @Nonnull
@@ -76,23 +89,7 @@ public final class StandardPaperServerListPingEventImpl extends PaperServerListP
 
     @SuppressWarnings("deprecation")
     public static void processRequest(MinecraftServer server, NetworkManager networkManager) {
-        StandardPaperServerListPingEventImpl event = new StandardPaperServerListPingEventImpl(server, networkManager);
-
-        List<PlayerProfile> profiles = server.getPlayerList().players
-                .stream()
-                .map(EntityPlayer::getProfile)
-                .map(profile -> server.server.createProfile(profile.getId(), profile.getName()))
-                .collect(Collectors.toList());
-
-        // Spigot Start
-        if ( !profiles.isEmpty() ) {
-            java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
-            profiles = profiles.subList( 0, Math.min( profiles.size(), TitaniumConfig.get().spigot.settings.sampleCount ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
-        }
-        // Spigot End
-
-        event.setPlayerSample(profiles);
-
+        StandardPaperServerListPingEventImpl event = new StandardPaperServerListPingEventImpl(server, networkManager, server.r);
         server.server.getPluginManager().callEvent(event);
 
         // Close connection immediately if event is cancelled
@@ -107,8 +104,8 @@ public final class StandardPaperServerListPingEventImpl extends PaperServerListP
 
         // Players
         if (!event.shouldHidePlayers()) {
-            ping.setPlayerSample(new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), profiles.size()));
-            ping.b().a(event.getPlayerSampleHandle());
+            ping.setPlayerSample(new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), event.getNumPlayers()));
+            ping.getPlayers().setSample(event.getPlayerSampleHandle());
         }
 
         // Version
diff --git a/src/main/java/net/minecraft/server/LegacyPingHandler.java b/src/main/java/net/minecraft/server/LegacyPingHandler.java
index 48acf636..69398687 100644
--- a/src/main/java/net/minecraft/server/LegacyPingHandler.java
+++ b/src/main/java/net/minecraft/server/LegacyPingHandler.java
@@ -8,6 +8,7 @@ import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import java.net.InetSocketAddress;
 import java.nio.charset.StandardCharsets;
+import java.util.Locale;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -43,11 +44,19 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
                 MinecraftServer minecraftserver = this.b.d();
                 int i = bytebuf.readableBytes();
                 String s;
+                com.destroystokyo.paper.event.server.PaperServerListPingEvent event; // Paper
 
                 switch (i) {
                 case 0:
-                    LegacyPingHandler.a.debug("Ping: (<1.3.x) from {}:{}", new Object[] { inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort())});
-                    s = String.format("%s\u00a7%d\u00a7%d", new Object[] { minecraftserver.getMotd(), Integer.valueOf(minecraftserver.I()), Integer.valueOf(minecraftserver.J())});
+                    LegacyPingHandler.a.debug("Ping: (<1.3.x) from {}:{}", new Object[] { inetsocketaddress.getAddress(), inetsocketaddress.getPort()});
+                    // Paper start - Call PaperServerListPingEvent and use results
+                    event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(minecraftserver, inetsocketaddress, 39, null);
+                    if (event == null) {
+                        channelhandlercontext.close();
+                        break;
+                    }
+                    s = String.format(Locale.ROOT, "%s\u00a7%d\u00a7%d", com.destroystokyo.paper.network.PaperLegacyStatusClient.getUnformattedMotd(event), event.getNumPlayers(), event.getMaxPlayers());
+                    // Paper end
                     this.a(channelhandlercontext, this.a(s));
                     break;
 
@@ -56,8 +65,15 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
                         return;
                     }
 
-                    LegacyPingHandler.a.debug("Ping: (1.4-1.5.x) from {}:{}", new Object[] { inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort())});
-                    s = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", new Object[] { Integer.valueOf(127), minecraftserver.getVersion(), minecraftserver.getMotd(), Integer.valueOf(minecraftserver.I()), Integer.valueOf(minecraftserver.J())});
+                    LegacyPingHandler.a.debug("Ping: (1.4-1.5.x) from {}:{}", new Object[] { inetsocketaddress.getAddress(), inetsocketaddress.getPort()});
+                    // Paper start - Call PaperServerListPingEvent and use results
+                    event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(minecraftserver, inetsocketaddress, 127, null); // Paper
+                    if (event == null) {
+                        channelhandlercontext.close();
+                        break;
+                    }
+                    s = String.format(Locale.ROOT, "\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", event.getProtocolVersion(), minecraftserver.getVersion(), event.getMotd(), event.getNumPlayers(), event.getMaxPlayers()); // CraftBukkit
+                    // Paper end
                     this.a(channelhandlercontext, this.a(s));
                     break;
 
@@ -170,8 +186,16 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
 
         a.debug("Ping: (1.6) from {}", ctx.channel().remoteAddress());
 
-        String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d",
-                Byte.MAX_VALUE, server.getVersion(), server.getMotd(), server.getPlayerList().getPlayerCount(), server.getPlayerList().getMaxPlayers());
+        InetSocketAddress virtualHost = com.destroystokyo.paper.network.PaperNetworkClient.prepareVirtualHost(host, port);
+        com.destroystokyo.paper.event.server.PaperServerListPingEvent event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(
+                server, (InetSocketAddress) ctx.channel().remoteAddress(), protocolVersion, virtualHost);
+        if (event == null) {
+            ctx.close();
+            return;
+        }
+
+        String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", event.getProtocolVersion(), event.getVersion(),
+                com.destroystokyo.paper.network.PaperLegacyStatusClient.getMotd(event), event.getNumPlayers(), event.getMaxPlayers());
         this.a(ctx, this.a(response));
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index cc323375..fbd30bb5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -62,7 +62,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
     protected final ICommandHandler b;
     public final MethodProfiler methodProfiler = new MethodProfiler();
     private ServerConnection q; // Spigot
-    private final ServerPing r = new ServerPing();
+    public final ServerPing r = new ServerPing(); // Titanium - make public
     private final Random s = new Random();
     private String serverIp;
     private int u = -1;
diff --git a/src/main/java/net/minecraft/server/ServerPing.java b/src/main/java/net/minecraft/server/ServerPing.java
index eeb81004..8f20df13 100644
--- a/src/main/java/net/minecraft/server/ServerPing.java
+++ b/src/main/java/net/minecraft/server/ServerPing.java
@@ -29,6 +29,7 @@ public class ServerPing {
         this.a = ichatbasecomponent;
     }
 
+    public ServerPing.ServerPingPlayerSample getPlayers() { return this.b(); } // Titanium - OBFHELPER
     public ServerPing.ServerPingPlayerSample b() {
         return this.b;
     }
@@ -37,6 +38,7 @@ public class ServerPing {
         this.b = serverping_serverpingplayersample;
     }
 
+    public ServerPing.ServerData getVersion() { return this.c(); } // Titanium - OBFHELPER
     public ServerPing.ServerData c() {
         return this.c;
     }
@@ -125,6 +127,7 @@ public class ServerPing {
             return this.a;
         }
 
+        public int getProtocol() { return this.b(); } // Titanium - OBFHELPER
         public int b() {
             return this.b;
         }
@@ -180,6 +183,7 @@ public class ServerPing {
             return this.c;
         }
 
+        public void setSample(GameProfile[] sample) { this.a(sample); } // Titanium - OBFHELPER
         public void a(GameProfile[] agameprofile) {
             this.c = agameprofile;
         }
-- 
2.36.0.windows.1

