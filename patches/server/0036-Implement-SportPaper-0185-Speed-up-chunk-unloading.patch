From adae20b8150d1cb0a0674eb30200ac93973d781b Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Thu, 19 May 2022 22:53:34 +0200
Subject: [PATCH] Implement [SportPaper-0185] Speed up chunk unloading


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 662f53300..4f21d2543 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -36,7 +36,7 @@ import it.unimi.dsi.fastutil.longs.LongSet;
 public class ChunkProviderServer implements IChunkProvider {
 
     private static final Logger b = LogManager.getLogger();
-    public LongSet unloadQueue = new LongArraySet(); // SportPaper
+    public LongSet unloadQueue = new LongArraySet(20); // SportPaper
     public Chunk emptyChunk;
     public IChunkProvider chunkProvider;
     private IChunkLoader chunkLoader;
@@ -127,7 +127,6 @@ public class ChunkProviderServer implements IChunkProvider {
 
     public Chunk getChunkAt(int i, int j, Runnable runnable) {
         long key = LongHash.toLong(i, j); // IonSpigot - Only create key once
-        unloadQueue.remove(key);
         Chunk chunk = chunks.get(key);
         ChunkRegionLoader loader = null;
 
@@ -147,6 +146,7 @@ public class ChunkProviderServer implements IChunkProvider {
             chunk = originalGetChunkAt(i, j);
         }
 
+        unloadQueue.remove(key); // SportPaper
         // If we didn't load the chunk async and have a callback run it now
         if (runnable != null) {
             runnable.run();
@@ -156,7 +156,6 @@ public class ChunkProviderServer implements IChunkProvider {
     }
     public Chunk originalGetChunkAt(int i, int j) {
         long key = LongHash.toLong(i, j); // IonSpigot - Only create key once
-        this.unloadQueue.remove(key);
         Chunk chunk = (Chunk) this.chunks.get(key);
         boolean newChunk = false;
         // CraftBukkit end
@@ -217,6 +216,7 @@ public class ChunkProviderServer implements IChunkProvider {
             world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
+        unloadQueue.remove(key); // SportPaper
         return chunk;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index a7dd39dd0..2aadafeae 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -281,7 +281,6 @@ public class CraftWorld implements World {
 
         long key = LongHash.toLong(x, z);
 
-        world.chunkProviderServer.unloadQueue.remove(key);
         net.minecraft.server.Chunk chunk = world.chunkProviderServer.chunks.get(key);
 
         if (chunk == null) {
@@ -291,6 +290,7 @@ public class CraftWorld implements World {
             chunkLoadPostProcess(chunk, x, z);
             world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
+        world.chunkProviderServer.unloadQueue.remove(key);
         return chunk != null;
     }
 
-- 
2.36.0.windows.1

