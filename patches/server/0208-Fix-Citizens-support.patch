From 34ac8ada61f239c777b95ed1cede6dbbf13d7053 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 28 Sep 2022 16:32:58 +0200
Subject: [PATCH] Fix Citizens support


diff --git a/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java b/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java
index 33c9079b..0c8b09f6 100644
--- a/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java
+++ b/src/main/java/ga/windpvp/windspigot/async/entitytracker/AsyncEntityTracker.java
@@ -1,23 +1,20 @@
 package ga.windpvp.windspigot.async.entitytracker;
 
-import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import net.titanium.util.async.AsyncUtil;
 import ga.windpvp.windspigot.async.ResettableLatch;
-import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import net.minecraft.server.EntityTracker;
-import net.minecraft.server.NetworkManager;
 import net.minecraft.server.WorldServer;
 import net.titanium.config.TitaniumConfig;
 
 public class AsyncEntityTracker extends EntityTracker {
 
     private static final ExecutorService trackingThreadExecutor = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat("Titanium - Entity Tracker Thread #%d").build());
-    private static final List<NetworkManager> disabledFlushes = Lists.newArrayList();
+    private final int threadCount = TitaniumConfig.get().entityTracker.async.threads;
 
-    private final ResettableLatch latch = new ResettableLatch(TitaniumConfig.get().entityTracker.async.threads);
+    private final ResettableLatch latch = new ResettableLatch(this.threadCount);
 
     public AsyncEntityTracker(WorldServer worldserver) {
         super(worldserver);
@@ -27,12 +24,12 @@ public class AsyncEntityTracker extends EntityTracker {
     public void updatePlayers() {
         int offset = 0;
 
-        for (int i = 1; i <= TitaniumConfig.get().entityTracker.async.threads; i++) {
+        for (int i = 1; i <= this.threadCount; i++) {
             final int finalOffset = offset++;
 
             AsyncUtil.run(() -> {
-                for (int index = finalOffset; index < c.size(); index += TitaniumConfig.get().entityTracker.async.threads) {
-                    c.get(index).update();
+                for (int index = finalOffset; index < c.size(); index += this.threadCount) {
+                    this.c.get(index).update();
                 }
                 latch.decrement();
             }, trackingThreadExecutor);
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index d098ab34..45a54674 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -1,10 +1,9 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import ga.windpvp.windspigot.commons.ConcurrentIntHashMap;
 import java.util.Iterator;
-import java.util.List;
 import java.util.concurrent.Callable;
+import net.titanium.util.IndexedLinkedSet;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -13,10 +12,7 @@ public class EntityTracker {
     private static final Logger a = LogManager.getLogger();
     private final WorldServer world;
     // Nacho start - Async entity tracker
-    public List<EntityTrackerEntry> c = Lists.newCopyOnWriteArrayList();
-    /*
-    private Set<EntityTrackerEntry> c = new io.papermc.paper.util.maplist.ObjectMapList<>(); // IonSpigot - HashSet -> ObjectMapList
-     */
+    protected IndexedLinkedSet<EntityTrackerEntry> c = new IndexedLinkedSet<>();
     // Nacho end
     public IntHashMap<EntityTrackerEntry> trackedEntities = new ConcurrentIntHashMap<>(); // WindSpigot
 
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index bce07dcc..bed54bde 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -8,6 +8,7 @@ import java.util.List;
 import java.util.Set;
 import java.util.function.Consumer;
 import net.titanium.config.TitaniumConfig;
+import net.titanium.util.MathUtil;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -85,6 +86,12 @@ public class EntityTrackerEntry {
         // Nacho end
     }
 
+    // Titanium start - Fix Citizens support
+    public EntityTrackerEntry(Entity entity, int i, int j, boolean flag) {
+        this(null, entity, i, j, flag);
+    }
+    // Titanium end
+
     public boolean equals(Object object) {
         return object instanceof EntityTrackerEntry ? ((EntityTrackerEntry) object).tracker.getId() == this.tracker.getId() : false;
     }
@@ -157,20 +164,17 @@ public class EntityTrackerEntry {
         if (!(entity instanceof EntityPlayer)) {
             return false; // ensure all non-players are always tracked
         }
-        double xDistSqrd = entity.locX * entity.locX;
-        double zDistSqrd = entity.locZ * entity.locZ;
+        // Titanium start - Fix Citizens support
+        double xDistSqrd = MathUtil.pow2(entity.locX);
+        double zDistSqrd = MathUtil.pow2(entity.locZ);
 
-        int noTrackDistanceSqrd = entityTracker.getNoTrackDistance() * entityTracker.getNoTrackDistance();
+        int noTrackDistance = entityTracker != null ? entityTracker.getNoTrackDistance() : 0;
+        int noTrackDistanceSqrd = MathUtil.pow2(noTrackDistance);
+        // Titanium end
         return noTrackDistanceSqrd != 0 && xDistSqrd <= noTrackDistanceSqrd && zDistSqrd <= noTrackDistanceSqrd;
     }
 
-    private final Consumer<EntityPlayer> addNearPlayersConsumer = new Consumer<EntityPlayer>() {
-
-        @Override
-        public void accept(EntityPlayer entityPlayer) {
-             updatePlayer(entityPlayer);
-        }
-    };
+    private final Consumer<EntityPlayer> addNearPlayersConsumer = this::updatePlayer;
     // Nacho end
 
     public void track(List<EntityHuman> list) {
diff --git a/src/main/java/net/titanium/util/IndexedLinkedSet.java b/src/main/java/net/titanium/util/IndexedLinkedSet.java
new file mode 100644
index 00000000..7c36c1fd
--- /dev/null
+++ b/src/main/java/net/titanium/util/IndexedLinkedSet.java
@@ -0,0 +1,96 @@
+package net.titanium.util;
+
+import com.google.common.collect.Lists;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
+public final class IndexedLinkedSet<E> implements Set<E> {
+
+    private final List<E> list = Lists.newCopyOnWriteArrayList();
+
+    @Override
+    public boolean add(E e) {
+        if (this.contains(e)) {
+            return false;
+        }
+        return this.list.add(e);
+    }
+
+    @Override
+    public boolean remove(Object o) {
+        return this.list.remove(o);
+    }
+
+    @Override
+    public boolean containsAll(Collection<?> c) {
+        return new HashSet<>(this.list).containsAll(c);
+    }
+
+    @Override
+    public void clear() {
+        this.list.clear();
+    }
+
+    public E get(int index) {
+        return this.list.get(index);
+    }
+
+    @Override
+    public boolean removeAll(Collection<?> c) {
+        return this.list.removeAll(c);
+    }
+
+    @Override
+    public boolean retainAll(Collection<?> c) {
+        return this.list.retainAll(c);
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends E> c) {
+        boolean modified = false;
+        for (E e : c) {
+            if (this.add(e)) {
+                modified = true;
+            }
+        }
+        return modified;
+    }
+
+    @Override
+    public int size() {
+        return this.list.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.list.isEmpty();
+    }
+
+    @Override
+    public boolean contains(Object o) {
+        return this.list.contains(o);
+    }
+
+    @Override
+    public Iterator<E> iterator() {
+        return this.list.iterator();
+    }
+
+    @Override
+    public Object[] toArray() {
+        return this.list.toArray();
+    }
+
+    @Override
+    public <T> T[] toArray(T[] a) {
+        return this.list.toArray(a);
+    }
+
+    public int indexOf(Object o) {
+        return this.list.indexOf(o);
+    }
+
+}
\ No newline at end of file
-- 
2.36.0.windows.1

