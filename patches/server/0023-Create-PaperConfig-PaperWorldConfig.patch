From f2d75189a84ca4cf4e0c6728338e41162bd86276 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Fri, 29 Apr 2022 20:14:46 +0200
Subject: [PATCH] Create PaperConfig & PaperWorldConfig


diff --git a/pom.xml b/pom.xml
index 8c40bc87..847e0427 100644
--- a/pom.xml
+++ b/pom.xml
@@ -92,7 +92,7 @@
         </dependency>
         <dependency>
             <groupId>eu.okaeri</groupId>
-            <artifactId>okaeri-configs-validator-okaeri</artifactId>
+            <artifactId>okaeri-configs-serdes-commons</artifactId>
             <version>4.0.0-beta18</version>
         </dependency>
         <!-- testing -->
diff --git a/src/main/java/net/minecraft/titanium/config/PaperConfig.java b/src/main/java/net/minecraft/titanium/config/PaperConfig.java
new file mode 100644
index 00000000..9910ebe4
--- /dev/null
+++ b/src/main/java/net/minecraft/titanium/config/PaperConfig.java
@@ -0,0 +1,96 @@
+package net.minecraft.titanium.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import java.time.Duration;
+import java.util.HashSet;
+import java.util.Set;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class PaperConfig extends OkaeriConfig {
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends OkaeriConfig {
+
+        @Comment("Whether interaction packets should be limited from clients.")
+        public boolean limitPlayerInteractions = true;
+
+        @Comment("Size of the region file cache.")
+        public int regionFileCacheSize = 256;
+
+        @Comment("Speed at which baby zombies can move.")
+        public double babyZombieMovementSpeed = 0.5;
+
+        @Comment("Whether to save empty scoreboard teams.")
+        public boolean saveEmptyScoreboardTeams = false;
+
+        @Comment("Whether to save player data to disk.")
+        public boolean savePlayerData = true;
+
+        @Comment("Whether to actively tick worlds with no players.")
+        public boolean tickEmptyWorlds = true;
+
+        @Comment("Whether to abort server startup if at least one plugin fails to load.")
+        public boolean requireAllPlugins = false;
+
+        public SpamLimiter spamLimiter = new SpamLimiter();
+
+        public static class SpamLimiter extends OkaeriConfig {
+
+            @Comment("Value to increment for each tab complete event.")
+            public int tabSpamIncrement = 10;
+            @Comment("Maximum number of increment values before disconnecting the player.")
+            public int tabSpamLimit = 500;
+
+        }
+
+        @Comment("Duration to wait before suspending an server with no players online.")
+        public Duration emptyServerSuspend = Duration.ofMinutes(1);
+
+        @Comment("Whether arrow projectiles should have a random factor.")
+        public boolean includeRandomnessInArrowTrajectory = false;
+
+        @Comment("Whether arrow projectiles should add a random amount of damage (like in vanilla minecraft)")
+        public boolean includeRandomnessInArrowDamage = true;
+
+        @Comment("Number of ticks between player data saves to disk.")
+        public int playerAutoSaveRate = -1;
+
+        @Comment("Maximum number of player data to save per tick.")
+        public int maxPlayersAutoSavePerTick = 10;
+
+    }
+
+    @Comment("Whether to fire a physics event for redstone activation.")
+    public boolean firePhysicsEventForRedstone = false;
+
+    @Comment("Percentage improvement to player damage with certain potions.")
+    public EffectModifiers effectModifiers = new EffectModifiers();
+
+    public static class EffectModifiers extends OkaeriConfig {
+        public double strength = 1.3;
+        public double weakness = -0.3;
+    }
+
+    @Comment("Whether to allow certain buckets to stack as items.")
+    public StackableBuckets stackableBuckets = new StackableBuckets();
+
+    public static class StackableBuckets extends OkaeriConfig {
+        public boolean lava = false;
+        public boolean water = false;
+        public boolean milk = false;
+    }
+
+    @Comment("Send a warning to console when players are moving at excessive speeds.")
+    public boolean warnWhenSettingExcessiveVelocity = true;
+
+    @Comment("List of items that are allowed to keep invalid data values.")
+    public Set<Integer> dataValueAllowedItems = new HashSet<>();
+
+    public PaperWorldConfig worldSettings = new PaperWorldConfig();
+
+}
diff --git a/src/main/java/net/minecraft/titanium/config/PaperWorldConfig.java b/src/main/java/net/minecraft/titanium/config/PaperWorldConfig.java
new file mode 100644
index 00000000..b810eca7
--- /dev/null
+++ b/src/main/java/net/minecraft/titanium/config/PaperWorldConfig.java
@@ -0,0 +1,229 @@
+package net.minecraft.titanium.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class PaperWorldConfig extends OkaeriConfig {
+
+    @Comment("Whether to log the per-world settings in console.")
+    public boolean verbose = true;
+
+    @Comment("Number of ticks before attempting to spread grass.")
+    public int grassSpreadTickRate = 1;
+
+    @Comment("Whether to revert tnt cannon logic to 1.7.")
+    public boolean fixCannons = false;
+
+    @Comment("Percent of damage to receive while blocking.")
+    public float playerBlockingDamageMultiplier = 0.5F;
+
+    @Comment("Whether to delete invalid mob spawner items.")
+    public boolean removeInvalidMobSpawnerTileEntities = true;
+
+    @Comment("Whether to remove dead entities in the explosion radius.")
+    public boolean optimizeExplosions = false;
+
+    @Comment("Number of ticks to check for mob spawner locations.")
+    public int mobSpawnerTickRate = 1;
+
+    @Comment("Whether to cache chunks when sending packets.")
+    public boolean cacheChunkMaps = false;
+
+    @Comment("Magic number for how loud tnt explosions should be.")
+    public float tntExplosionVolume = 4.0F;
+
+    @Comment("Whether to disable the suffocation check before every teleportation event.")
+    public boolean disableTeleportationSuffocationCheck = false;
+
+    @Comment("Whether to consider player time in chunks as a factor to unload chunks.")
+    public boolean useChunkInhabitedTimer = true;
+
+    @Comment("Maximum number of chunks to auto save per tick.")
+    public int maxAutoSaveChunksPerTick = 24;
+
+    @Comment("Whether to delete corrupt tile entities.")
+    public boolean removeCorruptTileEntities = false;
+
+    @Comment("Y-level at which squids will spawn.")
+    public SquidSpawnHeight squidSpawnHeight = new SquidSpawnHeight();
+
+    public static class SquidSpawnHeight extends OkaeriConfig {
+        public double minimum = 45.0;
+        public double maximum = 63.0;
+    }
+
+    @Comment("Maximum number of blocks certain plants will grow.")
+    public MaxGrowthHeight maxGrowthHeight = new MaxGrowthHeight();
+
+    public static class MaxGrowthHeight extends OkaeriConfig {
+        public int cactus = 3;
+        public int reeds = 3;
+    }
+
+    @Comment("Number of ticks before a fish can be caught.")
+    public FishingTimeRange fishingTimeRange = new FishingTimeRange();
+
+    public static class FishingTimeRange extends OkaeriConfig {
+
+        @CustomKey("MinimumTicks")
+        public int minimumTicks = 100;
+        @CustomKey("MaximumTicks")
+        public int maximumTicks = 900;
+
+    }
+
+    @Comment("Magic number for food exhaustion rate for certain events.")
+    public PlayerExhaustion playerExhaustion = new PlayerExhaustion();
+
+    public static class PlayerExhaustion extends OkaeriConfig {
+        public float blockBreak = 0.025F;
+        public float swimming = 0.015F;
+    }
+
+    public DespawnRanges despawnRanges = new DespawnRanges();
+
+    public static class DespawnRanges extends OkaeriConfig {
+        @Comment("Distance in blocks that mobs are randomly queued for removal.")
+        public int soft = 32;
+        @Comment("Distance in blocks that mobs are immediately removed.")
+        public int hard = 128;
+    }
+
+    @Comment("Y-level at which falling blocks will despawn.")
+    public int fallingBlockHeightNerf = 0;
+
+    @Comment("Whether to remove certain entities when entering unloaded chunks.")
+    public RemoveUnloaded removeUnloaded = new RemoveUnloaded();
+
+    public static class RemoveUnloaded extends OkaeriConfig {
+        public boolean enderpearls = true;
+        public boolean tntEntities = true;
+        public boolean fallingBlocks = true;
+    }
+
+    @Comment("Whether to load chunks when certain entities enter them.")
+    public LoadChunks loadChunks = new LoadChunks();
+
+    public static class LoadChunks extends OkaeriConfig {
+        public boolean enderpearls = false;
+        public boolean tntEntities = false;
+        public boolean fallingBlocks = false;
+    }
+
+    public GameMechanics gameMechanics = new GameMechanics();
+
+    public static class GameMechanics extends OkaeriConfig {
+
+        @Comment("Whether boats should always drop boat items.")
+        public boolean boatsDropBoats = false;
+
+        @Comment("Whether to disable critical hits in PvP.")
+        public boolean disablePlayerCrits = false;
+
+        @Comment("Whether to allow chests to open with cats on top of them.")
+        public boolean disableChestCatDetections = false;
+
+        @Comment("Whether to never send end credits.")
+        public boolean disableEndCredits = false;
+
+    }
+
+    @Comment("Whether to apply void damage to entities on top of a nether portal.")
+    public boolean netherCeilingVoidDamage = false;
+
+    @Comment("Whether liquids should drain faster than normal.")
+    public FastDrain fastDrain = new FastDrain();
+
+    public static class FastDrain extends OkaeriConfig {
+        public boolean lava = false;
+        public boolean water = false;
+    }
+
+    @Comment("Speed in ticks at which lava flows in different worlds.")
+    public LavaFlowSpeed lavaFlowSpeed = new LavaFlowSpeed();
+
+    public static class LavaFlowSpeed extends OkaeriConfig {
+        public int normal = 30;
+        public int nether = 10;
+    }
+
+    @Comment("Whether entities should not receive knockback from explosions.")
+    public boolean disableExplosionKnockback = false;
+
+    @Comment("Whether undead horses are allowed to be leashed.")
+    public boolean allowUndeadHorseLeashing = false;
+
+    @Comment("Speed in ticks at which water flows over lava.")
+    public int waterOverLavaFlowSpeed = 5;
+
+    @Comment("Y-level at which primed tnt will despawn.")
+    public int tntEntityHeightNerf = 0;
+
+    @Comment("Whether to recognize the hopper-check configuration options.")
+    public boolean useHopperCheck = false;
+
+    @Comment("Whether all chunks are allowed to spawn slimes.")
+    public boolean allChunksAreSlimeChunks = false;
+
+    @Comment("Number of ticks to update inventory containers.")
+    public int containerUpdateTickRate = 1;
+
+    @Comment("Whether to keep spawn chunks loaded at all times.")
+    public boolean keepSpawnLoaded = true;
+
+    @Comment("Whether falling blocks should not break when colliding with signs.")
+    public boolean fallingBlocksCollideWithSigns = false;
+
+    @Comment("Whether armor stands should be subject to collision checks.")
+    public boolean armorStandsDoCollisionEntityLookups = true;
+
+    @Comment("Whether to not send cave and ambient sounds.")
+    public boolean disableMoodSounds = false;
+
+    @Comment("Whether to use asynchronous lighting for better performance.")
+    public boolean useAsyncLightning = true;
+
+    @Comment("Maximum number of blocks to search for a nether portal before generating a new one.")
+    public int portalSearchRadius = 128;
+
+    @Comment("Whether to disable thunder events.")
+    public boolean disableThunder = false;
+
+    @Comment("Whether to disable ice and snow formation.")
+    public boolean disableIceAndSnow = false;
+
+    @Comment("Maximum number of objects that follow the tick loop.")
+    @Comment("Use with extreme caution.")
+    public int tickNextTickListCap = 10000;
+
+    @Comment("Whether or not to always tick redstone even if the number of ticking objects is above the limit.")
+    public boolean tickNextTickListCapIgnoresRedstone = false;
+
+    @Comment("Number of ticks before saving the world.")
+    public int autoSaveInterval = -1;
+
+    @Comment("Whether to enable certain features during world generation.")
+    public GeneratorSettings generatorSettings = new GeneratorSettings();
+
+    public static class GeneratorSettings extends OkaeriConfig {
+        public boolean canyon = true;
+        public boolean caves = true;
+        public boolean dungeon = true;
+        public boolean fortress = true;
+        public boolean mineshaft = true;
+        public boolean monument = true;
+        public boolean stronghold = true;
+        public boolean temple = true;
+        public boolean village = true;
+        public boolean flatBedrock = false;
+    }
+
+    @Comment("Whether block locations are allowed to be tab completed.")
+    public boolean allowBlockLocationTabCompletion = true;
+
+}
diff --git a/src/main/java/net/minecraft/titanium/config/TitaniumConfig.java b/src/main/java/net/minecraft/titanium/config/TitaniumConfig.java
index dad12599..473537ca 100644
--- a/src/main/java/net/minecraft/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/minecraft/titanium/config/TitaniumConfig.java
@@ -1,6 +1,7 @@
 package net.minecraft.titanium.config;
 
 import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
 import eu.okaeri.configs.annotation.Exclude;
 import eu.okaeri.configs.annotation.Header;
 import eu.okaeri.configs.annotation.NameModifier;
@@ -17,10 +18,15 @@ public class TitaniumConfig extends OkaeriConfig {
     @Exclude
     private static TitaniumConfig INSTANCE;
 
+    @Comment("Configuration from bukkit.yml")
     public BukkitConfig bukkit = new BukkitConfig();
 
+    @Comment("Configuration from spigot.yml")
     public SpigotConfig spigot = new SpigotConfig();
 
+    @Comment("Configuration from paper.yml")
+    public PaperConfig paper = new PaperConfig();
+
     @Override
     public OkaeriConfig load() throws OkaeriException {
         super.load();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 8a5efefe..c310afb9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit;
 
 import eu.okaeri.configs.ConfigManager;
+import eu.okaeri.configs.serdes.commons.SerdesCommons;
 import eu.okaeri.configs.yaml.bukkit.YamlBukkitConfigurer;
 import java.awt.image.BufferedImage;
 import java.io.File;
@@ -203,7 +204,7 @@ public final class CraftServer implements Server {
 
         // Titanium start
         serverConfig = ConfigManager.create(TitaniumConfig.class, (it) -> {
-            it.withConfigurer(new YamlBukkitConfigurer());
+            it.withConfigurer(new YamlBukkitConfigurer(), new SerdesCommons());
             it.withBindFile("titanium-config.yml"); // TODO Change to console.options.valueOf("titanium-settings") after migrating everything
             it.saveDefaults();
             it.load(true);
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index c528cc7d..8d1a0380 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -150,7 +150,7 @@ public class Main {
                 acceptsAll(asList("demo"), "Demo mode");
 
                 // SportPaper start // Titanium start
-                acceptsAll(asList("SP", "titanium-settings"), "File for titanium settings")
+                acceptsAll(asList("SP", "sportpaper-settings", "TS", "titanium-settings"), "File for titanium settings")
                         .withRequiredArg()
                         .ofType(File.class)
                         .defaultsTo(new File("titanium.yml"))
-- 
2.32.0.windows.2

