From d3cadc879b2958d0a70428567e98d925089edbbb Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Thu, 19 May 2022 23:07:12 +0200
Subject: [PATCH] Implement [FlamePaper-0003] Fix chunk memory leak


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index c08454465..7795d0b71 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -40,7 +40,7 @@ public class ChunkProviderServer implements IChunkProvider {
     public LongSet unloadQueue = new LongOpenHashSet(20); // SportPaper // IonSpigot - LongOpenHashSet
     public Chunk emptyChunk;
     public IChunkProvider chunkProvider;
-    private IChunkLoader chunkLoader;
+    public IChunkLoader chunkLoader; // FlamePaper - Make chunkloader public
     public boolean forceChunkLoad = false; // CraftBukkit - true -> false
     public Long2ObjectMap<Chunk> chunks = new Long2ObjectOpenHashMap<Chunk>(8192, 0.5f);
     public WorldServer world;
@@ -272,7 +272,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void saveChunkNOP(Chunk chunk) {
-        if (this.chunkLoader != null) {
+        if (canSave() && this.chunkLoader != null) {
             try {
                 this.chunkLoader.b(this.world, chunk);
             } catch (Exception exception) {
@@ -283,7 +283,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void saveChunk(Chunk chunk) {
-        if (this.chunkLoader != null) {
+        if (canSave() && this.chunkLoader != null) {
             try {
                 chunk.setLastSaved(this.world.getTime());
                 this.chunkLoader.a(this.world, chunk);
@@ -377,8 +377,8 @@ public class ChunkProviderServer implements IChunkProvider {
 
     }
 
-    public boolean unloadChunks() {
-        if (!this.world.savingDisabled) {
+    public boolean unloadChunks(boolean force) {
+        if (!this.world.savingDisabled && (canSave() || force)) {
             // CraftBukkit start
             Server server = this.world.getServer();
             // SportPaper start
@@ -429,6 +429,10 @@ public class ChunkProviderServer implements IChunkProvider {
         return this.chunkProvider.unloadChunks();
     }
 
+    public boolean unloadChunks() {
+        return this.unloadChunks(false);
+    }
+
     public boolean canSave() {
         return !this.world.savingDisabled;
     }
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 6b244904d..7889b91e7 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -17,8 +17,9 @@ import org.apache.logging.log4j.Logger;
 public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     private static final Logger a = LogManager.getLogger();
-    private Map<ChunkCoordIntPair, NBTTagCompound> b = new ConcurrentHashMap();
-    private Set<ChunkCoordIntPair> c = Collections.newSetFromMap(new ConcurrentHashMap());
+    // FlamePaper - Make b and c public
+    public Map<ChunkCoordIntPair, NBTTagCompound> b = new ConcurrentHashMap();
+    public Set<ChunkCoordIntPair> c = Collections.newSetFromMap(new ConcurrentHashMap());
     private final File d;
     private boolean e = false;
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index fcb31e75b..cf1592484 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -231,7 +231,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         // CraftBukkit end
         timings.doChunkUnload.startTiming(); // Spigot
         this.methodProfiler.c("chunkSource");
-        this.chunkProvider.unloadChunks();
+
+        // Only unload if chunkProvider isn't null
+        if (this.chunkProvider != null) {
+            this.chunkProvider.unloadChunks();
+        }
+
         int j = this.a(1.0F);
 
         if (j != this.ab()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 190a81c8f..41faeec3d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -998,6 +998,23 @@ public final class CraftServer implements Server {
             } catch (ExceptionWorldConflict ex) {
                 getLogger().log(Level.SEVERE, null, ex);
             }
+        } else { // FlamePaper - Fix chunk memory leak
+            ChunkProviderServer chunkProviderServer = handle.chunkProviderServer;
+            ChunkRegionLoader regionLoader = (ChunkRegionLoader) chunkProviderServer.chunkLoader;
+
+            regionLoader.b.clear();
+            regionLoader.c.clear();
+
+            try {
+                FileIOThread.a().b();
+            } catch (InterruptedException ex) {
+                Thread.currentThread().interrupt();
+            }
+
+            chunkProviderServer.unloadChunks(true);
+            chunkProviderServer.chunkLoader = null;
+            chunkProviderServer.chunkProvider = null;
+            chunkProviderServer.chunks.clear();
         }
 
         worlds.remove(world.getName().toLowerCase());
-- 
2.36.0.windows.1

