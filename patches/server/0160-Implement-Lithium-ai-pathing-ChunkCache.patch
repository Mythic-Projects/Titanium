From c68294f39cbfae6f57d8033af5eed1013c142dea Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 14 Sep 2022 16:51:41 +0200
Subject: [PATCH] Implement [Lithium-ai/pathing/ChunkCache]


diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
index b9ab623fa..a64d03085 100644
--- a/src/main/java/net/minecraft/server/ChunkCache.java
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 public class ChunkCache implements IBlockAccess {
+    private static final IBlockData DEFAULT_BLOCK = Blocks.AIR.getBlockData(); // Titanium - Lithium: ai/pathing/ChunkCache
 
     protected int a;
     protected int b;
@@ -8,6 +9,15 @@ public class ChunkCache implements IBlockAccess {
     protected boolean d;
     protected World e;
 
+    // Titanium start - Lithium: ai/pathing/ChunkCache
+    // A 1D view of the chunks available to this cache
+    private Chunk[] chunksFlat;
+
+    // The x/z length of this cache
+    private int xLen;
+    private int zLen;
+    // Titanium end
+
     public ChunkCache(World world, BlockPosition blockposition, BlockPosition blockposition1, int i) {
         this.e = world;
         this.a = blockposition.getX() - i >> 4;
@@ -37,6 +47,17 @@ public class ChunkCache implements IBlockAccess {
             }
         }
 
+        // Titanium start - Lithium: ai/pathing/ChunkCache
+        this.xLen = 1 + (blockposition1.getX() >> 4) - (blockposition.getX() >> 4);
+        this.zLen = 1 + (blockposition1.getZ() >> 4) - (blockposition.getZ() >> 4);
+
+        this.chunksFlat = new Chunk[this.xLen * this.zLen];
+
+        // Flatten the 2D chunk array into our 1D array
+        for (int x = 0; x < this.xLen; x++) {
+            System.arraycopy(this.c[x], 0, this.chunksFlat, x * this.zLen, this.zLen);
+        }
+        // Titanium end
     }
 
     // WindSpigot start - reduce usage of blockposition
@@ -77,20 +98,32 @@ public class ChunkCache implements IBlockAccess {
     }
 
     public IBlockData getType(BlockPosition blockposition) {
-        if (blockposition.getY() >= 0 && blockposition.getY() < 256) {
-            int i = (blockposition.getX() >> 4) - this.a;
-            int j = (blockposition.getZ() >> 4) - this.b;
+        // Titanium start - Lithium: ai/pathing/ChunkCache
+        int y = blockposition.getY();
+        if (y >= 0 && y< 256) {
+            int x = blockposition.getX();
+            int z = blockposition.getZ();
+
+            int chunkX = (x >> 4) - this.a;
+            int chunkZ = (z >> 4) - this.b;
 
-            if (i >= 0 && i < this.c.length && j >= 0 && j < this.c[i].length) {
-                Chunk chunk = this.c[i][j];
+            if (chunkX >= 0 && chunkX < this.xLen && chunkZ >= 0 && chunkZ < this.zLen) {
+                Chunk chunk = this.chunksFlat[(chunkX * this.zLen) + chunkZ];
 
+                // Avoid going through Chunk#getBlockState
                 if (chunk != null) {
-                    return chunk.getBlockData(blockposition);
+                    ChunkSection section = chunk.getSections()[y >> 4];
+
+                    if (section != null) {
+                        return section.getType(x & 15, y & 15, z & 15);
+                    }
+                    //return chunk.getBlockData(blockposition); // Titanium - Lithium
                 }
             }
         }
 
-        return Blocks.AIR.getBlockData();
+        return DEFAULT_BLOCK;
+        // Titanium end
     }
 
     public boolean isEmpty(BlockPosition blockposition) {
-- 
2.36.0.windows.1

