From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Fri, 22 Jul 2022 01:23:49 +0200
Subject: [PATCH] Prevent some exploits

1. Invalid block states
2. Invalid mob spawners

diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index 4b8d232a73acfc1160c3fbe487a63cb0ebf16e0f..d97030e2c1712c94ca2fb3d2f43624524a32453c 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -21,6 +21,7 @@ import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import net.titanium.config.TitaniumConfig;
 
 public class BlockStateList {
 
@@ -130,12 +131,22 @@ public class BlockStateList {
 
         public <T extends Comparable<T>, V extends T> IBlockData set(IBlockState<T> iblockstate, V v0) {
             if (!this.b.containsKey(iblockstate)) {
+                // Titanium start - prevent some exploits (invalid block states)
+                if (TitaniumConfig.get().exploits.skipInvalidBlockState) {
+                    return this;
+                }
+
                 throw new IllegalArgumentException("Cannot set property " + iblockstate + " as it does not exist in " + this.a.P());
             } else if (!iblockstate.c().contains(v0)) {
+                if (TitaniumConfig.get().exploits.skipInvalidBlockState) {
+                    return this;
+                }
+
                 throw new IllegalArgumentException("Cannot set property " + iblockstate + " to " + v0 + " on block " + Block.REGISTRY.c(this.a) + ", it is not an allowed value");
-            } else {
-                return (IBlockData) (this.b.get(iblockstate) == v0 ? this : (IBlockData) this.c.get(iblockstate, v0));
+                // Titanium end
             }
+
+            return (IBlockData) (this.b.get(iblockstate) == v0 ? this : (IBlockData) this.c.get(iblockstate, v0));
         }
 
         public ImmutableMap<IBlockState, Comparable> b() {
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index b47b395f888005c11d1db1635c57d3c11db87125..a0f5c65b3b42e79c07017135ff9f7067dcf14cc0 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -5,6 +5,7 @@ import java.util.Iterator;
 import java.util.List;
 
 // CraftBukkit start
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.SpawnerSpawnEvent;
@@ -47,6 +48,12 @@ public abstract class MobSpawnerAbstract {
     }
 
     public void setMobName(String s) {
+        // Titanium start - prevent some exploits (invalid mob spawners)
+        TitaniumConfig.Exploits.Spawners spawnersConfig = TitaniumConfig.get().exploits.spawners;
+        if (spawnersConfig.disableInvalid && !spawnersConfig.allowedMobs.contains(s)) {
+            s = "Pig";
+        }
+        // Titanium end
         this.mobName = s;
     }
 
@@ -232,7 +239,10 @@ public abstract class MobSpawnerAbstract {
     }
 
     public void a(NBTTagCompound nbttagcompound) {
-        this.mobName = nbttagcompound.getString("EntityId");
+        // Titanium start - prevent some exploits (invalid mob spawners)
+        //this.mobName = nbttagcompound.getString("EntityId");
+        this.setMobName(nbttagcompound.getString("EntityId"));
+        // Titanium end
         this.spawnDelay = nbttagcompound.getShort("Delay");
         this.mobs.clear();
         if (nbttagcompound.hasKeyOfType("SpawnPotentials", 9)) {
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 2584a4c83d32ed671f687a069140580e41484f07..d1f428b35c9753cf18a351fc1b3a38787d7933a1 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -13,8 +13,10 @@ import eu.okaeri.configs.exception.InitializationException;
 import eu.okaeri.configs.exception.OkaeriException;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
@@ -127,6 +129,33 @@ public class TitaniumConfig extends TitaniumConfigSection {
 
     }
 
+    public Exploits exploits = new Exploits();
+
+    public static class Exploits extends TitaniumConfigSection {
+
+        @Comment("Whether to skip setting invalid block states.")
+        @Comment("After placing block fid invalid block state it will be reset to the default one.")
+        @Comment("Some players can you these invalid block states to for eg. crash server.")
+        public boolean skipInvalidBlockState = false;
+
+        public Spawners spawners = new Spawners();
+
+        public static class Spawners extends TitaniumConfigSection {
+
+            @Comment("Should invalid spawners be disabled and placing one of them will reset it mob to Pig.")
+            @Comment("For eg. to disable spawners that spawn more spawners.")
+            public boolean disableInvalid = false;
+
+            @Comment("List of all mobs that spawners should be allowed.")
+            public List<String> allowedMobs = Arrays.asList(
+                    "Pig", "Sheep", "Cow", "Chicken", "MushroomCow", "Rabbit", "EntityHorse", "Squid", "Wolf", "Ocelot", "Villager", "Bat",
+                    "Zombie", "Skeleton", "Creeper", "Enderman", "Spider", "CaveSpider", "Slime", "Witch", "Silverfish", "Endermite", "Guardian", "PigZombie", "LavaSlime", "Blaze", "Ghast"
+            );
+
+        }
+
+    }
+
     public Chunk chunk = new Chunk();
 
     public static class Chunk extends TitaniumConfigSection {
diff --git a/src/main/java/net/titanium/config/TitaniumConfigSection.java b/src/main/java/net/titanium/config/TitaniumConfigSection.java
index 1d9af7463408488d1650c38cab62b243a949782c..a586ace8a985db84dd5308ed6c026036aded49e4 100644
--- a/src/main/java/net/titanium/config/TitaniumConfigSection.java
+++ b/src/main/java/net/titanium/config/TitaniumConfigSection.java
@@ -3,9 +3,11 @@ package net.titanium.config;
 import eu.okaeri.configs.OkaeriConfig;
 import eu.okaeri.configs.annotation.Exclude;
 import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -47,13 +49,19 @@ public abstract class TitaniumConfigSection extends OkaeriConfig {
 
     private boolean colorField(Field field) {
         try {
+            field.setAccessible(true);
+
+            if (Modifier.isFinal(field.getModifiers())) {
+                return false;
+            }
+
             if (field.getType().equals(String.class)) {
                 field.set(this, TitaniumConfig.color((String) field.get(this)));
                 return true;
             } else if (field.getType().equals(List.class)) {
                 //TODO Find better and more secure way to check if list is List<String>
                 List<?> list = (List<?>) field.get(this);
-                if (!(list.get(0) instanceof String)) {
+                if (list == null || list.isEmpty() || !(list.get(0) instanceof String)) {
                     return false;
                 }
 
@@ -64,6 +72,23 @@ public abstract class TitaniumConfigSection extends OkaeriConfig {
 
                 field.set(this, listString);
                 return true;
+            } else if (field.getType().equals(Map.class)) {
+                Map<?, ?> map = (Map<?, ?>) field.get(this);
+
+                if (map == null || map.isEmpty() || !(map.values().iterator().next() instanceof String)) {
+                    return false;
+                }
+
+                Map<?, Object> newMap = new LinkedHashMap<>(map);
+                newMap.replaceAll((key, value) -> {
+                    if (value instanceof String) {
+                        return TitaniumConfig.color((String) value);
+                    }
+                    return value;
+                });
+
+                field.set(this, newMap);
+                return true;
             }
         } catch (Exception ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Failed to color property " + field.getName(), ex);
@@ -81,7 +106,9 @@ public abstract class TitaniumConfigSection extends OkaeriConfig {
         for (String key : parentConfig.getConfigurer().getAllKeys()) {
             Object data = parentConfig.get(key);
 
-            String dataKey = parentSection == null ? key : parentSection + "." + key;
+            String dataKey = parentSection == null
+                    ? key
+                    : parentSection + "." + key;
 
             if (data instanceof OkaeriConfig) {
                 if (legacy && key.equalsIgnoreCase("world-settings")) {
@@ -93,7 +120,9 @@ public abstract class TitaniumConfigSection extends OkaeriConfig {
                 dataMap.putAll(this.mapData((OkaeriConfig) data, dataKey, legacy));
                 continue;
             }
-            dataMap.put(dataKey, legacy ? convertType(data) : data);
+            dataMap.put(dataKey, legacy
+                    ? convertType(data)
+                    : data);
         }
 
         return dataMap;
