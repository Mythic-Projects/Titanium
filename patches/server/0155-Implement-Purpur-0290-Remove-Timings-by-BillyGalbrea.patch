From 842e4ee4eed529b241566e276f489bb08770563d Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Sun, 26 Jun 2022 01:10:05 -0500
Subject: [PATCH] Implement [Purpur-0290] Remove Timings by BillyGalbreath


diff --git a/src/main/java/co/aikar/timings/SpigotTimings.java b/src/main/java/co/aikar/timings/SpigotTimings.java
index b3cafafcb..c2f9c4240 100644
--- a/src/main/java/co/aikar/timings/SpigotTimings.java
+++ b/src/main/java/co/aikar/timings/SpigotTimings.java
@@ -6,6 +6,7 @@ import org.bukkit.scheduler.BukkitTask;
 
 import org.bukkit.craftbukkit.scheduler.CraftTask;
 
+@Deprecated // Titanium (Purpur)
 public final class SpigotTimings {
 
     public static final Timing playerListTimer = Timings.ofSafe("Player List");
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
index 9ebc710fe..68da46384 100644
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -5,6 +5,7 @@ import net.minecraft.server.World;
 /**
  * Set of timers per world, to track world specific timings.
  */
+@Deprecated // Titanium (Purpur)
 public class WorldTimingsHandler {
     public final Timing mobSpawn;
     public final Timing doChunkUnload;
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 1de17cafd..58d8c9d78 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1073,7 +1073,7 @@ public class Chunk {
     }
 
     public void loadNearby(IChunkProvider ichunkprovider, IChunkProvider ichunkprovider1, int i, int j) {
-        world.timings.syncChunkLoadPostTimer.startTiming(); // Spigot
+        //world.timings.syncChunkLoadPostTimer.startTiming(); // Spigot // Purpur
         boolean flag = ichunkprovider.isChunkLoaded(i, j - 1);
         boolean flag1 = ichunkprovider.isChunkLoaded(i + 1, j);
         boolean flag2 = ichunkprovider.isChunkLoaded(i, j + 1);
@@ -1120,7 +1120,7 @@ public class Chunk {
             }
         }
 
-        world.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot
+        //world.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot // Purpur
     }
 
     public BlockPosition h(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index f56bed369..a34910099 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -162,7 +162,7 @@ public class ChunkProviderServer implements IChunkProvider {
         // CraftBukkit end
 
         if (chunk == null) {
-            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
+            //world.timings.syncChunkLoadTimer.startTiming(); // Spigot // Purpur
             chunk = this.loadChunk(i, j);
             if (chunk == null) {
                 if (this.chunkProvider == null) {
@@ -214,7 +214,7 @@ public class ChunkProviderServer implements IChunkProvider {
             }
             // CraftBukkit end
             chunk.loadNearby(this, this, i, j);
-            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
+            //world.timings.syncChunkLoadTimer.stopTiming(); // Spigot // Purpur
         }
 
         unloadQueue.remove(key); // SportPaper
@@ -253,9 +253,9 @@ public class ChunkProviderServer implements IChunkProvider {
                 if (chunk != null) {
                     chunk.setLastSaved(this.world.getTime());
                     if (this.chunkProvider != null) {
-                        world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
+                        //world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot // Purpur
                         this.chunkProvider.recreateStructures(chunk, i, j);
-                        world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
+                        //world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot // Purpur
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 7889b91e7..32b584440 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -44,9 +44,9 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     // CraftBukkit start - Add async variant, provide compatibility
     public Chunk a(World world, int i, int j) throws IOException {
-        world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
+        //world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot // Purpur
         Object[] data = loadChunk(world, i, j);
-        world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
+        //world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot // Purpur
         if (data != null) {
             Chunk chunk = (Chunk) data[0];
             NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
@@ -396,7 +396,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     public void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) {
         // CraftBukkit end
-        world.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
+        //world.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot // Purpur
         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
 
         if (nbttaglist1 != null) {
@@ -422,8 +422,8 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
-        world.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
+        //world.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot // Purpur
+        //world.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot // Purpur
         NBTTagList nbttaglist2 = nbttagcompound.getList("TileEntities", 10);
 
         if (nbttaglist2 != null) {
@@ -436,8 +436,8 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
-        world.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
+        //world.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot // Purpur
+        //world.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot // Purpur
 
         if (nbttagcompound.hasKeyOfType("TileTicks", 9)) {
             NBTTagList nbttaglist3 = nbttagcompound.getList("TileTicks", 10);
@@ -457,7 +457,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
+        //world.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot // Purpur
 
         // return chunk; // CraftBukkit
     }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index d3cdb2fc4..af7a4c646 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -438,7 +438,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void aO() {
-        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
+        //SpigotTimings.serverCommandTimer.startTiming(); // Spigot // Purpur
         // [Paper-0350] start - use a Queue for Queueing Commands
         ServerCommand servercommand;
         while ((servercommand = this.l.poll()) != null) {
@@ -455,7 +455,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             // CraftBukkit end
         }
 
-        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
+        //SpigotTimings.serverCommandTimer.stopTiming(); // Spigot // Purpur
     }
 
     public boolean ae() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index bd367af6b..dad69ba16 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -48,7 +48,6 @@ import net.titanium.job.AutoSaveJob.JobDetail;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 // CraftBukkit end
 
 public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTick> implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
@@ -879,7 +878,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
 
     // WindSpigot - backport modern tick loop
     protected void A(BooleanSupplier shouldKeepTicking) throws ExceptionWorldConflict { // CraftBukkit - added throws
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Spigot
+        //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Spigot // Purpur
 
         // WindSpigot start - backport modern tick loop
         long i = getNanos();
@@ -918,7 +917,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
             if (autosavePeriod <= 1000) { // Titanium - use non-blocking auto save only for large periods
-                SpigotTimings.worldSaveTimer.startTiming(); // Spigot
+                //SpigotTimings.worldSaveTimer.startTiming(); // Spigot // Purpur
             }
             this.methodProfiler.a("save");
             this.v.savePlayers();
@@ -929,7 +928,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 this.queueWorldsForAutoSave();
                 // Migot end
             } else {
-                SpigotTimings.worldSaveTimer.startTiming(); // Spigot
+                //SpigotTimings.worldSaveTimer.startTiming(); // Spigot // Purpur
                 // Spigot Start
                 // We replace this with saving each individual world as this.saveChunks(...) is broken,
                 // and causes the main thread to sleep for random amounts of time depending on chunk activity
@@ -944,7 +943,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
             }
             this.methodProfiler.b();
             if (autosavePeriod <= 1000) { // Titanium - use non-blocking auto save only for large periods
-                SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
+                //SpigotTimings.worldSaveTimer.stopTiming(); // Spigot // Purpur
             }
         }
 
@@ -978,11 +977,11 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         this.methodProfiler.b();
         this.methodProfiler.b();
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot
+        //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot // Purpur
     }
 
     public void B() {
-        SpigotTimings.minecraftSchedulerTimer.startTiming(); // Spigot
+        //SpigotTimings.minecraftSchedulerTimer.startTiming(); // Spigot // Purpur
         this.methodProfiler.a("jobs");
         Queue queue = this.j;
 
@@ -993,27 +992,27 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
             SystemUtils.a(entry, MinecraftServer.LOGGER);
          }
         // Spigot end
-        SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot
+        //SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot // Purpur
 
         this.methodProfiler.c("levels");
 
-        SpigotTimings.bukkitSchedulerTimer.startTiming(); // Spigot
+        //SpigotTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Purpur
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
-        SpigotTimings.bukkitSchedulerTimer.stopTiming(); // Spigot
+        //SpigotTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Purpur
 
         // Run tasks that are waiting on processing
-        SpigotTimings.processQueueTimer.startTiming(); // Spigot
+        //SpigotTimings.processQueueTimer.startTiming(); // Spigot // Purpur
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
-        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
+        //SpigotTimings.processQueueTimer.stopTiming(); // Spigot // Purpur
 
-        SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
+        //SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot // Purpur
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
-        SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
+        //SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot // Purpur
 
-        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
+        //SpigotTimings.timeUpdateTimer.startTiming(); // Spigot // Purpur
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - optimize time updates
         int i;
@@ -1042,7 +1041,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 }
             }
         }
-        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
+        //SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot // Purpur
 
         for (i = 0; i < this.worlds.size(); ++i) {
             long j = System.nanoTime();
@@ -1065,9 +1064,9 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 CrashReport crashreport;
 
                 try {
-                    worldserver.timings.doTick.startTiming(); // Spigot
+                    //worldserver.timings.doTick.startTiming(); // Spigot // Purpur
                     worldserver.doTick();
-                    worldserver.timings.doTick.stopTiming(); // Spigot
+                    //worldserver.timings.doTick.stopTiming(); // Spigot // Purpur
                 } catch (Throwable throwable) {
                     // Spigot Start
                     try {
@@ -1081,9 +1080,9 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 }
 
                 try {
-                    worldserver.timings.tickEntities.startTiming(); // Spigot
+                    //worldserver.timings.tickEntities.startTiming(); // Spigot // Purpur
                     worldserver.tickEntities();
-                    worldserver.timings.tickEntities.stopTiming(); // Spigot
+                    //worldserver.timings.tickEntities.stopTiming(); // Spigot // Purpur
                 } catch (Throwable throwable1) {
                     // Spigot Start
                     try {
@@ -1098,7 +1097,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
 
                 this.methodProfiler.b();
                 this.methodProfiler.a("tracker");
-                worldserver.timings.tracker.startTiming(); // Spigot
+                //worldserver.timings.tracker.startTiming(); // Spigot // Purpur
                 // PandaSpigot start - controlled flush for entity tracker packets
                 List<NetworkManager> disabledFlushes = new ArrayList<>(worldserver.players.size());
                 for (EntityHuman player : worldserver.players) {
@@ -1121,7 +1120,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                     }
                 }
                 // PandaSpigot end
-                worldserver.timings.tracker.stopTiming(); // Spigot
+                //worldserver.timings.tracker.stopTiming(); // Spigot // Purpur
                 this.methodProfiler.b();
                 this.methodProfiler.b();
                 worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
@@ -1137,20 +1136,20 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         // WindSpigot end
 
         this.methodProfiler.c("connection");
-        SpigotTimings.connectionTimer.startTiming(); // Spigot
+        //SpigotTimings.connectionTimer.startTiming(); // Spigot // Purpur
         this.aq().c();
-        SpigotTimings.connectionTimer.stopTiming(); // Spigot
+        //SpigotTimings.connectionTimer.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("players");
-        SpigotTimings.playerListTimer.startTiming(); // Spigot
+        //SpigotTimings.playerListTimer.startTiming(); // Spigot // Purpur
         this.v.tick();
-        SpigotTimings.playerListTimer.stopTiming(); // Spigot
+        //SpigotTimings.playerListTimer.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("tickables");
 
-        SpigotTimings.tickablesTimer.startTiming(); // Spigot
+        //SpigotTimings.tickablesTimer.startTiming(); // Spigot // Purpur
         for (i = 0; i < this.p.size(); ++i) {
             ((IUpdatePlayerListBox) this.p.get(i)).c();
         }
-        SpigotTimings.tickablesTimer.stopTiming(); // Spigot
+        //SpigotTimings.tickablesTimer.stopTiming(); // Spigot // Purpur
 
         this.methodProfiler.b();
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5f20925b5..55b7e67be 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1202,7 +1202,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     // CraftBukkit end
 
    private void handleCommand(String s) {
-        SpigotTimings.playerCommandTimer.startTiming(); // Spigot
+        //SpigotTimings.playerCommandTimer.startTiming(); // Spigot // Purpur
        // CraftBukkit start - whole method
         if ( TitaniumConfig.get().spigot.commands.log ) // Spigot
         this.c.info(this.player.getName() + " issued server command: " + s);
@@ -1213,22 +1213,22 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
-            SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            //SpigotTimings.playerCommandTimer.stopTiming(); // Spigot // Purpur
             return;
         }
 
         try {
             if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
-                SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+                //SpigotTimings.playerCommandTimer.stopTiming(); // Spigot // Purpur
                 return;
             }
         } catch (org.bukkit.command.CommandException ex) {
             player.sendMessage(server.messageConfig.internalErrorCommand);
             java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-            SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            //SpigotTimings.playerCommandTimer.stopTiming(); // Spigot // Purpur
             return;
         }
-        SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+        //SpigotTimings.playerCommandTimer.stopTiming(); // Spigot // Purpur
         // this.minecraftServer.getCommandHandler().a(this.player, s);
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 73511b21e..aabf2396a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -184,6 +184,7 @@ public abstract class World implements IBlockAccess {
     public final IonWorldConfig ionConfigTitanium;
     // Titanium end
 
+    @Deprecated
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
 
     public CraftWorld getWorld() {
@@ -1501,7 +1502,7 @@ public abstract class World implements IBlockAccess {
         }
 
         this.methodProfiler.c("remove");
-        timings.entityRemoval.startTiming(); // Spigot
+        //timings.entityRemoval.startTiming(); // Spigot // Purpur
         this.entityList.removeAll(this.g);
 
         int j;
@@ -1522,14 +1523,14 @@ public abstract class World implements IBlockAccess {
         // Paper end
 
         this.g.clear();
-        timings.entityRemoval.stopTiming(); // Spigot
+        //timings.entityRemoval.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("regular");
 
         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-        timings.entityTick.startTiming(); // Spigot
+        //timings.entityTick.startTiming(); // Spigot // Purpur
         guardEntityList = true; // Spigot
         // CraftBukkit start - Use field for loop variable
-        co.aikar.timings.TimingHistory.entityTicks += this.entityList.size(); // Spigot
+        //co.aikar.timings.TimingHistory.entityTicks += this.entityList.size(); // Spigot // Purpur
         int entitiesThisCycle = 0;
         // PaperSpigot start - Disable tick limiters
         //if (tickPosition < 0) tickPosition = 0;
@@ -1550,12 +1551,12 @@ public abstract class World implements IBlockAccess {
             this.methodProfiler.a("tick");
             if (!entity.dead) {
                 try {
-                    entity.tickTimer.startTiming(); // Spigot
+                    //entity.tickTimer.startTiming(); // Spigot // Purpur
                     this.g(entity);
-                    entity.tickTimer.stopTiming(); // Spigot
+                    //entity.tickTimer.stopTiming(); // Spigot // Purpur
                 } catch (Throwable throwable1) {
                     // PaperSpigot start - Prevent tile entity and entity crashes
-                    entity.tickTimer.stopTiming();
+                    //entity.tickTimer.stopTiming(); // Purpur
                     String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX + "," + entity.locY + "," + entity.locZ;
                     System.err.println(msg);
                     throwable1.printStackTrace();
@@ -1585,9 +1586,9 @@ public abstract class World implements IBlockAccess {
         }
         guardEntityList = false; // Spigot
 
-        timings.entityTick.stopTiming(); // Spigot
+        //timings.entityTick.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("blockEntities");
-        timings.tileEntityTick.startTiming(); // Spigot
+        //timings.tileEntityTick.startTiming(); // Spigot // Purpur
         this.M = true;
         // CraftBukkit start - From below, clean up tile entities before ticking them
         if (!this.c.isEmpty()) {
@@ -1616,11 +1617,11 @@ public abstract class World implements IBlockAccess {
 
                 if (this.isLoaded(blockposition) && this.N.a(blockposition)) {
                     try {
-                        tileentity.tickTimer.startTiming(); // Spigot
+                        //tileentity.tickTimer.startTiming(); // Spigot // Purpur
                         ((IUpdatePlayerListBox) tileentity).c();
                     } catch (Throwable throwable2) {
                         // PaperSpigot start - Prevent tile entity and entity crashes
-                        tileentity.tickTimer.stopTiming();
+                        //tileentity.tickTimer.stopTiming(); // Purpur
                         String msg = "TileEntity threw exception at " + tileentity.world.getWorld().getName() + ":" + tileentity.position.getX() + "," + tileentity.position.getY() + "," + tileentity.position.getZ();
                         System.err.println(msg);
                         throwable2.printStackTrace();
@@ -1632,7 +1633,7 @@ public abstract class World implements IBlockAccess {
                     }
                     // Spigot start
                     finally {
-                        tileentity.tickTimer.stopTiming();
+                        //tileentity.tickTimer.stopTiming(); // Purpur
                     }
                     // Spigot end
                 }
@@ -1648,8 +1649,8 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        timings.tileEntityTick.stopTiming(); // Spigot
-        timings.tileEntityPending.startTiming(); // Spigot
+        //timings.tileEntityTick.stopTiming(); // Spigot // Purpur
+        //timings.tileEntityPending.startTiming(); // Spigot // Purpur
         this.M = false;
         /* CraftBukkit start - Moved up
         if (!this.c.isEmpty()) {
@@ -1682,11 +1683,11 @@ public abstract class World implements IBlockAccess {
             this.b.clear();
         }
 
-        timings.tileEntityPending.stopTiming(); // Spigot
-        co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityList.size(); // Spigot
+        //timings.tileEntityPending.stopTiming(); // Spigot // Purpur
+        //co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityList.size(); // Spigot // Purpur
 
-        this.methodProfiler.b();
-        this.methodProfiler.b();
+        //this.methodProfiler.b(); // Purpur
+        //this.methodProfiler.b(); // Purpur
     }
 
     public boolean a(TileEntity tileentity) {
@@ -1747,7 +1748,7 @@ public abstract class World implements IBlockAccess {
             entity.lastPitch = entity.pitch;
             if (flag && entity.ad) {
                 ++entity.ticksLived;
-                ++co.aikar.timings.TimingHistory.activatedEntityTicks; // Spigot
+                //++co.aikar.timings.TimingHistory.activatedEntityTicks; // Spigot // Purpur
                 if (entity.vehicle != null) {
                     entity.ak();
                 } else {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 7a6298489..41f3cbbdc 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -232,13 +232,13 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
         long time = this.worldData.getTime();
         if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
-            timings.mobSpawn.startTiming(); // Spigot
+            //timings.mobSpawn.startTiming(); // Spigot // Purpur
             this.R.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
-            timings.mobSpawn.stopTiming(); // Spigot
+            //timings.mobSpawn.stopTiming(); // Spigot // Purpur
             // CraftBukkit end
         }
         // CraftBukkit end
-        timings.doChunkUnload.startTiming(); // Spigot
+        //timings.doChunkUnload.startTiming(); // Spigot // Purpur
         this.methodProfiler.c("chunkSource");
 
         // Only unload if chunkProvider isn't null
@@ -257,35 +257,35 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.worldData.setDayTime(this.worldData.getDayTime() + 1L);
         }
 
-        timings.doChunkUnload.stopTiming(); // Spigot
+        //timings.doChunkUnload.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("tickPending");
-        timings.scheduledBlocks.startTiming(); // Spigot
+        //timings.scheduledBlocks.startTiming(); // Spigot // Purpur
         this.a(false);
-        timings.scheduledBlocks.stopTiming(); // Spigot
+        //timings.scheduledBlocks.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("tickBlocks");
-        timings.chunkTicks.startTiming(); // Spigot
+        //timings.chunkTicks.startTiming(); // Spigot // Purpur
         this.h();
-        timings.chunkTicks.stopTiming(); // Spigot
+        //timings.chunkTicks.stopTiming(); // Spigot // Purpur
         SpigotWorldConfig.getAntiXray().flushUpdates(this); // PaperSpigot
         this.methodProfiler.c("chunkMap");
-        timings.doChunkMap.startTiming(); // Spigot
+        //timings.doChunkMap.startTiming(); // Spigot // Purpur
         this.manager.flush();
-        timings.doChunkMap.stopTiming(); // Spigot
+        //timings.doChunkMap.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("village");
-        timings.doVillages.startTiming(); // Spigot
+        //timings.doVillages.startTiming(); // Spigot // Purpur
         this.villages.tick();
         this.siegeManager.a();
-        timings.doVillages.stopTiming(); // Spigot
+        //timings.doVillages.stopTiming(); // Spigot // Purpur
         this.methodProfiler.c("portalForcer");
-        timings.doPortalForcer.startTiming(); // Spigot
+        //timings.doPortalForcer.startTiming(); // Spigot // Purpur
         this.Q.a(this.getTime());
-        timings.doPortalForcer.stopTiming(); // Spigot
+        //timings.doPortalForcer.stopTiming(); // Spigot // Purpur
         this.methodProfiler.b();
-        timings.doSounds.startTiming(); // Spigot
+        //timings.doSounds.startTiming(); // Spigot // Purpur
         this.ak();
 
         this.getWorld().processChunkGC(); // CraftBukkit
-        timings.doChunkGC.stopTiming(); // Spigot
+        //timings.doChunkGC.stopTiming(); // Spigot // Purpur
     }
 
     public BiomeBase.BiomeMeta a(EnumCreatureType enumcreaturetype, BlockPosition blockposition) {
@@ -485,7 +485,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
 
                 this.methodProfiler.c("tickBlocks");
-                timings.chunkTicksBlocks.startTiming(); // Spigot
+                //timings.chunkTicksBlocks.startTiming(); // Spigot // Purpur
                 i1 = titaniumConfig.disabledGamerules.randomTickSpeed ? 3 : this.getGameRules().c("randomTickSpeed");
                 if (i1 > 0) {
                     ChunkSection[] achunksection = chunk.getSections();
@@ -514,7 +514,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                         }
                     }
                 }
-                timings.chunkTicksBlocks.stopTiming(); // Spigot
+                //timings.chunkTicksBlocks.stopTiming(); // Spigot // Purpur
             }
 
         }
@@ -646,7 +646,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                 this.methodProfiler.a("cleaning");
 
-                timings.scheduledBlocksCleanup.startTiming(); // Spigot
+                //timings.scheduledBlocksCleanup.startTiming(); // Spigot // Purpur
                 NextTickListEntry nextticklistentry;
 
                 for (int j = 0; j < i; ++j) {
@@ -659,7 +659,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     this.M.remove(nextticklistentry);
                     this.V.add(nextticklistentry);
                 }
-                timings.scheduledBlocksCleanup.stopTiming(); // Spigot
+                //timings.scheduledBlocksCleanup.stopTiming(); // Spigot // Purpur
 
                 // PaperSpigot start - Allow redstone ticks to bypass the tickNextTickListCap
                 if (paperConfigTitanium.tickNextTickListCapIgnoresRedstone) {
@@ -680,7 +680,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                 this.methodProfiler.b();
                 this.methodProfiler.a("ticking");
-                timings.scheduledBlocksTicking.startTiming(); // Spigot
+                //timings.scheduledBlocksTicking.startTiming(); // Spigot // Purpur
                 Iterator iterator = this.V.iterator();
 
                 while (iterator.hasNext()) {
@@ -691,7 +691,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     if (this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))) {
                         IBlockData iblockdata = this.getType(nextticklistentry.a);
                         co.aikar.timings.Timing timing = iblockdata.getBlock().getTiming(); // Spigot
-                        timing.startTiming(); // Spigot
+                        //timing.startTiming(); // Spigot // Purpur
 
                         if (iblockdata.getBlock().getMaterial() != Material.AIR && Block.a(iblockdata.getBlock(), nextticklistentry.a())) {
                             try {
@@ -704,12 +704,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                                 throw new ReportedException(crashreport);
                             }
                         }
-                        timing.stopTiming(); // Spigot
+                        //timing.stopTiming(); // Spigot // Purpur
                     } else {
                         this.a(nextticklistentry.a, nextticklistentry.a(), 0);
                     }
                 }
-                timings.scheduledBlocksTicking.stopTiming(); // Spigot
+                //timings.scheduledBlocksTicking.stopTiming(); // Spigot // Purpur
 
                 this.methodProfiler.b();
                 this.V.clear();
diff --git a/src/main/java/net/titanium/config/SpigotConfig.java b/src/main/java/net/titanium/config/SpigotConfig.java
index dd47b50c5..a9dddef60 100644
--- a/src/main/java/net/titanium/config/SpigotConfig.java
+++ b/src/main/java/net/titanium/config/SpigotConfig.java
@@ -161,49 +161,6 @@ public class SpigotConfig extends TitaniumConfigSection {
 
     }
 
-    @Comment("Various settings related to server timings and debugging.")
-    public Timings timings = new Timings();
-
-    public static class Timings extends TitaniumConfigSection {
-
-        public boolean enabled = true;
-        public boolean verbose = true;
-        public boolean serverNamePrivacy = false;
-        public List<String> hiddenConfigEntries = Arrays.asList("database", "bungeecord-addresses");
-        public int historyInterval = 300;
-        public int historyLength = 3600;
-
-        @Override
-        public void loadProcessedProperties() {
-            TimingsManager.privacy = serverNamePrivacy;
-            TimingsManager.hiddenConfigs = hiddenConfigEntries;
-
-            co.aikar.timings.Timings.setTimingsEnabled(enabled);
-            co.aikar.timings.Timings.setVerboseTimingsEnabled(verbose);
-            co.aikar.timings.Timings.setHistoryInterval(historyInterval * 20);
-            co.aikar.timings.Timings.setHistoryLength(historyLength * 20);
-
-            log(Level.INFO, "Spigot Timings: " + enabled +
-                    " - Verbose: " + verbose +
-                    " - Interval: " + timeSummary(co.aikar.timings.Timings.getHistoryInterval() / 20) +
-                    " - Length: " + timeSummary(co.aikar.timings.Timings.getHistoryLength() / 20));
-        }
-
-        private static String timeSummary(int seconds) {
-            String time = "";
-            if (seconds > 60 * 60) {
-                time += TimeUnit.SECONDS.toHours(seconds) + "h";
-                seconds /= 60;
-            }
-
-            if (seconds > 0) {
-                time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
-            }
-            return time;
-        }
-
-    }
-
     public Stats stats = new Stats();
 
     public static class Stats extends TitaniumConfigSection {
diff --git a/src/main/java/net/titanium/job/AutoSaveJob.java b/src/main/java/net/titanium/job/AutoSaveJob.java
index 650692182..b4ed7c1de 100644
--- a/src/main/java/net/titanium/job/AutoSaveJob.java
+++ b/src/main/java/net/titanium/job/AutoSaveJob.java
@@ -32,18 +32,18 @@ public class AutoSaveJob {
      */
     public boolean process() throws ExceptionWorldConflict {
         if (this.isJob(JobDetail.WORLD_SAVE) && this.worldserver != null) {
-            SpigotTimings.worldSaveTimer.startTiming();
+            //SpigotTimings.worldSaveTimer.startTiming(); // Purpur
             MinecraftServer.getServer().info("[AutoSave] Saving world " + this.worldserver.getWorld().getName());
             this.worldserver.save(true, (IProgressUpdate) null);
             FileIOThread.a().setNoDelay(true);
-            SpigotTimings.worldSaveTimer.stopTiming();
+            //SpigotTimings.worldSaveTimer.stopTiming(); // Purpur
         } else if (this.isJob(JobDetail.WORLD_SAVEEVENT) && this.worldserver != null) {
             if (FileIOThread.a().isDone()) {
-                SpigotTimings.worldSaveTimer.startTiming();
+                //SpigotTimings.worldSaveTimer.startTiming(); // Purpur
                 FileIOThread.a().setNoDelay(false);
                 RegionFileCache.a();
                 Bukkit.getPluginManager().callEvent(new WorldSaveEvent(this.worldserver.getWorld()));
-                SpigotTimings.worldSaveTimer.stopTiming();
+                //SpigotTimings.worldSaveTimer.stopTiming(); // Purpur
             } else {
                 return false;
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 19cdb459e..e050c4a75 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -286,11 +286,11 @@ public class CraftWorld implements World {
         net.minecraft.server.Chunk chunk = world.chunkProviderServer.chunks.get(key);
 
         if (chunk == null) {
-            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
+            //world.timings.syncChunkLoadTimer.startTiming(); // Spigot // Purpur
             chunk = world.chunkProviderServer.loadChunk(x, z);
 
             chunkLoadPostProcess(chunk, x, z);
-            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
+            //world.timings.syncChunkLoadTimer.stopTiming(); // Spigot // Purpur
         }
         world.chunkProviderServer.unloadQueue.remove(key);
         return chunk != null;
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
index 1178ad7f7..c7e2b561f 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
@@ -49,9 +49,9 @@ class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChu
         chunk.addEntities();
 
         if (queuedChunk.provider.chunkProvider != null) {
-            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
+            //queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot // Purpur
             queuedChunk.provider.chunkProvider.recreateStructures(chunk, queuedChunk.x, queuedChunk.z);
-            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
+            //queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot // Purpur
         }
 
         Server server = queuedChunk.provider.world.getServer();
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 44cbcdac8..8aec605a0 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -60,9 +60,9 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     }
 
     public void run() {
-        if (timings != null && isSync()) timings.startTiming(); // Spigot
+        //if (timings != null && isSync()) timings.startTiming(); // Spigot // Purpur
         task.run();
-        if (timings != null && isSync()) timings.stopTiming(); // Spigot
+        //if (timings != null && isSync()) timings.stopTiming(); // Spigot // Purpur
     }
 
     long getPeriod() {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 3f10502c5..8b5b679d6 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -101,7 +101,7 @@ public class ActivationRange
      */
     public static void activateEntities(World world)
     {
-        SpigotTimings.entityActivationCheckTimer.startTiming();
+        //SpigotTimings.entityActivationCheckTimer.startTiming(); // Purpur
         final int miscActivationRange = world.spigotConfigTitanium.entityActivationRange.ambient;
         final int animalActivationRange = world.spigotConfigTitanium.entityActivationRange.animals;
         final int monsterActivationRange = world.spigotConfigTitanium.entityActivationRange.monsters;
@@ -135,7 +135,7 @@ public class ActivationRange
                 }
             }
         }
-        SpigotTimings.entityActivationCheckTimer.stopTiming();
+        //SpigotTimings.entityActivationCheckTimer.stopTiming(); // Purpur
     }
 
     /**
@@ -250,10 +250,10 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
-        SpigotTimings.checkIfActiveTimer.startTiming();
+        //SpigotTimings.checkIfActiveTimer.startTiming(); // Purpur
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.isAddedToChunk() || entity instanceof EntityFireworks || entity.loadChunks ) { // PaperSpigot
-            SpigotTimings.checkIfActiveTimer.stopTiming();
+            //SpigotTimings.checkIfActiveTimer.stopTiming(); // Purpur
             return true;
         }
 
@@ -285,7 +285,7 @@ public class ActivationRange
         {
             isActive = false;
         }
-        SpigotTimings.checkIfActiveTimer.stopTiming();
+        //SpigotTimings.checkIfActiveTimer.stopTiming(); // Purpur
         return isActive;
     }
 }
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index da1563309..3d9021bc8 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -107,9 +107,9 @@ public class AntiXray
                 return;
             }
             // PaperSpigot end
-            SpigotTimings.antiXrayUpdateTimer.startTiming();
+            //SpigotTimings.antiXrayUpdateTimer.startTiming(); // Purpur
             updateNearbyBlocks( world, position, 2, false ); // 2 is the radius, we shouldn't change it as that would make it exponentially slower
-            SpigotTimings.antiXrayUpdateTimer.stopTiming();
+            //SpigotTimings.antiXrayUpdateTimer.stopTiming(); // Purpur
         }
     }
 
@@ -121,9 +121,9 @@ public class AntiXray
     {
         if ( world.spigotConfigTitanium.antiXray.enabled )
         {
-            SpigotTimings.antiXrayObfuscateTimer.startTiming();
+            //SpigotTimings.antiXrayObfuscateTimer.startTiming(); // Purpur
             obfuscate( chunkX, chunkY, bitmask, buffer, world );
-            SpigotTimings.antiXrayObfuscateTimer.stopTiming();
+            //SpigotTimings.antiXrayObfuscateTimer.stopTiming(); // Purpur
         }
     }
 
-- 
2.36.0.windows.1

