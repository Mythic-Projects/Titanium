From 1d118a0e014007e7e8a6b9bc02408271cc793758 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 14 Sep 2022 21:23:44 +0200
Subject: [PATCH] Replace Guava with Caffeine


diff --git a/build.gradle b/build.gradle
index 09d62c419..6e5bd3f2f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,6 +30,7 @@ dependencies {
     implementation 'net.openhft:affinity:3.21ea83' // WindSpigot - Thread affinity
     implementation 'com.eatthepath:fast-uuid:0.2.0' // Nacho - Use jchambers' FAST UUID method
     implementation 'com.github.matejtymes:javafixes:1.3.7.1' // WindSpigot
+    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3' // Titanium - use caffeine instead of guava cache
     // Titanium libraries end
 
     testImplementation 'junit:junit:4.13.2' // Titanium - Updated junit to 4.13.2
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index 58014c5f1..dc98962bd 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import com.github.benmanes.caffeine.cache.CacheLoader;
+import com.github.benmanes.caffeine.cache.Caffeine;
+import com.github.benmanes.caffeine.cache.LoadingCache;
 import com.google.common.collect.Iterables;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
@@ -7,9 +10,6 @@ import java.util.UUID;
 
 // Spigot start
 import com.google.common.base.Predicate;
-import com.google.common.cache.LoadingCache;
-import com.google.common.cache.CacheBuilder;
-import com.google.common.cache.CacheLoader;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
@@ -30,51 +30,43 @@ public class TileEntitySkull extends TileEntity {
                     .setNameFormat("Head Conversion Thread - %1$d")
                     .build()
     );
-    public static final LoadingCache<String, GameProfile> skinCache = CacheBuilder.newBuilder()
+    // Titanium start - replace guava cache with caffeine
+    public static final LoadingCache<String, GameProfile> skinCache = Caffeine.newBuilder()
             .maximumSize( 5000 )
             .expireAfterAccess( 60, TimeUnit.MINUTES )
-            .build( new CacheLoader<String, GameProfile>()
-            {
-                @Override
-                public GameProfile load(String key) throws Exception
-                {
-                    final GameProfile[] profiles = new GameProfile[1];
-                    ProfileLookupCallback gameProfileLookup = new ProfileLookupCallback() {
-
-                        @Override
-                        public void onProfileLookupSucceeded(GameProfile gp) {
-                            profiles[0] = gp;
-                        }
-
-                        @Override
-                        public void onProfileLookupFailed(GameProfile gp, Exception excptn) {
-                            profiles[0] = gp;
-                        }
-                    };
+            .build(key -> {
+                final GameProfile[] profiles = new GameProfile[1];
+                ProfileLookupCallback gameProfileLookup = new ProfileLookupCallback() {
+                    @Override
+                    public void onProfileLookupSucceeded(GameProfile gp) {
+                        profiles[0] = gp;
+                    }
 
-                    MinecraftServer.getServer().getGameProfileRepository().findProfilesByNames(new String[] { key }, Agent.MINECRAFT, gameProfileLookup);
+                    @Override
+                    public void onProfileLookupFailed(GameProfile gp, Exception excptn) {
+                        profiles[0] = gp;
+                    }
+                };
 
-                    GameProfile profile = profiles[ 0 ];
-                    if (profile == null) {
-                        UUID uuid = EntityHuman.a(new GameProfile(null, key));
-                        profile = new GameProfile(uuid, key);
+                MinecraftServer.getServer().getGameProfileRepository().findProfilesByNames(new String[]{key}, Agent.MINECRAFT, gameProfileLookup);
 
-                        gameProfileLookup.onProfileLookupSucceeded(profile);
-                    } else
-                    {
+                GameProfile profile = profiles[0];
+                if (profile == null) {
+                    UUID uuid = EntityHuman.a(new GameProfile(null, key));
+                    profile = new GameProfile(uuid, key);
 
-                        Property property = Iterables.getFirst( profile.getProperties().get( "textures" ), null );
+                    gameProfileLookup.onProfileLookupSucceeded(profile);
+                } else {
+                    Property property = Iterables.getFirst(profile.getProperties().get("textures"), null);
 
-                        if ( property == null )
-                        {
-                            profile = MinecraftServer.getServer().aD().fillProfileProperties( profile, true );
-                        }
+                    if (property == null) {
+                        profile = MinecraftServer.getServer().aD().fillProfileProperties(profile, true);
                     }
-
-
-                    return profile;
                 }
-            } );
+
+                return profile;
+            });
+    // Titanium end
     
     // Spigot end
 
@@ -169,7 +161,7 @@ public class TileEntitySkull extends TileEntity {
                     executor.execute(new Runnable() {
                         @Override
                         public void run() {
-                            final GameProfile profile = skinCache.getUnchecked(gameprofile.getName().toLowerCase());                            
+                            final GameProfile profile = skinCache.get(gameprofile.getName().toLowerCase()); // Titanium - replace Guava cache with Caffeine
                             MinecraftServer.getServer().processQueue.add(new Runnable() {
                                 @Override
                                 public void run() {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 602e32e5f..a7c83ebff 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -192,7 +192,7 @@ public final class CraftServer implements Server {
     private final LoaderOptions loaderOptions = new LoaderOptions();
     private final Yaml yaml = new Yaml(new SafeConstructor(), new Representer(), new DumperOptions(), loaderOptions);
     // KigPaper end
-    private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().weakValues().makeMap();
+    private final com.github.benmanes.caffeine.cache.Cache<UUID, OfflinePlayer> offlinePlayers = com.github.benmanes.caffeine.cache.Caffeine.newBuilder().weakValues().build(); // Titanium - replace Map with Caffeine
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
@@ -1546,7 +1546,7 @@ public final class CraftServer implements Server {
                 result = getOfflinePlayer(profile);
             }
         } else {
-            offlinePlayers.remove(result.getUniqueId());
+            offlinePlayers.invalidate(result.getUniqueId()); // Titanium - use caffeine
         }
 
         return result;
@@ -1558,13 +1558,13 @@ public final class CraftServer implements Server {
 
         OfflinePlayer result = getPlayer(id);
         if (result == null) {
-            result = offlinePlayers.get(id);
+            result = offlinePlayers.getIfPresent(id); // Titanium - use caffeine
             if (result == null) {
                 result = new CraftOfflinePlayer(this, new GameProfile(id, null));
                 offlinePlayers.put(id, result);
             }
         } else {
-            offlinePlayers.remove(id);
+            offlinePlayers.invalidate(id); // Titanium - use caffeine
         }
 
         return result;
-- 
2.36.0.windows.1

