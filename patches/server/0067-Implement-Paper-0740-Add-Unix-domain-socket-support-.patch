From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Steinborn <git@steinborn.me>
Date: Tue, 11 May 2021 17:39:22 -0400
Subject: [PATCH] Implement [Paper-0740] Add Unix domain socket support by
 Andrew Steinborn


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 4968358d07fa8e3572f158833bfaf020bd98b572..d057a8bf01135a06ef629a0c640da947816bd722 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -164,17 +164,36 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             this.r = WorldSettings.a(i);
             DedicatedServer.LOGGER.info("Default game type: " + this.r);
-            InetAddress inetaddress = null;
 
-            if (this.getServerIp().length() > 0) {
-                inetaddress = InetAddress.getByName(this.getServerIp());
-            }
-
-            if (this.R() < 0) {
-                this.setPort(this.propertyManager.getInt("server-port", 25565));
-            }
+            // Paper start - Unix domain socket support
             // Spigot start
             this.a((PlayerList) (new DedicatedPlayerList(this)));
+            // Spigot end
+            java.net.SocketAddress bindAddress;
+            if (this.getServerIp().startsWith("unix:")) {
+                if (!io.netty.channel.epoll.Epoll.isAvailable()) {
+                    DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
+                    DedicatedServer.LOGGER.fatal("You are trying to use a Unix domain socket but you're not on a supported OS.");
+                    return false;
+                } else if (!server.serverConfig.spigot.settings.bungeecord) {
+                    DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
+                    DedicatedServer.LOGGER.fatal("Unix domain sockets require IPs to be forwarded from a proxy.");
+                    return false;
+                }
+                bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getServerIp().substring("unix:".length()));
+            } else {
+                InetAddress inetaddress = null;
+
+                if (this.getServerIp().length() > 0) {
+                    inetaddress = InetAddress.getByName(this.getServerIp());
+                }
+
+                if (this.R() < 0) {
+                    this.setPort(this.propertyManager.getInt("server-port", 25565));
+                }
+                bindAddress = new java.net.InetSocketAddress(inetaddress, this.R());
+            }
+            // Paper end
             // Titanium start
             /*
             org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
@@ -194,7 +213,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         if (!TitaniumConfig.get().spigot.settings.lateBind) {
             try {
-                this.aq().a(inetaddress, this.R());
+                this.aq().bind(bindAddress); // Paper - Unix domain socket support
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
@@ -300,7 +319,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         if (TitaniumConfig.get().spigot.settings.lateBind) {
             try {
-                this.aq().a(inetaddress, this.R());
+                this.aq().bind(bindAddress); // Paper - Unix domain socket support
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index bd875fffe017d5176fdd953db50d7cdf4547b98e..1565eb45d96daa1dd2b5b831ba27bf771e2f225a 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -30,6 +30,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
             // CraftBukkit start - Connection throttle
             try {
+                if (!(this.b.channel.localAddress() instanceof io.netty.channel.unix.DomainSocketAddress)) { // Paper - the connection throttle is useless when you have a Unix domain socket
                 long currentTime = System.currentTimeMillis();
                 long connectionThrottle = MinecraftServer.getServer().server.getConnectionThrottle();
                 InetAddress address = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress();
@@ -58,6 +59,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                         }
                     }
                 }
+                } // Paper - add closing bracket for if check above
             } catch (Throwable t) {
                 org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
             }
@@ -77,8 +79,11 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 if (TitaniumConfig.get().spigot.settings.bungeecord) {
                     String[] split = packethandshakinginsetprotocol.hostname.split("\00");
                     if ( split.length == 3 || split.length == 4 ) {
+                        // Paper start - Unix domain socket support
+                        java.net.SocketAddress socketAddress = b.getSocketAddress();
                         packethandshakinginsetprotocol.hostname = split[0];
-                        b.l = new java.net.InetSocketAddress(split[1], ((java.net.InetSocketAddress) b.getSocketAddress()).getPort());
+                        b.l = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                        // Paper end
                         b.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
                     } else
                     {
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 9f9d3b1e051d9c6da04c881c7b831ffd64ec427d..b07d71febd5dcd1290d57980fd180a5395bc318f 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -531,6 +531,11 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     // Spigot Start
     public SocketAddress getRawAddress()
     {
+        // Paper start - This can be null in the case of a Unix domain socket, so if it is, fake something
+        if (this.channel.remoteAddress() == null) {
+            return new java.net.InetSocketAddress(java.net.InetAddress.getLoopbackAddress(), 0);
+        }
+        // Paper end
         return this.channel.remoteAddress();
     }
     // Spigot End
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 582537189b86b4db4cc295a19fab755bd74510b3..f56baf1a7cabf55249dd1e910ab3900079ee752e 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -69,7 +69,12 @@ public class ServerConnection {
         this.d = true;
     }
 
+    // Paper start
     public void a(InetAddress inetaddress, int i) throws IOException {
+        bind(new java.net.InetSocketAddress(inetaddress, i));
+    }
+    public void bind(java.net.SocketAddress address) throws IOException {
+        // Paper end
         List list = this.g;
 
         synchronized (this.g) {
@@ -77,7 +82,13 @@ public class ServerConnection {
             LazyInitVar lazyinitvar;
 
             if (Epoll.isAvailable() && this.f.ai()) {
-                oclass = EpollServerSocketChannel.class;
+                // Paper start - Unix domain socket support
+                if (address instanceof io.netty.channel.unix.DomainSocketAddress) {
+                    oclass = io.netty.channel.epoll.EpollServerDomainSocketChannel.class;
+                } else {
+                    oclass = EpollServerSocketChannel.class;
+                }
+                // Paper end
                 lazyinitvar = ServerConnection.b;
                 ServerConnection.e.info("Using epoll channel type");
             } else {
@@ -103,7 +114,7 @@ public class ServerConnection {
                     networkmanager.isPending = false; // Paper
                     networkmanager.a((PacketListener) (new HandshakeListener(ServerConnection.this.f, networkmanager)));
                 }
-            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(address)).bind().syncUninterruptibly()); // Paper - Unix domain socket support
         }
     }
 
