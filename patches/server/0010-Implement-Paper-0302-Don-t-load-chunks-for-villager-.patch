From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Fri, 9 Apr 2021 16:00:40 +0200
Subject: [PATCH] Implement [Paper-0302] Don't load chunks for villager door
 check by Aikar


diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index e67aa0423f6a28b286174662f29ffc32a74992d9..072f466a269269b84f8b2870d912e54ebc8aec9e 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -318,7 +318,12 @@ public class Village {
     }
 
     private boolean f(BlockPosition blockposition) {
-        Block block = this.a.getType(blockposition).getBlock();
+        // Paper start
+        IBlockData iblockdata = this.a.getTypeIfLoaded(blockposition);
+        if (iblockdata == null)
+            return false;
+        Block block = iblockdata.getBlock();
+        // Paper end
 
         return block instanceof BlockDoor ? block.getMaterial() == Material.WOOD : false;
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index fc1efbf33e8877d267c7992282150bca023825ef..9adaed197ce207a58067c66d72c0475328b7700f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -73,7 +73,7 @@ public abstract class World implements IBlockAccess {
     public final List<Entity> k = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private long d = 16777215L;
-    private int I;
+    private int I; private int getSkylightSubtracted() { return this.I; } // Paper - OBFHELPER
     protected int m = (new Random()).nextInt();
     protected final int n = 1013904223;
     protected float o;
@@ -182,6 +182,11 @@ public abstract class World implements IBlockAccess {
         return (CraftServer) Bukkit.getServer();
     }
 
+    // Paper start
+    public Chunk getChunkIfLoaded(BlockPosition blockposition) {
+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+    }
+
     public Chunk getChunkIfLoaded(int x, int z) {
         return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
     }
@@ -292,6 +297,8 @@ public abstract class World implements IBlockAccess {
         this.worldData.d(true);
     }
 
+    public final int getLight(BlockPosition blockposition, boolean checkNeighbors) { return this.c(blockposition, checkNeighbors); } // Paper - OBFHELPER
+
     public Block c(BlockPosition blockposition) {
         BlockPosition blockposition1;
 
@@ -779,6 +786,26 @@ public abstract class World implements IBlockAccess {
         return this.worldProvider.p()[this.getLightLevel(blockposition)];
     }
 
+    // Paper start - reduces need to do isLoaded before getType
+    public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            Iterator<BlockState> it = capturedBlockStates.iterator();
+            while (it.hasNext()) {
+                BlockState previous = it.next();
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
+                }
+            }
+        }
+        // CraftBukkit end
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        if (chunk != null) {
+            return this.isValidLocation(blockposition) ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+        }
+        return null;
+    }
+
     // Spigot start
     public IBlockData getType(BlockPosition blockposition)
     {
