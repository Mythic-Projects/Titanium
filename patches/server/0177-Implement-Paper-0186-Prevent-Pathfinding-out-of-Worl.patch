From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 19 Dec 2016 23:07:42 -0500
Subject: [PATCH] Implement [Paper-0186] Prevent Pathfinding out of World
 Border by Aikar


diff --git a/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java b/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java
index 8cae1fbde87b9bfd097f9849f3f694a5fd0bd6f8..3ac9239a7712e37e8db84aea4f230599e4b3138c 100644
--- a/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java
+++ b/src/main/java/ga/windpvp/windspigot/async/pathsearch/SearchHandler.java
@@ -30,12 +30,15 @@ public class SearchHandler {
             return;
         }
 
-        navigation.isSearching.set(true);
-
         final int finalX = MathHelper.floor(targetEntity.locX);
         final int finalY = MathHelper.floor(targetEntity.locY) + 1;
         final int finalZ = MathHelper.floor(targetEntity.locZ);
 
+        Entity entity = navigation.getEntity(); // Paper
+        if (!entity.getWorld().getWorldBorder().isInBoundsCords(finalX, finalZ)) return; // Paper - don't path out of world border
+
+        navigation.isSearching.set(true);
+
         AsyncUtil.run(() -> {
             PathEntity path = navigation.doPathSearch(chunkCache, finalX, finalY, finalZ);
             SearchCacheEntryEntity cache = new SearchCacheEntryEntity(targetEntity, navigation.getEntity(), path);
@@ -52,6 +55,9 @@ public class SearchHandler {
             return;
         }
 
+        Entity entity = navigation.getEntity(); // Paper
+        if (!entity.getWorld().getWorldBorder().isInBoundsCords(x, z)) return; // Paper - don't path out of world border
+
         navigation.isSearching.set(true);
 
         AsyncUtil.run(() -> {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 1ec5cedab50628df8a98e1ed595848a3670c304a..f439138a2cc6c17200bf12400af1696354cb9364 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -85,6 +85,7 @@ public abstract class NavigationAbstract {
     }
 
     public PathEntity a(BlockPosition blockposition) {
+        if (!getEntity().getWorld().getWorldBorder().isInBounds(blockposition)) return null; // Paper - don't path out of world border
         if (!this.b()) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 7ea40468e93e0026f5c39dc41f9c27d7c59d5fc1..aee2e095fa1b2ccb715a2338703d58359cbf920f 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -29,10 +29,17 @@ public class WorldBorder {
         this.l = 5;
     }
 
+    public boolean isInBounds(BlockPosition blockposition) { return this.a(blockposition); } // Paper - OBFHELPER
     public boolean a(BlockPosition blockposition) {
-        return (double) (blockposition.getX() + 1) > this.b() && (double) blockposition.getX() < this.d() && (double) (blockposition.getZ() + 1) > this.c() && (double) blockposition.getZ() < this.e();
+        return this.isInBoundsCords(blockposition.getX(), blockposition.getZ()); // Titanium
     }
 
+    // Titanium start
+    public boolean isInBoundsCords(int x, int z) {
+        return (double) (x + 1) > this.b() && (double) x < this.d() && (double) (z + 1) > this.c() && (double) z < this.e();
+    }
+    // Titanium end
+
     // CraftBukkit start - split method
     public boolean isInBounds(ChunkCoordIntPair chunkcoordintpair) {
         return isInBounds(chunkcoordintpair.x, chunkcoordintpair.z);
