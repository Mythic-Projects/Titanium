From 57fcdcab16c479c1161fbcfd2f6402fa956e4a05 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Thu, 19 May 2022 23:11:00 +0200
Subject: [PATCH] Implement [FlamePaper-0005] Fix multiple memory leaks


diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 98656815..07c72dc4 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -169,6 +169,9 @@ public class EnchantmentManager {
             a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.bA());
         }
 
+        // FlamePaper - Minetick fix memory leaks
+        EnchantmentManager.e.a = null;
+        EnchantmentManager.e.b = null;
     }
 
     public static void b(EntityLiving entityliving, Entity entity) {
@@ -182,6 +185,9 @@ public class EnchantmentManager {
             a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.e, entityliving.bA());
         }
 
+        // FlamePaper - Minetick fix memory leaks
+        EnchantmentManager.e.a = null;
+        EnchantmentManager.e.b = null;
     }
 
     public static int a(EntityLiving entityliving) {
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 90c629f1..681f0a99 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -238,6 +238,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     }
 
     public void close(IChatBaseComponent ichatbasecomponent) {
+        this.i.clear(); // FlamePaper - Minetick fix memory leaks
         // Spigot Start
         this.preparing = false;
         // Spigot End
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 6459594c..12b30412 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -187,4 +187,14 @@ public class PersistentCollection {
             return oshort.shortValue();
         }
     }
+
+    // FlamePaper - Minetick fix memory leaks
+    public void removeTrackedPlayer(EntityHuman entityhuman) {
+        for(Object o: this.c) {
+            if(o instanceof WorldMap) {
+                WorldMap map = (WorldMap) o;
+                map.untrackPlayer(entityhuman);
+            }
+        }
+    }
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 70f3661b..f9664044 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1125,6 +1125,7 @@ public abstract class World implements IBlockAccess {
         entity.die();
         if (entity instanceof EntityHuman) {
             this.players.remove(entity);
+            this.worldMaps.removeTrackedPlayer((EntityHuman) entity); // FlamePaper - Minetick fix memory leaks
             // Spigot start
             for ( Object o : worldMaps.c )
             {
@@ -1153,6 +1154,7 @@ public abstract class World implements IBlockAccess {
         entity.die();
         if (entity instanceof EntityHuman) {
             this.players.remove(entity);
+            this.worldMaps.removeTrackedPlayer((EntityHuman) entity); // FlamePaper - Minetick fix memory leaks
             this.everyoneSleeping();
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 162b3a31..f5d2d6d4 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -313,4 +313,17 @@ public class WorldMap extends PersistentBase {
 
         }
     }
+
+    // FlamePaper - Minetick fix memory leaks
+    public void untrackPlayer(EntityHuman entityhuman) {
+        if (this.i.containsKey(entityhuman)) {
+            this.i.remove(entityhuman);
+            java.util.Iterator<WorldMapHumanTracker> iter = (java.util.Iterator<WorldMapHumanTracker>) this.g.iterator();
+            while (iter.hasNext()) {
+                if (iter.next().trackee == entityhuman) {
+                    iter.remove();
+                }
+            }
+        }
+    }
 }
-- 
2.36.0.windows.1

