From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lucaskyy <contact@sculas.xyz>
Date: Mon, 19 Jul 2021 20:00:00 +0200
Subject: [PATCH] Implement [Nacho-????] Async TNT by Sculas


diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 741697e2f6410fb891c16e95ad8769f97a238914..5d0790c13641a17989de2e7eef5aa8322f6b9cb0 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -10,7 +11,12 @@ import java.util.Map;
 import java.util.Random;
 
 // CraftBukkit start
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import net.titanium.config.SpigotWorldConfig;
+import net.titanium.config.TitaniumConfig;
+import net.titanium.util.async.AsyncUtil;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityExplodeEvent;
 import org.bukkit.Location;
@@ -19,6 +25,17 @@ import org.bukkit.event.block.BlockExplodeEvent;
 
 public class Explosion {
 
+    // Nacho start
+    public static final ExecutorService BLOCK_DENSITY_EXECUTOR;
+    static {
+        if (TitaniumConfig.get().tnt.async.enabled) {
+            BLOCK_DENSITY_EXECUTOR = Executors.newFixedThreadPool(TitaniumConfig.get().tnt.async.threads, new ThreadFactoryBuilder().setNameFormat("Titanium - Explosion Block Density Thread #%d").build());
+        } else {
+            BLOCK_DENSITY_EXECUTOR = null;
+        }
+    }
+    // Nacho end
+
     private final boolean a;
     private final boolean b;
     private final Random c = new Random();
@@ -134,39 +151,56 @@ public class Explosion {
                         d8 /= d11;
                         d9 /= d11;
                         d10 /= d11;
-                        double d12 = this.getBlockDensity(vec3d, entity.getBoundingBox()); // PaperSpigot - Optimize explosions
-                        double d13 = (1.0D - d7) * d12;
-
-                        // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));+                        // CraftBukkit start
-                        CraftEventFactory.entityDamage = source;
-                        entity.forceExplosionKnockback = false;
-                        boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));
-                        CraftEventFactory.entityDamage = null;
-                        if (!wasDamaged && !(entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && !entity.forceExplosionKnockback) {
-                            continue;
+                        // Nacho start
+                        if (BLOCK_DENSITY_EXECUTOR != null) {
+                            double finalD8 = d8;
+                            double finalD9 = d9;
+                            double finalD10 = d10;
+                            this.getBlockDensityAsync(vec3d, entity.getBoundingBox()).thenAccept(d12 -> {
+                                AsyncUtil.runPostTick(() -> this.processEntityKnockback(entity, f3, d7, finalD8, finalD9, finalD10, d12));
+                            });
+                        } else {
+                            double d12 = this.getBlockDensity(vec3d, entity.getBoundingBox());
+                            this.processEntityKnockback(entity, f3, d7, d8, d9, d10, d12);
                         }
-                        // CraftBukkit end
-                        double d14 = entity instanceof EntityHuman && world.paperConfigTitanium.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
+                        // Nacho end
+                    }
+                }
+            }
+        }
+
+    }
+
+    // Nacho start
+    private void processEntityKnockback(Entity entity, double f3, double d7, double d8, double d9, double d10, double d12) {
+        double d13 = (1.0D - d7) * d12;
 
-                        // PaperSpigot start - Fix cannons
+        // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));+                        // CraftBukkit start
+        CraftEventFactory.entityDamage = source;
+        entity.forceExplosionKnockback = false;
+        boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * f3 + 1.0D)));
+        CraftEventFactory.entityDamage = null;
+        if (!wasDamaged && !(entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && !entity.forceExplosionKnockback) {
+            return;
+        }
+        // CraftBukkit end
+        double d14 = entity instanceof EntityHuman && world.paperConfigTitanium.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
+
+        // PaperSpigot start - Fix cannons
                         /*
                         entity.motX += d8 * d14;
                         entity.motY += d9 * d14;
                         entity.motZ += d10 * d14;
                         */
-                        // This impulse method sets the dirty flag, so clients will get an immediate velocity update
-                        entity.g(d8 * d14, d9 * d14, d10 * d14);
-                        // PaperSpigot end
+        // This impulse method sets the dirty flag, so clients will get an immediate velocity update
+        entity.g(d8 * d14, d9 * d14, d10 * d14);
+        // PaperSpigot end
 
-                        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperConfigTitanium.disableExplosionKnockback) { // PaperSpigot
-                            this.k.put((EntityHuman) entity, new Vec3D(d8 * d13, d9 * d13, d10 * d13));
-                        }
-                    }
-                }
-            }
+        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperConfigTitanium.disableExplosionKnockback) { // PaperSpigot
+            this.k.put((EntityHuman) entity, new Vec3D(d8 * d13, d9 * d13, d10 * d13));
         }
-
     }
+    // Nacho end
 
     public void a(boolean flag) {
         // PaperSpigot start - Configurable TNT explosion volume.
@@ -319,6 +353,12 @@ public class Explosion {
         return blockDensity;
     }
 
+    // Nacho start
+    private CompletableFuture<Float> getBlockDensityAsync(Vec3D vec3D, AxisAlignedBB aabb) {
+        return CompletableFuture.supplyAsync(() -> getBlockDensity(vec3D, aabb), BLOCK_DENSITY_EXECUTOR);
+    }
+    // Nacho end
+
     static class CacheKey {
         private final World world;
         private final double posX, posY, posZ;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index ccbb68fb13348ff5e8294e388cd2a5815111e492..7476ece1e4fa58e94132fd8627cd2eef13e3845e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -537,6 +537,10 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 this.Z.c();
             }
             //Spigot end
+
+            if (Explosion.BLOCK_DENSITY_EXECUTOR != null) {
+                Explosion.BLOCK_DENSITY_EXECUTOR.shutdownNow();
+            }
         }
     }
 
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 78b3804c6f6b0ece5e9226407fe3fd2ac183f8d6..e393ccd107701f4661eac820367d58fa188ead8d 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -137,6 +137,25 @@ public class TitaniumConfig extends TitaniumConfigSection {
 
     }
 
+    public Tnt tnt = new Tnt();
+
+    public static class Tnt extends TitaniumConfigSection {
+
+        public Async async = new Async();
+
+        public static class Async extends TitaniumConfigSection {
+
+            @Comment("Whether some calculation of explosions should be calculated asynchronously.")
+            @Comment("Enabling this could have good impact on performance, but also could cause issues (or not work like in vanilla).")
+            public boolean enabled = false;
+
+            @Comment("The amount of threads to use for explosion calculations.")
+            public int threads = 3;
+
+        }
+
+    }
+
     @Comment("When this option is enabled, the server will create a directory `legacy_configs` with files like bukkit.yml, spigot.yml etc.")
     @Comment("Changing option there will not affect the server, it's only mirror of this file.")
     @Comment("Enable this option only if some of your plugins are not compatible with the new configs.")
