From 27f4e3c28d33a2e352b0a1b896dc3b7212404745 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 5 Jun 2022 18:40:17 +0200
Subject: [PATCH] Backport PaperServerListPingEvent


diff --git a/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java b/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
new file mode 100644
index 00000000..c9dc5121
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
@@ -0,0 +1,48 @@
+package com.destroystokyo.paper.network;
+
+import java.net.InetSocketAddress;
+import javax.annotation.Nullable;
+import net.minecraft.server.NetworkManager;
+
+public class PaperNetworkClient implements NetworkClient {
+
+    private final NetworkManager networkManager;
+
+    PaperNetworkClient(NetworkManager networkManager) {
+        this.networkManager = networkManager;
+    }
+
+    @Override
+    public InetSocketAddress getAddress() {
+        return (InetSocketAddress) this.networkManager.getSocketAddress();
+    }
+
+    @Override
+    public int getProtocolVersion() {
+        return this.networkManager.protocolVersion;
+    }
+
+    @Nullable
+    @Override
+    public InetSocketAddress getVirtualHost() {
+        return this.networkManager.virtualHost;
+    }
+
+    public static InetSocketAddress prepareVirtualHost(String host, int port) {
+        int len = host.length();
+
+        // FML appends a marker to the host to recognize FML clients (\0FML\0)
+        int pos = host.indexOf('\0');
+        if (pos >= 0) {
+            len = pos;
+        }
+
+        // When clients connect with a SRV record, their host contains a trailing '.'
+        if (len > 0 && host.charAt(len -  1) == '.') {
+            len--;
+        }
+
+        return InetSocketAddress.createUnresolved(host.substring(0, len), port);
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
new file mode 100644
index 00000000..0af30675
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
@@ -0,0 +1,23 @@
+package com.destroystokyo.paper.network;
+
+import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
+import javax.annotation.Nullable;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.util.CachedServerIcon;
+
+class PaperServerListPingEventImpl extends PaperServerListPingEvent {
+
+    private final MinecraftServer server;
+
+    PaperServerListPingEventImpl(MinecraftServer server, StatusClient client, int protocolVersion, @Nullable CachedServerIcon icon) {
+        super(client, server.getMotd(), server.getPlayerList().getPlayerCount(), server.getPlayerList().getMaxPlayers(),
+                server.getServerModName() + ' ' + "1.8.8", protocolVersion, icon);
+        this.server = server;
+    }
+
+    @Override
+    protected final Object[] getOnlinePlayers() {
+        return this.server.getPlayerList().players.toArray();
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperStatusClient.java b/src/main/java/com/destroystokyo/paper/network/PaperStatusClient.java
new file mode 100644
index 00000000..a2a409e6
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/PaperStatusClient.java
@@ -0,0 +1,11 @@
+package com.destroystokyo.paper.network;
+
+import net.minecraft.server.NetworkManager;
+
+class PaperStatusClient extends PaperNetworkClient implements StatusClient {
+
+    PaperStatusClient(NetworkManager networkManager) {
+        super(networkManager);
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
new file mode 100644
index 00000000..55ef5213
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
@@ -0,0 +1,126 @@
+package com.destroystokyo.paper.network;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.google.common.base.MoreObjects;
+import com.google.common.base.Strings;
+import com.mojang.authlib.GameProfile;
+import java.util.List;
+import java.util.UUID;
+import java.util.stream.Collectors;
+import javax.annotation.Nonnull;
+import net.minecraft.server.ChatComponentText;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.NetworkManager;
+import net.minecraft.server.PacketStatusOutServerInfo;
+import net.minecraft.server.ServerPing;
+import net.titanium.config.TitaniumConfig;
+
+public final class StandardPaperServerListPingEventImpl extends PaperServerListPingEventImpl {
+
+    private static final GameProfile[] EMPTY_PROFILES = new GameProfile[0];
+    private static final UUID FAKE_UUID = new UUID(0, 0);
+
+    private GameProfile[] originalSample;
+
+    private StandardPaperServerListPingEventImpl(MinecraftServer server, NetworkManager networkManager) {
+        super(server, new PaperStatusClient(networkManager), 47 /* 1.8.x protocol */, server.server.getServerIcon());
+    }
+
+    @Nonnull
+    @Override
+    public List<PlayerProfile> getPlayerSample() {
+        List<PlayerProfile> sample = super.getPlayerSample();
+
+        if (this.originalSample != null) {
+            for (GameProfile profile : this.originalSample) {
+                sample.add(CraftPlayerProfile.asBukkitCopy(profile));
+            }
+            this.originalSample = null;
+        }
+
+        return sample;
+    }
+
+    private GameProfile[] getPlayerSampleHandle() {
+        if (this.originalSample != null) {
+            return this.originalSample;
+        }
+
+        List<PlayerProfile> entries = super.getPlayerSample();
+        if (entries.isEmpty()) {
+            return EMPTY_PROFILES;
+        }
+
+        GameProfile[] profiles = new GameProfile[entries.size()];
+        for (int i = 0; i < profiles.length; i++) {
+            /*
+             * Avoid null UUIDs/names since that will make the response invalid
+             * on the client.
+             * Instead, fall back to a fake/empty UUID and an empty string as name.
+             * This can be used to create custom lines in the player list that do not
+             * refer to a specific player.
+             */
+
+            PlayerProfile profile = entries.get(i);
+            if (profile.getId() != null && profile.getName() != null) {
+                profiles[i] = CraftPlayerProfile.asAuthlib(profile);
+            } else {
+                profiles[i] = new GameProfile(MoreObjects.firstNonNull(profile.getId(), FAKE_UUID), Strings.nullToEmpty(profile.getName()));
+            }
+        }
+
+        return profiles;
+    }
+
+    @SuppressWarnings("deprecation")
+    public static void processRequest(MinecraftServer server, NetworkManager networkManager) {
+        StandardPaperServerListPingEventImpl event = new StandardPaperServerListPingEventImpl(server, networkManager);
+
+        List<PlayerProfile> profiles = server.getPlayerList().players
+                .stream()
+                .map(EntityPlayer::getProfile)
+                .map(profile -> server.server.createProfile(profile.getId(), profile.getName()))
+                .collect(Collectors.toList());
+
+        // Spigot Start
+        if ( !profiles.isEmpty() ) {
+            java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
+            profiles = profiles.subList( 0, Math.min( profiles.size(), TitaniumConfig.get().spigot.settings.sampleCount ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+        }
+        // Spigot End
+
+        event.setPlayerSample(profiles);
+
+        server.server.getPluginManager().callEvent(event);
+
+        // Close connection immediately if event is cancelled
+        if (event.isCancelled()) {
+            networkManager.close(null);
+            return;
+        }
+
+        ServerPing ping = new ServerPing();
+
+        ping.setMOTD(new ChatComponentText(event.getMotd()));
+
+        // Players
+        if (!event.shouldHidePlayers()) {
+            ping.setPlayerSample(new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), profiles.size()));
+            ping.b().a(event.getPlayerSampleHandle());
+        }
+
+        // Version
+        ping.setServerInfo(new ServerPing.ServerData(event.getVersion(), event.getProtocolVersion()));
+
+        // Favicon
+        if (event.getServerIcon() != null) {
+            ping.setFavicon(event.getServerIcon().getData());
+        }
+
+        // Send response
+        networkManager.handle(new PacketStatusOutServerInfo(ping));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 051f4e62..10ae9e1e 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -111,6 +111,10 @@ public class HandshakeListener implements PacketHandshakingInListener {
             throw new UnsupportedOperationException("Invalid intention " + packethandshakinginsetprotocol.a());
         }
 
+        // Paper start - NetworkClient implementation
+        this.b.protocolVersion = packethandshakinginsetprotocol.b();
+        this.b.virtualHost = com.destroystokyo.paper.network.PaperNetworkClient.prepareVirtualHost(packethandshakinginsetprotocol.hostname, packethandshakinginsetprotocol.port);
+        // Paper end
     }
 
     public void a(IChatBaseComponent ichatbasecomponent) {}
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 95b9a5ad..6d732fcb 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -73,6 +73,10 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     private IChatBaseComponent n;
     private boolean o;
     private boolean p;
+    // Paper start - NetworkClient implementation
+    public int protocolVersion;
+    public java.net.InetSocketAddress virtualHost;
+    // Paper end
     private static boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush"); // PandaSpigot - Disable explicit flushing
     // PandaSpigot start - Optimize network
     public boolean isPending = true;
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 98083820..8107eeee 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import com.destroystokyo.paper.network.StandardPaperServerListPingEventImpl;
 import com.mojang.authlib.GameProfile;
 import io.netty.channel.ChannelFutureListener;
 import java.net.InetSocketAddress;
@@ -98,7 +99,8 @@ public class PacketStatusListener implements PacketStatusInListener {
             }
         }
 
-        ServerListPingEvent event = new ServerListPingEvent();
+        // Titanium start - backport PaperServerListPingEvent
+        /*ServerListPingEvent event = new ServerListPingEvent();
         this.minecraftServer.server.getPluginManager().callEvent(event);
 
         java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
@@ -125,7 +127,11 @@ public class PacketStatusListener implements PacketStatusInListener {
         ping.setServerInfo(new ServerPing.ServerData(minecraftServer.getServerModName() + " " + minecraftServer.getVersion(), 47)); // TODO: Update when protocol changes
 
         this.networkManager.handle(new PacketStatusOutServerInfo(ping));
+         */
         // CraftBukkit end
+
+        StandardPaperServerListPingEventImpl.processRequest(minecraftServer, this.networkManager);
+        // Titanium end
     }
 
     public void a(PacketStatusInPing packetstatusinping) {
-- 
2.36.0.windows.1

