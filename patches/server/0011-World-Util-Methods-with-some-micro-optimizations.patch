From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Fri, 25 Nov 2022 23:22:39 +0100
Subject: [PATCH] World Util Methods with some micro optimizations


diff --git a/src/main/java/net/minecraft/server/IChunkProvider.java b/src/main/java/net/minecraft/server/IChunkProvider.java
index c68ffe0e040f239f093a4543bc07463b27f96228..d86aace90c63eea95e20a7fe2f01f5de464446c8 100644
--- a/src/main/java/net/minecraft/server/IChunkProvider.java
+++ b/src/main/java/net/minecraft/server/IChunkProvider.java
@@ -10,6 +10,15 @@ public interface IChunkProvider {
 
     Chunk getChunkAt(BlockPosition blockposition);
 
+    // Titanium start
+    default Chunk getChunkIfLoaded(int i, int j) {
+        if (!this.isChunkLoaded(i, j)) {
+            return null;
+        }
+        return this.getOrCreateChunk(i, j);
+    }
+    // Titanium end
+
     void getChunkAt(IChunkProvider ichunkprovider, int i, int j);
 
     boolean a(IChunkProvider ichunkprovider, Chunk chunk, int i, int j);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 63891d58e74b71fe3bf8766e951fd38387c6a53e..0ede92a502621d6dda224e0f6ccf948ce01459f8 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -314,7 +314,7 @@ public abstract class World implements IBlockAccess {
 
     // Titanium start
     private boolean isValidLocation(int x, int y, int z) {
-        return x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000 && y >= 0 && y < 256;
+        return isInWorldBounds(x, z) && y >= 0 && y < 256;
     }
     // Titanium end
 
@@ -326,6 +326,12 @@ public abstract class World implements IBlockAccess {
         return this.a(blockposition, true);
     }
 
+    // Titanium start
+    public boolean isLoaded(int x, int y, int z) {
+        return this.getChunkIfLoaded(x >> 4, z >> 4) != null;
+    }
+    // Titanium end
+
     public boolean a(BlockPosition blockposition, boolean flag) {
         return !this.isValidLocation(blockposition) ? false : this.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4, flag);
     }
@@ -387,25 +393,92 @@ public abstract class World implements IBlockAccess {
         return this.chunkProvider.getOrCreateChunk(i, j);
     }
 
-    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+    // Titanium start
+    private void setCapturedBlockType(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        BlockState blockstate = null;
+        Iterator<BlockState> it = capturedBlockStates.iterator();
+        while (it.hasNext()) {
+            BlockState previous = it.next();
+            if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                blockstate = previous;
+                it.remove();
+                break;
+            }
+        }
+        if (blockstate == null) {
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+        }
+        blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
+        blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+        this.capturedBlockStates.add(blockstate);
+    }
+
+    public boolean setTypeAndDataIfLoaded(BlockPosition blockposition, IBlockData iblockdata, int i) {
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
-            BlockState blockstate = null;
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    blockstate = previous;
-                    it.remove();
-                    break;
-                }
-            }
-            if (blockstate == null) {
-                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
-            }
-            blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
-            blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+            this.setCapturedBlockType(blockposition, iblockdata, i);
+            return true;
+        }
+        // CraftBukkit end
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) {
+            return false;
+        }
+
+        if (!this.isValidLocation(x, y, z)) {
+            return false;
+        }
+
+        if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+            return false;
+        }
+
+        Block block = iblockdata.getBlock();
+
+        // CraftBukkit start - capture blockstates
+        BlockState blockstate = null;
+        if (this.captureBlockStates) {
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, x, y, z, i);
             this.capturedBlockStates.add(blockstate);
+        }
+        // CraftBukkit end
+
+        IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
+
+        if (iblockdata1 == null) {
+            // CraftBukkit start - remove blockstate if failed
+            if (this.captureBlockStates) {
+                this.capturedBlockStates.remove(blockstate);
+            }
+            // CraftBukkit end
+            return false;
+        }
+        Block block1 = iblockdata1.getBlock();
+
+        if (block.p() != block1.p() || block.r() != block1.r()) {
+            this.methodProfiler.a("checkLight");
+            this.x(blockposition);
+            this.methodProfiler.b();
+        }
+
+        // CraftBukkit start
+        if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+            // Modularize client and physic updates
+            notifyAndUpdatePhysics(blockposition, chunk, block1, block, i);
+        }
+        // CraftBukkit end
+
+        return true;
+    }
+    // Titanium end
+
+    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            this.setCapturedBlockType(blockposition, iblockdata, i); // Titanium
             return true;
         }
         // CraftBukkit end
@@ -503,6 +576,12 @@ public abstract class World implements IBlockAccess {
         }
     }
 
+    // Titanium start
+    public boolean setTypeUpdateIfLoaded(BlockPosition blockPosition, IBlockData iblockdata) {
+        return this.setTypeAndDataIfLoaded(blockPosition, iblockdata, 3);
+    }
+    // Titanium end
+
     public boolean setTypeUpdate(BlockPosition blockposition, IBlockData iblockdata) {
         return this.setTypeAndData(blockposition, iblockdata, 3);
     }
@@ -683,7 +762,7 @@ public abstract class World implements IBlockAccess {
 
     public final int getLight(BlockPosition blockposition, boolean checkNeighbors) { return this.c(blockposition, checkNeighbors); } // Paper - OBFHELPER
     public int c(BlockPosition blockposition, boolean flag) {
-        if (blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000) {
+        if (isInWorldBounds(blockposition.getX(), blockposition.getZ())) { // Titanium
             if (flag && this.getType(blockposition).getBlock().s()) {
                 int i = this.c(blockposition.up(), false);
                 int j = this.c(blockposition.east(), false);
@@ -727,9 +806,12 @@ public abstract class World implements IBlockAccess {
     public BlockPosition getHighestBlockYAt(BlockPosition blockposition) {
         int i;
 
-        if (blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000) {
-            if (this.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4, true)) {
-                i = this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4).b(blockposition.getX() & 15, blockposition.getZ() & 15);
+        if (isInWorldBounds(blockposition.getX(), blockposition.getZ())) { // Titanium
+            // Titanium start
+            Chunk chunk = this.getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+            if (chunk != null) {
+                i = chunk.b(blockposition.getX() & 15, blockposition.getZ() & 15);
+            // Titanium end
             } else {
                 i = 0;
             }
@@ -741,7 +823,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public int b(int i, int j) {
-        if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
+        if (isInWorldBounds(i, j)) { // Titanium
             if (!this.isChunkLoaded(i >> 4, j >> 4, true)) {
                 return 0;
             } else {
@@ -1349,7 +1431,7 @@ public abstract class World implements IBlockAccess {
                         blockposition_mutableblockposition.c(k1, i2, l1);
                         IBlockData iblockdata;
 
-                        if (k1 >= -30000000 && k1 < 30000000 && l1 >= -30000000 && l1 < 30000000) {
+                        if (isInWorldBounds(k1, l1)) { // Titanium
                             iblockdata = this.getType(blockposition_mutableblockposition);
                         } else {
                             iblockdata = Blocks.BEDROCK.getBlockData();
@@ -3328,4 +3410,10 @@ public abstract class World implements IBlockAccess {
 
         return k >= -short0 && k <= short0 && l >= -short0 && l <= short0 && this.keepSpawnInMemory; // CraftBukkit - Added 'this.keepSpawnInMemory'
     }
+
+    // Titanium start
+    private static boolean isInWorldBounds(int x, int z) {
+        return x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000;
+    }
+    // Titanium end
 }
