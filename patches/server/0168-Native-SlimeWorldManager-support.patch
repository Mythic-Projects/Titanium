From 91fc7427b3ad96c5fcb1cc0bd26e07aaf3f4dcfc Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 21 Sep 2022 12:35:17 +0200
Subject: [PATCH] Native SlimeWorldManager support


diff --git a/build.gradle b/build.gradle
index 919f494a3..fcd0b9eb4 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,6 +30,10 @@ dependencies {
     implementation 'com.eatthepath:fast-uuid:0.2.0' // Nacho - Use jchambers' FAST UUID method
     implementation 'com.github.matejtymes:javafixes:1.3.7.1' // WindSpigot
     implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3' // Titanium - use caffeine instead of guava cache
+    // Titanium start - Native SWM support
+    implementation 'com.flowpowered:flow-nbt:2.0.0'
+    compileOnly 'com.mojang:datafixerupper:1.0.20'
+    // Titanium end
     // Titanium libraries end
 
     testImplementation 'junit:junit:4.13.2' // Titanium - Updated junit to 4.13.2
diff --git a/src/main/java/com/grinderwolf/swm/clsm/CLSMBridge.java b/src/main/java/com/grinderwolf/swm/clsm/CLSMBridge.java
new file mode 100644
index 000000000..7ec51497f
--- /dev/null
+++ b/src/main/java/com/grinderwolf/swm/clsm/CLSMBridge.java
@@ -0,0 +1,21 @@
+package com.grinderwolf.swm.clsm;
+
+public interface CLSMBridge {
+
+    default Object getChunk(Object world, int x, int z) {
+        return null;
+    }
+
+    default boolean saveChunk(Object world, Object chunkAccess) {
+        return false;
+    }
+
+    // Array containing the normal world, the nether and the end
+    Object[] getDefaultWorlds();
+
+    boolean isCustomWorld(Object world);
+
+    default boolean skipWorldAdd(Object world) {
+        return false; // If true, the world won't be added to the bukkit world list
+    }
+}
diff --git a/src/main/java/com/grinderwolf/swm/clsm/ClassModifier.java b/src/main/java/com/grinderwolf/swm/clsm/ClassModifier.java
new file mode 100644
index 000000000..266eed3e8
--- /dev/null
+++ b/src/main/java/com/grinderwolf/swm/clsm/ClassModifier.java
@@ -0,0 +1,52 @@
+package com.grinderwolf.swm.clsm;
+
+import com.mojang.datafixers.util.Either;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BooleanSupplier;
+
+/**
+ * This class serves as a bridge between the SWM and the Minecraft server.
+ *
+ * As plugins are loaded using a different ClassLoader, their code cannot
+ * be accessed from a NMS method. Because of this, it's impossible to make
+ * any calls to any method when rewriting the bytecode of a NMS class.
+ *
+ * As a workaround, this bridge simply calls a method of the {@link CLSMBridge} interface,
+ * which is implemented by the SWM plugin when loaded.
+ */
+public class ClassModifier {
+
+    // Required for Paper 1.13 as javassist can't compile this class
+    public static final BooleanSupplier BOOLEAN_SUPPLIER = () -> true;
+
+    private static CLSMBridge customLoader;
+
+    public static CompletableFuture getFutureChunk(Object world, int x, int z) {
+        if (customLoader == null) {
+            return null;
+        }
+
+        Object chunk = customLoader.getChunk(world, x, z);
+        return chunk != null ? CompletableFuture.supplyAsync(() -> Either.left(chunk)) : null;
+    }
+
+    public static boolean saveChunk(Object world, Object chunkAccess) {
+        return customLoader != null && customLoader.saveChunk(world, chunkAccess);
+    }
+
+    public static boolean isCustomWorld(Object world) {
+        return customLoader != null && customLoader.isCustomWorld(world);
+    }
+
+    public static boolean skipWorldAdd(Object world) {
+        return customLoader != null && customLoader.skipWorldAdd(world);
+    }
+
+    public static void setLoader(CLSMBridge loader) {
+        customLoader = loader;
+    }
+
+    public static Object[] getDefaultWorlds() {
+        return customLoader != null ? customLoader.getDefaultWorlds() : null;
+    }
+}
diff --git a/src/main/java/com/grinderwolf/swm/clsm/README.md b/src/main/java/com/grinderwolf/swm/clsm/README.md
new file mode 100644
index 000000000..bd1b78cc4
--- /dev/null
+++ b/src/main/java/com/grinderwolf/swm/clsm/README.md
@@ -0,0 +1,3 @@
+Original code came from this: [Original GitHub](https://github.com/Grinderwolf/Slime-World-Manager/tree/develop/slimeworldmanager-classmodifier/src/main/java/com/grinderwolf/swm/clsm)
+
+In unmodified version was added to Titanium. **All credits go to the original authors**
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 38a2b3343..9b4c32d39 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -242,6 +242,93 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
     }
 
     protected void a(String s, String s1, long i, WorldType worldtype, String s2) {
+        // Titanium start - Native SWM support
+        // https://github.com/Grinderwolf/Slime-World-Manager/blob/develop/slimeworldmanager-classmodifier/src/main/resources/v1_8_R3/MinecraftServer_loadWorlds.txt
+        WorldServer[] defaultWorlds = (WorldServer[]) com.grinderwolf.swm.clsm.ClassModifier.getDefaultWorlds();
+        if (defaultWorlds != null) {
+            LOGGER.info("[SWM-Native] Overriding default worlds");
+            this.a(s);
+            this.worldServer = new WorldServer[3];
+
+            for (int index = 0; index < 3; index++) {
+                if (index == 1 && !this.getAllowNether()) {
+                    continue;
+                }
+
+                if (index == 2 && !this.server.getAllowEnd()) {
+                    continue;
+                }
+
+                WorldServer world = defaultWorlds[index];
+                byte dimension = (byte) (index == 1 ? -1 : (index == 2 ? 1 : 0));
+
+                WorldSettings worldSettings = new WorldSettings(i, this.getGamemode(), this.getGenerateStructures(), this.isHardcore(), worldtype);
+                String worldTypeString = org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
+                String name;
+
+                if (dimension == 0) {
+                    name = s;
+                } else {
+                    name = s + "_" + worldTypeString;
+                }
+
+                if (world == null) {
+                    worldSettings.setGeneratorSettings(s2);
+                }
+
+                if (index == 0) {
+                    if (world == null) {
+                        IDataManager nbtStorage = new ServerNBTManager(this.server.getWorldContainer(), s1, true);
+
+                        WorldData worldData = nbtStorage.getWorldData();
+                        if (worldData == null) {
+                            worldData = new WorldData(worldSettings, s1);
+                        }
+                        worldData.checkName(s1);
+
+                        world = (WorldServer) new WorldServer(this, nbtStorage, worldData, dimension, this.methodProfiler, org.bukkit.World.Environment.getEnvironment(dimension), this.server.getGenerator(name)).b();
+                        world.a(worldSettings);
+                    } else {
+                        TitaniumConfig titaniumConfig = TitaniumConfig.get();
+                        if (titaniumConfig != null) {
+                            titaniumConfig.spigot.stats.disableSaving = true;
+                        }
+                    }
+
+                    this.server.scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(this, world.getScoreboard());
+                } else if (world == null) {
+                    IDataManager nbtStorage = new ServerNBTManager(this.server.getWorldContainer(), name, true);
+
+                    WorldData worldData = nbtStorage.getWorldData();
+                    if (worldData == null) {
+                        worldData = new WorldData(worldSettings, name);
+                    }
+                    worldData.checkName(name);
+
+                    world = (WorldServer) new SecondaryWorldServer(this, nbtStorage, dimension, this.worlds.get(0), this.methodProfiler, worldData, org.bukkit.World.Environment.getEnvironment(dimension), this.server.getGenerator(name)).b();
+                }
+
+                this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
+
+                if (defaultWorlds[index] == null) {
+                    world.addIWorldAccess(new WorldManager(this, world));
+                }
+
+                if (!this.T()) {
+                    world.getWorldData().setGameType(this.getGamemode());
+                }
+
+                this.worlds.add(world);
+                this.getPlayerList().setPlayerFileData(this.worlds.toArray(new WorldServer[0]));
+            }
+
+            this.a(this.getDifficulty());
+            this.k();
+
+            return;
+        }
+        // Titanium end
+        
         this.a(s);
         this.b("menu.loadingLevel");
         this.worldServer = new WorldServer[3];
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 94c16996d..bdf0ae2fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1259,6 +1259,12 @@ public final class CraftServer implements Server {
     }
 
     public void addWorld(World world) {
+        // Titanium start - Native SWM support
+        // https://github.com/Grinderwolf/Slime-World-Manager/blob/develop/slimeworldmanager-classmodifier/src/main/resources/v1_8_R3/CraftServer_addWorld.txt
+        if (com.grinderwolf.swm.clsm.ClassModifier.skipWorldAdd(((CraftWorld) world).getHandle())) {
+            return;
+        }
+        // Titanium end
         // Check if a World already exists with the UID.
         if (getWorld(world.getUID()) != null) {
             System.out.println("World " + world.getName() + " is a duplicate of another world and has been prevented from loading. Please delete the uid.dat file from " + world.getName() + "'s world directory if you want to be able to load the duplicate world.");
-- 
2.36.0.windows.1

