From 0f4780228b3ae761a659c8de720708bbcba554d8 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Sat, 16 Jul 2022 21:37:10 -0500
Subject: [PATCH] Implement [Purpur-0291] Remove Mojang Profiler by
 BillyGalbreath


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 58d8c9d78..155c61f44 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -279,7 +279,7 @@ public class Chunk {
     }
 
     private void h(boolean flag) {
-        this.world.methodProfiler.a("recheckGaps");
+        //this.world.methodProfiler.a("recheckGaps"); // Purpur
         if (this.world.areChunksLoaded(new BlockPosition(this.locX * 16 + 8, 0, this.locZ * 16 + 8), 16)) {
             for (int i = 0; i < 16; ++i) {
                 for (int j = 0; j < 16; ++j) {
@@ -306,7 +306,7 @@ public class Chunk {
                         }
 
                         if (flag) {
-                            this.world.methodProfiler.b();
+                            //this.world.methodProfiler.b(); // Purpur
                             return;
                         }
                     }
@@ -316,7 +316,7 @@ public class Chunk {
             this.k = false;
         }
 
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     private void c(int i, int j, int k) {
diff --git a/src/main/java/net/minecraft/server/CommandDebug.java b/src/main/java/net/minecraft/server/CommandDebug.java
index 916298c36..ae716d306 100644
--- a/src/main/java/net/minecraft/server/CommandDebug.java
+++ b/src/main/java/net/minecraft/server/CommandDebug.java
@@ -100,6 +100,7 @@ public class CommandDebug extends CommandAbstract {
     }
 
     private void a(int i, String s, StringBuilder stringbuilder) {
+        if (true) return; // Purpur
         List list = MinecraftServer.getServer().methodProfiler.b(s);
 
         if (list != null && list.size() >= 3) {
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index c1b6e3cd0..6558679ef 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -24,7 +24,7 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
         this.a((ICommand) (new CommandMe()));
         this.a((ICommand) (new CommandSeed()));
         this.a((ICommand) (new CommandHelp()));
-        this.a((ICommand) (new CommandDebug()));
+        //this.a((ICommand) (new CommandDebug())); // Purpur
         this.a((ICommand) (new CommandTell()));
         this.a((ICommand) (new CommandSay()));
         this.a((ICommand) (new CommandSpawnpoint()));
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index cada26e02..38383d57e 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -299,7 +299,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void K() {
-        this.world.methodProfiler.a("entityBaseTick");
+        //this.world.methodProfiler.a("entityBaseTick"); // Purpur
         if (this.vehicle != null && this.vehicle.dead) {
             this.vehicle = null;
         }
@@ -311,7 +311,7 @@ public abstract class Entity implements ICommandListener {
         this.lastPitch = this.pitch;
         this.lastYaw = this.yaw;
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
-            this.world.methodProfiler.a("portal");
+            //this.world.methodProfiler.a("portal"); // Purpur
             MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
             int i = this.L();
 
@@ -347,7 +347,7 @@ public abstract class Entity implements ICommandListener {
                 --this.portalCooldown;
             }
 
-            this.world.methodProfiler.b();
+            //this.world.methodProfiler.b(); // Purpur
         }
 
         this.Y();
@@ -383,7 +383,7 @@ public abstract class Entity implements ICommandListener {
         }
 
         this.justCreated = false;
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     public int L() {
@@ -515,7 +515,7 @@ public abstract class Entity implements ICommandListener {
                 return;
             }
             // CraftBukkit end
-            this.world.methodProfiler.a("move");
+            //this.world.methodProfiler.a("move"); // Purpur
             double d3 = this.locX;
             double d4 = this.locY;
             double d5 = this.locZ;
@@ -734,8 +734,8 @@ public abstract class Entity implements ICommandListener {
                 }
             }
 
-            this.world.methodProfiler.b();
-            this.world.methodProfiler.a("rest");
+            //this.world.methodProfiler.b(); // Purpur
+            //this.world.methodProfiler.a("rest"); // Purpur
             this.recalcPosition();
             this.positionChanged = d6 != d0 || d8 != d2;
             this.E = d7 != d1;
@@ -864,7 +864,7 @@ public abstract class Entity implements ICommandListener {
                 this.fireTicks = -this.maxFireTicks;
             }
 
-            this.world.methodProfiler.b();
+            //this.world.methodProfiler.b(); // Purpur
         }
     }
 
@@ -2038,7 +2038,7 @@ public abstract class Entity implements ICommandListener {
 
     public void c(int i) {
         if (!this.world.isClientSide && !this.dead) {
-            this.world.methodProfiler.a("changeDimension");
+            //this.world.methodProfiler.a("changeDimension"); // Purpur
             MinecraftServer minecraftserver = MinecraftServer.getServer();
             // CraftBukkit start - Move logic into new function "teleportToLocation"
             // int j = this.dimension;
@@ -2087,7 +2087,7 @@ public abstract class Entity implements ICommandListener {
 
             this.world.kill(this);
             this.dead = false;
-            this.world.methodProfiler.a("reposition");
+            //this.world.methodProfiler.a("reposition"); // Purpur
             // CraftBukkit start - Ensure chunks are loaded in case TravelAgent is not used which would initially cause chunks to load during find/create
             // minecraftserver.getPlayerList().changeWorld(this, j, worldserver, worldserver1);
             boolean before = worldserver1.chunkProviderServer.forceChunkLoad;
@@ -2095,7 +2095,7 @@ public abstract class Entity implements ICommandListener {
             worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
             worldserver1.chunkProviderServer.forceChunkLoad = before;
             // CraftBukkit end
-            this.world.methodProfiler.c("reloading");
+            //this.world.methodProfiler.c("reloading"); // Purpur
             Entity entity = EntityTypes.createEntityByName(EntityTypes.b(this), worldserver1);
 
             if (entity != null) {
@@ -2120,10 +2120,10 @@ public abstract class Entity implements ICommandListener {
             }
 
             this.dead = true;
-            this.world.methodProfiler.b();
+            //this.world.methodProfiler.b(); // Purpur
             worldserver.j();
             worldserver1.j();
-            this.world.methodProfiler.b();
+            //this.world.methodProfiler.b(); // Purpur
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 027f700ec..920790d12 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -148,13 +148,13 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void K() {
         super.K();
-        this.world.methodProfiler.a("mobBaseTick");
+        //this.world.methodProfiler.a("mobBaseTick"); // Purpur
         if (this.isAlive() && this.random.nextInt(1000) < this.a_++) {
             this.a_ = -this.w();
             this.x();
         }
 
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     protected int getExpValue(EntityHuman entityhuman) {
@@ -337,7 +337,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void m() {
         super.m();
-        this.world.methodProfiler.a("looting");
+        //this.world.methodProfiler.a("looting"); // Purpur
         if (!this.world.isClientSide && this.bY() && !this.aP && this.world.getGameRules().getBoolean("mobGriefing")) {
             List list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
@@ -351,7 +351,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
         }
 
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     protected void a(EntityItem entityitem) {
@@ -455,9 +455,9 @@ public abstract class EntityInsentient extends EntityLiving {
 
     protected final void doTick() {
         ++this.ticksFarFromPlayer;
-        this.world.methodProfiler.a("checkDespawn");
+        //this.world.methodProfiler.a("checkDespawn"); // Purpur
         this.D();
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
         // Spigot Start
         if ( this.fromMobSpawner )
         {
@@ -470,30 +470,30 @@ public abstract class EntityInsentient extends EntityLiving {
             return;
         }
         // Spigot End
-        this.world.methodProfiler.a("sensing");
+        //this.world.methodProfiler.a("sensing"); // Purpur
         this.bk.a();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("targetSelector");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("targetSelector"); // Purpur
         this.targetSelector.a();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("goalSelector");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("goalSelector"); // Purpur
         this.goalSelector.a();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("navigation");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("navigation"); // Purpur
         this.navigation.k();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("mob tick");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("mob tick"); // Purpur
         this.E();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("controls");
-        this.world.methodProfiler.a("move");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("controls"); // Purpur
+        //this.world.methodProfiler.a("move"); // Purpur
         this.moveController.c();
-        this.world.methodProfiler.c("look");
+        //this.world.methodProfiler.c("look"); // Purpur
         this.lookController.a();
-        this.world.methodProfiler.c("jump");
+        //this.world.methodProfiler.c("jump"); // Purpur
         this.g.b();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     protected void E() {}
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 75e8a29c3..237e97526 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -173,7 +173,7 @@ public abstract class EntityLiving extends Entity {
     public void K() {
         this.ay = this.az;
         super.K();
-        this.world.methodProfiler.a("livingEntityBaseTick");
+        //this.world.methodProfiler.a("livingEntityBaseTick"); // Purpur
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
@@ -266,7 +266,7 @@ public abstract class EntityLiving extends Entity {
         this.aL = this.aK;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     // CraftBukkit start
@@ -1586,10 +1586,10 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.aS += (f3 - this.aS) * 0.3F;
-        this.world.methodProfiler.a("headTurn");
+        //this.world.methodProfiler.a("headTurn"); // Purpur
         f2 = this.h(f1, f2);
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("rangeChecks");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("rangeChecks"); // Purpur
 
         while (this.yaw - this.lastYaw < -180.0F) {
             this.lastYaw -= 360.0F;
@@ -1623,7 +1623,7 @@ public abstract class EntityLiving extends Entity {
             this.aL += 360.0F;
         }
 
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
         this.aT += f2;
     }
 
@@ -1688,20 +1688,20 @@ public abstract class EntityLiving extends Entity {
             this.motZ = 0.0D;
         }
 
-        this.world.methodProfiler.a("ai");
+        //this.world.methodProfiler.a("ai"); // Purpur
         if (this.bD()) {
             this.aY = false;
             this.aZ = 0.0F;
             this.ba = 0.0F;
             this.bb = 0.0F;
         } else if (this.bM()) {
-            this.world.methodProfiler.a("newAi");
+            //this.world.methodProfiler.a("newAi"); // Purpur
             this.doTick();
-            this.world.methodProfiler.b();
+            //this.world.methodProfiler.b(); // Purpur
         }
 
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("jump");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("jump"); // Purpur
         if (this.aY) {
             if (this.V()) {
                 this.bG();
@@ -1715,19 +1715,19 @@ public abstract class EntityLiving extends Entity {
             this.bn = 0;
         }
 
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("travel");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("travel"); // Purpur
         this.aZ *= 0.98F;
         this.ba *= 0.98F;
         this.bb *= 0.9F;
         this.g(this.aZ, this.ba);
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("push");
+        //this.world.methodProfiler.b(); // Purpur
+        //this.world.methodProfiler.a("push"); // Purpur
         if (!this.world.isClientSide) {
             this.bL();
         }
 
-        this.world.methodProfiler.b();
+        //this.world.methodProfiler.b(); // Purpur
     }
 
     protected void doTick() {}
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 0446e2be5..a3392c83d 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -207,7 +207,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         int i;
 
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
-            this.world.methodProfiler.a("portal");
+            //this.world.methodProfiler.a("portal"); // Purpur
             MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
 
             i = this.L();
@@ -243,7 +243,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 --this.portalCooldown;
             }
 
-            this.world.methodProfiler.b();
+            //this.world.methodProfiler.b(); // Purpur
         }
 
         if (this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntitySenses.java b/src/main/java/net/minecraft/server/EntitySenses.java
index 141a1ef8d..a2bfb5b50 100644
--- a/src/main/java/net/minecraft/server/EntitySenses.java
+++ b/src/main/java/net/minecraft/server/EntitySenses.java
@@ -24,10 +24,10 @@ public class EntitySenses {
         } else if (this.c.contains(entity)) {
             return false;
         } else {
-            this.a.world.methodProfiler.a("canSee");
+            //this.a.world.methodProfiler.a("canSee"); // Purpur
             boolean flag = this.a.hasLineOfSight(entity);
 
-            this.a.world.methodProfiler.b();
+            //this.a.world.methodProfiler.b(); // Purpur
             if (flag) {
                 this.b.add(entity);
             } else {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1e778c984..5446d9c91 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -659,13 +659,13 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                     lastTick = curTime;
 
                     this.nextTickTime += 50L;
-                    this.methodProfiler.a("tick"); // push
+                    //this.methodProfiler.a("tick"); // push // Purpur
                     this.A(this::haveTime);
-                    this.methodProfiler.c("nextTickWait"); // popPush
+                    //this.methodProfiler.c("nextTickWait"); // popPush // Purpur
                     this.mayHaveDelayedTasks = true;
                     this.delayedTasksMaxNextTickTime = Math.max(getMillis() + 50L, this.nextTickTime);
                     this.waitUntilNextTick();
-                    this.methodProfiler.b(); // pop
+                    //this.methodProfiler.b(); // pop // Purpur
                     this.isReady = true;
                 }
                 // Spigot end
@@ -842,13 +842,13 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         // WindSpigot end
 
         ++this.ticks;
-        if (this.T) {
+        if (false && this.T) {
             this.T = false;
             this.methodProfiler.a = true;
             this.methodProfiler.a();
         }
 
-        this.methodProfiler.a("root");
+        //this.methodProfiler.a("root"); // Purpur
         this.B();
         if (i - this.X >= 5000000000L) {
             this.X = i;
@@ -866,7 +866,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
             // SpigotTimings.worldSaveTimer.startTiming(); // Spigot // Purpur
-            this.methodProfiler.a("save");
+            // this.methodProfiler.a("save"); // Purpur
             this.v.savePlayers();
             // Spigot Start
             // We replace this with saving each individual world as this.saveChunks(...) is broken,
@@ -879,7 +879,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
             server.playerCommandState = false;
             // this.saveChunks(true);
             // Spigot End
-            this.methodProfiler.b();
+            // this.methodProfiler.b(); // Purpur
             // SpigotTimings.worldSaveTimer.stopTiming(); // Spigot // Purpur
         }
 
@@ -892,10 +892,10 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         // Paper end
         // WindSpigot end
 
-        this.methodProfiler.a("tallying");
+        //this.methodProfiler.a("tallying"); // Purpur
         this.h[this.ticks % 100] = System.nanoTime() - i;
-        this.methodProfiler.b();
-        this.methodProfiler.a("snooper");
+        //this.methodProfiler.b(); // Purpur
+        //this.methodProfiler.a("snooper"); // Purpur
         if (getSnooperEnabled() && !this.n.d() && this.ticks > 100) {  // Spigot
             this.n.a();
         }
@@ -904,15 +904,15 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
             this.n.b();
         }
 
-        this.methodProfiler.b();
-        this.methodProfiler.b();
+        //this.methodProfiler.b(); // Purpur
+        //this.methodProfiler.b(); // Purpur
         org.spigotmc.WatchdogThread.tick(); // Spigot
         //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot // Purpur
     }
 
     public void B() {
         //SpigotTimings.minecraftSchedulerTimer.startTiming(); // Spigot // Purpur
-        this.methodProfiler.a("jobs");
+        //this.methodProfiler.a("jobs"); // Purpur
         Queue queue = this.j;
 
         // Spigot start
@@ -924,7 +924,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         // Spigot end
         //SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot // Purpur
 
-        this.methodProfiler.c("levels");
+        //this.methodProfiler.c("levels"); // Purpur
 
         //SpigotTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Purpur
         // CraftBukkit start
@@ -980,7 +980,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 WorldServer worldserver = this.worlds.get(i);
                 worldserver.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // PandaSpigot
 
-                this.methodProfiler.a(worldserver.getWorldData().getName());
+                //this.methodProfiler.a(worldserver.getWorldData().getName()); // Purpur
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
                     this.methodProfiler.a("timeSync");
@@ -989,7 +989,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 }
                 // CraftBukkit end */
 
-                this.methodProfiler.a("tick");
+                //this.methodProfiler.a("tick"); // Purpur
 
                 CrashReport crashreport;
 
@@ -1035,8 +1035,8 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                     worldserver.getTracker().updatePlayers();
                 } else {
                 // WindSpigot end
-                this.methodProfiler.b();
-                this.methodProfiler.a("tracker");
+                //this.methodProfiler.b(); // Purpur
+                //this.methodProfiler.a("tracker"); // Purpur
                 //worldserver.timings.tracker.startTiming(); // Spigot // Purpur
                 // PandaSpigot start - controlled flush for entity tracker packets
                 List<NetworkManager> disabledFlushes = new ArrayList<>(worldserver.players.size());
@@ -1059,9 +1059,9 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
                 }
                 // PandaSpigot end
                 //worldserver.timings.tracker.stopTiming(); // Spigot // Purpur
-                this.methodProfiler.b();
+                //this.methodProfiler.b(); // Purpur
                 } // WindSpigot
-                this.methodProfiler.b();
+                //this.methodProfiler.b(); // Purpur
                 worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
             // } // CraftBukkit
 
@@ -1074,15 +1074,15 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         }
         // WindSpigot end
 
-        this.methodProfiler.c("connection");
+        //this.methodProfiler.c("connection"); // Purpur
         //SpigotTimings.connectionTimer.startTiming(); // Spigot // Purpur
         this.aq().c();
         //SpigotTimings.connectionTimer.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("players");
+        //this.methodProfiler.c("players"); // Purpur
         //SpigotTimings.playerListTimer.startTiming(); // Spigot // Purpur
         this.v.tick();
         //SpigotTimings.playerListTimer.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("tickables");
+        //this.methodProfiler.c("tickables"); // Purpur
 
         //SpigotTimings.tickablesTimer.startTiming(); // Spigot // Purpur
         for (i = 0; i < this.p.size(); ++i) {
@@ -1090,7 +1090,7 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
         }
         //SpigotTimings.tickablesTimer.stopTiming(); // Spigot // Purpur
 
-        this.methodProfiler.b();
+        //this.methodProfiler.b(); // Purpur
     }
 
     public boolean getAllowNether() {
@@ -1296,7 +1296,10 @@ public abstract class MinecraftServer extends ReentrantIAsyncHandler<TasksPerTic
     public CrashReport b(CrashReport crashreport) {
         crashreport.g().a("Profiler Position", new Callable() {
             public String a() throws Exception {
-                return MinecraftServer.this.methodProfiler.a ? MinecraftServer.this.methodProfiler.c() : "N/A (disabled)";
+                // Purpur start - Remove profiler
+                //return MinecraftServer.this.methodProfiler.a ? MinecraftServer.this.methodProfiler.c() : "N/A (disabled)";
+                return "N/A (disabled)";
+                // Purpur end
             }
 
             public Object call() throws Exception {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 8ebe58495..ea6104338 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -43,13 +43,13 @@ public abstract class NavigationAbstract {
         } else {
             float f = this.i();
 
-            this.c.methodProfiler.a("pathfind");
+            //this.c.methodProfiler.a("pathfind"); // Purpur
             BlockPosition blockposition1 = new BlockPosition(this.b);
             int i = (int) (f + 8.0F);
             ChunkCache chunkcache = new ChunkCache(this.c, blockposition1.a(-i, -i, -i), blockposition1.a(i, i, i), 0);
             PathEntity pathentity = this.j.a((IBlockAccess) chunkcache, (Entity) this.b, blockposition, f);
 
-            this.c.methodProfiler.b();
+            //this.c.methodProfiler.b(); // Purpur
             return pathentity;
         }
     }
@@ -70,13 +70,13 @@ public abstract class NavigationAbstract {
         } else {
             float f = this.i();
 
-            this.c.methodProfiler.a("pathfind");
+            //this.c.methodProfiler.a("pathfind"); // Purpur
             BlockPosition blockposition = (new BlockPosition(this.b)).up();
             int i = (int) (f + 16.0F);
             ChunkCache chunkcache = new ChunkCache(this.c, blockposition.a(-i, -i, -i), blockposition.a(i, i, i), 0);
             PathEntity pathentity = this.j.a((IBlockAccess) chunkcache, (Entity) this.b, entity, f);
 
-            this.c.methodProfiler.b();
+            //this.c.methodProfiler.b(); // Purpur
             return pathentity;
         }
     }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index b03ba8575..d2066fe64 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -45,7 +45,7 @@ public class PathfinderGoalSelector {
     }
 
     public void a() {
-        this.d.a("goalSetup");
+        //this.d.a("goalSetup"); // Purpur
         Iterator iterator;
         PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem;
 
@@ -82,8 +82,8 @@ public class PathfinderGoalSelector {
             }
         }
 
-        this.d.b();
-        this.d.a("goalTick");
+        //this.d.b(); // Purpur
+        //this.d.a("goalTick"); // Purpur
         iterator = this.c.iterator();
 
         while (iterator.hasNext()) {
@@ -91,7 +91,7 @@ public class PathfinderGoalSelector {
             pathfindergoalselector_pathfindergoalselectoritem.a.e();
         }
 
-        this.d.b();
+        //this.d.b(); // Purpur
     }
 
     private boolean a(PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index c74ca9b79..1128ccfda 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -131,7 +131,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public void c() {
         this.h = false;
         ++this.e;
-        this.minecraftServer.methodProfiler.a("keepAlive");
+        //this.minecraftServer.methodProfiler.a("keepAlive"); // Purpur
         if ((long) this.e - this.k > 40L) {
             this.k = (long) this.e;
             this.j = this.d();
@@ -139,7 +139,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             this.sendPacket(new PacketPlayOutKeepAlive(this.i));
         }
 
-        this.minecraftServer.methodProfiler.b();
+        //this.minecraftServer.methodProfiler.b(); // Purpur
         // CraftBukkit start
         for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
         /* Use thread-safe field access instead
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index c255ea470..b60791ebf 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -790,7 +790,7 @@ public abstract class PlayerList {
 
         // worldserver.methodProfiler.b();
         if (i != 1) {
-            worldserver.methodProfiler.a("placing");
+            //worldserver.methodProfiler.a("placing"); // Purpur
             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
             /*
@@ -863,9 +863,9 @@ public abstract class PlayerList {
         }
         */
 
-        worldserver.methodProfiler.b();
+        //worldserver.methodProfiler.b(); // Purpur
         if (i != 1) {
-            worldserver.methodProfiler.a("placing");
+            //worldserver.methodProfiler.a("placing"); // Purpur
             /*
             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
@@ -885,7 +885,7 @@ public abstract class PlayerList {
                 worldserver1.entityJoinedWorld(entity, false);
             }
 
-            worldserver.methodProfiler.b();
+            //worldserver.methodProfiler.b(); // Purpur
         }
 
         entity.spawnIn(worldserver1);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index aabf2396a..ecdeb212e 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -453,9 +453,9 @@ public abstract class World implements IBlockAccess {
                 Block block1 = iblockdata1.getBlock();
 
                 if (block.p() != block1.p() || block.r() != block1.r()) {
-                    this.methodProfiler.a("checkLight");
+                    //this.methodProfiler.a("checkLight"); // Purpur
                     this.x(blockposition);
-                    this.methodProfiler.b();
+                    //this.methodProfiler.b(); // Purpur
                 }
 
                 /*
@@ -1465,8 +1465,8 @@ public abstract class World implements IBlockAccess {
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
 
     public void tickEntities() {
-        this.methodProfiler.a("entities");
-        this.methodProfiler.a("global");
+        //this.methodProfiler.a("entities"); // Purpur
+        //this.methodProfiler.a("global"); // Purpur
 
         int i;
         Entity entity;
@@ -1501,9 +1501,9 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        this.methodProfiler.c("remove");
+        //this.methodProfiler.c("remove"); // Purpur
         //timings.entityRemoval.startTiming(); // Spigot // Purpur
-        this.entityList.removeAll(this.g);
+        //this.entityList.removeAll(this.g); // Purpur
 
         int j;
         int k;
@@ -1524,7 +1524,7 @@ public abstract class World implements IBlockAccess {
 
         this.g.clear();
         //timings.entityRemoval.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("regular");
+        //this.methodProfiler.c("regular"); // Purpur
 
         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
         //timings.entityTick.startTiming(); // Spigot // Purpur
@@ -1548,7 +1548,7 @@ public abstract class World implements IBlockAccess {
                 entity.vehicle = null;
             }
 
-            this.methodProfiler.a("tick");
+            //this.methodProfiler.a("tick"); // Purpur
             if (!entity.dead) {
                 try {
                     //entity.tickTimer.startTiming(); // Spigot // Purpur
@@ -1567,8 +1567,8 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            this.methodProfiler.b();
-            this.methodProfiler.a("remove");
+            //this.methodProfiler.b(); // Purpur
+            //this.methodProfiler.a("remove"); // Purpur
             if (entity.dead) {
                 j = entity.ae;
                 k = entity.ag;
@@ -1582,12 +1582,12 @@ public abstract class World implements IBlockAccess {
                 this.b(entity);
             }
 
-            this.methodProfiler.b();
+            //this.methodProfiler.b(); // Purpur
         }
         guardEntityList = false; // Spigot
 
         //timings.entityTick.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("blockEntities");
+        //this.methodProfiler.c("blockEntities"); // Purpur
         //timings.tileEntityTick.startTiming(); // Spigot // Purpur
         this.M = true;
         // CraftBukkit start - From below, clean up tile entities before ticking them
@@ -1660,7 +1660,7 @@ public abstract class World implements IBlockAccess {
         }
         // CraftBukkit end */
 
-        this.methodProfiler.c("pendingBlockEntities");
+        //this.methodProfiler.c("pendingBlockEntities"); // Purpur
         if (!this.b.isEmpty()) {
             for (int l = 0; l < this.b.size(); ++l) {
                 TileEntity tileentity1 = (TileEntity) this.b.get(l);
@@ -1756,7 +1756,7 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            this.methodProfiler.a("chunkCheck");
+            //this.methodProfiler.a("chunkCheck"); // Purpur
             if (Double.isNaN(entity.locX) || Double.isInfinite(entity.locX)) {
                 entity.locX = entity.P;
             }
@@ -1795,7 +1795,7 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            this.methodProfiler.b();
+            //this.methodProfiler.b(); // Purpur
             if (flag && entity.ad && entity.passenger != null) {
                 if (!entity.passenger.dead && entity.passenger.vehicle == entity) {
                     this.g(entity.passenger);
@@ -2298,7 +2298,7 @@ public abstract class World implements IBlockAccess {
 
     protected void D() {
         // this.chunkTickList.clear(); // CraftBukkit - removed
-        this.methodProfiler.a("buildList");
+        //this.methodProfiler.a("buildList"); // Purpur
 
         int i;
         EntityHuman entityhuman;
@@ -2344,12 +2344,12 @@ public abstract class World implements IBlockAccess {
             // Spigot End
         }
 
-        this.methodProfiler.b();
+        //this.methodProfiler.b(); // Purpur
         if (this.L > 0) {
             --this.L;
         }
 
-        this.methodProfiler.a("playerCheckLight");
+        //this.methodProfiler.a("playerCheckLight"); // Purpur
         if (spigotConfigTitanium.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             i = this.random.nextInt(this.players.size());
             entityhuman = (EntityHuman) this.players.get(i);
@@ -2359,13 +2359,13 @@ public abstract class World implements IBlockAccess {
             this.x(new BlockPosition(j, k, l));
         }
 
-        this.methodProfiler.b();
+        //this.methodProfiler.b(); // Purpur
     }
 
     protected abstract int q();
 
     protected void a(int i, int j, Chunk chunk) {
-        this.methodProfiler.c("moodSound");
+        //this.methodProfiler.c("moodSound"); // Purpur
         if (!this.paperConfigTitanium.disableMoodSounds && this.L == 0 && !this.isClientSide) { // PaperSpigot - Disable mood sounds
             this.m = this.m * 3 + 1013904223;
             int k = this.m >> 2;
@@ -2387,7 +2387,7 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        this.methodProfiler.c("checkLight");
+        //this.methodProfiler.c("checkLight"); // Purpur
         chunk.m();
     }
 
@@ -2526,7 +2526,7 @@ public abstract class World implements IBlockAccess {
             int i = 0;
             int j = 0;
 
-            this.methodProfiler.a("getBrightness");
+            //this.methodProfiler.a("getBrightness"); // Purpur
             int k = this.b(enumskyblock, blockposition);
             int l = this.a(blockposition, enumskyblock);
             int i1 = blockposition.getX();
@@ -2588,8 +2588,8 @@ public abstract class World implements IBlockAccess {
                 i = 0;
             }
 
-            this.methodProfiler.b();
-            this.methodProfiler.a("checkedPosition < toCheckCount");
+            //this.methodProfiler.b(); // Purpur
+            //this.methodProfiler.a("checkedPosition < toCheckCount"); // Purpur
 
             while (i < j) {
                 l1 = this.H[i++];
@@ -2647,7 +2647,7 @@ public abstract class World implements IBlockAccess {
                 }
             }
             // PaperSpigot end
-            this.methodProfiler.b();
+            //this.methodProfiler.b(); // Purpur
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 8039eba16..70d303a64 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -238,7 +238,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
         // CraftBukkit end
         //timings.doChunkUnload.startTiming(); // Spigot // Purpur
-        this.methodProfiler.c("chunkSource");
+        //this.methodProfiler.c("chunkSource"); // Purpur
 
         // Only unload if chunkProvider isn't null
         if (this.chunkProvider != null) {
@@ -257,29 +257,29 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
 
         //timings.doChunkUnload.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("tickPending");
+        //this.methodProfiler.c("tickPending"); // Purpur
         //timings.scheduledBlocks.startTiming(); // Spigot // Purpur
         this.a(false);
         //timings.scheduledBlocks.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("tickBlocks");
+        //this.methodProfiler.c("tickBlocks"); // Purpur
         //timings.chunkTicks.startTiming(); // Spigot // Purpur
         this.h();
         //timings.chunkTicks.stopTiming(); // Spigot // Purpur
         SpigotWorldConfig.getAntiXray().flushUpdates(this); // PaperSpigot
-        this.methodProfiler.c("chunkMap");
+        //this.methodProfiler.c("chunkMap"); // Purpur
         //timings.doChunkMap.startTiming(); // Spigot // Purpur
         this.manager.flush();
         //timings.doChunkMap.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("village");
+        //this.methodProfiler.c("village"); // Purpur
         //timings.doVillages.startTiming(); // Spigot // Purpur
         this.villages.tick();
         this.siegeManager.a();
         //timings.doVillages.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.c("portalForcer");
+        //this.methodProfiler.c("portalForcer"); // Purpur
         //timings.doPortalForcer.startTiming(); // Spigot // Purpur
         this.Q.a(this.getTime());
         //timings.doPortalForcer.stopTiming(); // Spigot // Purpur
-        this.methodProfiler.b();
+        //this.methodProfiler.b(); // Purpur
         //timings.doSounds.startTiming(); // Spigot // Purpur
         this.ak();
 
@@ -425,14 +425,14 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 int k = chunkX * 16;
                 int l = chunkZ * 16;
 
-                this.methodProfiler.a("getChunk");
+                //this.methodProfiler.a("getChunk"); // Purpur
                 Chunk chunk = this.getChunkAt(chunkX, chunkZ);
                 // CraftBukkit end
 
                 this.a(k, l, chunk);
-                this.methodProfiler.c("tickChunk");
+                //this.methodProfiler.c("tickChunk"); // Purpur
                 chunk.b(false);
-                this.methodProfiler.c("thunder");
+                //this.methodProfiler.c("thunder"); // Purpur
                 int i1;
                 BlockPosition blockposition;
 
@@ -445,7 +445,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                this.methodProfiler.c("iceandsnow");
+                //this.methodProfiler.c("iceandsnow"); // Purpur
                 if (!this.paperConfigTitanium.disableIceAndSnow && this.random.nextInt(16) == 0) { // PaperSpigot - Disable ice and snow
                     this.m = this.m * 3 + 1013904223;
                     i1 = this.m >> 2;
@@ -483,7 +483,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                this.methodProfiler.c("tickBlocks");
+                //this.methodProfiler.c("tickBlocks"); // Purpur
                 //timings.chunkTicksBlocks.startTiming(); // Spigot // Purpur
                 i1 = titaniumConfig.disabledGamerules.randomTickSpeed ? 3 : this.getGameRules().c("randomTickSpeed");
                 if (i1 > 0) {
@@ -643,7 +643,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 // PaperSpigot end
 
-                this.methodProfiler.a("cleaning");
+                //this.methodProfiler.a("cleaning"); // Purpur
 
                 //timings.scheduledBlocksCleanup.startTiming(); // Spigot // Purpur
                 NextTickListEntry nextticklistentry;
@@ -677,8 +677,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 // PaperSpigot end
 
-                this.methodProfiler.b();
-                this.methodProfiler.a("ticking");
+                //this.methodProfiler.b(); // Purpur
+                //this.methodProfiler.a("ticking"); // Purpur
                 //timings.scheduledBlocksTicking.startTiming(); // Spigot // Purpur
                 Iterator iterator = this.V.iterator();
 
@@ -710,7 +710,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 //timings.scheduledBlocksTicking.stopTiming(); // Spigot // Purpur
 
-                this.methodProfiler.b();
+                //this.methodProfiler.b(); // Purpur
                 this.V.clear();
                 return !this.M.isEmpty();
             }
-- 
2.36.0.windows.1

