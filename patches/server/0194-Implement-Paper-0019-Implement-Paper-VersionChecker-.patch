From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Fri, 4 Nov 2022 16:56:52 +0100
Subject: [PATCH] Implement [Paper-0019] Implement Paper VersionChecker by Zach
 Brown


diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..2bba719159b16d4cc212d81a38f74ab2bdb17ef8
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -0,0 +1,119 @@
+package com.destroystokyo.paper;
+
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.common.base.Charsets;
+import com.google.common.io.Resources;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import org.bukkit.ChatColor;
+import org.jetbrains.annotations.NotNull;
+
+public class PaperVersionFetcher implements VersionFetcher {
+
+    @Override
+    public long getCacheTime() {
+        return 720000;
+    }
+
+    @NotNull
+    @Override
+    public String getVersionMessage(@NotNull String serverVersion) {
+        String[] parts = serverVersion.substring("git-Titanium-".length()).split("[-\\s]");
+        return getUpdateStatusMessage("TitaniumMC/Titanium", parts[0], parts[1], parts[2]);
+    }
+
+    private static String getUpdateStatusMessage(@NotNull String repo, @NotNull String source, @NotNull String branch, @NotNull String versionInfo) {
+        int distance;
+        try {
+            // Titanium start
+            if (!source.equalsIgnoreCase("JENKINS")) {
+                throw new NumberFormatException();
+            }
+            // Titanium end
+            int jenkinsBuild = Integer.parseInt(versionInfo);
+            distance = fetchDistanceFromSiteApi(branch, jenkinsBuild);
+        } catch (NumberFormatException ignored) {
+            versionInfo = versionInfo.replace("\"", "");
+            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+        }
+
+        switch (distance) {
+            case 0:
+                return ChatColor.translateAlternateColorCodes('&',"&8>> &7You are running the &alatest &7version!");
+            case -1:
+                return ChatColor.translateAlternateColorCodes('&',"&8>> &7Latest version &ccouldn't be &7obtained!");
+            case -2:
+                return ChatColor.translateAlternateColorCodes('&',"&8>> &7Unknown version &e" + versionInfo + " &7detected!");
+            default:
+                // Titanium start
+                String downloadPage = "https://jenkins.titanvale.net/job/Titanium/job/" + branch;
+                return ChatColor.translateAlternateColorCodes('&',"&8>> &7You are &3" + distance + " &7version(s) behind!")
+                        + ChatColor.RESET
+                        + "\n"
+                        + ChatColor.translateAlternateColorCodes('&',"&8>> &7Download the new version at:"
+                        + ChatColor.RESET
+                        + "\n"
+                        + "     " + ChatColor.DARK_AQUA + downloadPage);
+                // Titanium end
+        }
+    }
+
+    private static int fetchDistanceFromSiteApi(@NotNull String branch, int jenkinsBuild) {
+        try {
+            try (BufferedReader reader = Resources.asCharSource(
+                    new URL("https://jenkins.titanvale.net/job/Titanium/job/" + branch + "/api/json?lastCompletedBuild[number]"),
+                    Charsets.UTF_8
+            ).openBufferedStream()) {
+                JsonObject json = new Gson().fromJson(reader, JsonObject.class);
+                JsonObject build = json.getAsJsonObject("lastCompletedBuild");
+                int latest = build.get("number").getAsInt();
+                if (latest < jenkinsBuild) {
+                    return -1;
+                }
+                return latest - jenkinsBuild;
+            } catch (JsonSyntaxException ex) {
+                ex.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+    private static int fetchDistanceFromGitHub(@NotNull String repo, @NotNull String branch, @NotNull String hash) {
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {
+                return -2; // Unknown commit
+            }
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical":
+                        return 0;
+                    case "behind":
+                        return obj.get("behind_by").getAsInt();
+                    default:
+                        return -1;
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 573e375dcf702711eed2391940d1d0cc8919510b..f92d303ed4e5a4253ce4e34b147c5d27dc520b5e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -172,5 +172,11 @@ public final class CraftMagicNumbers implements UnsafeValues {
             throw new RuntimeException(ex);
         }
     }
+
+    @Override
+    public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
+        return new com.destroystokyo.paper.PaperVersionFetcher();
+    }
     // Paper end
+
 }
