From a927d44a315b4f5c4f5788173907df67b99fde07 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 30 Apr 2022 13:11:15 +0200
Subject: [PATCH] Use new SpigotConfig


diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index fc522873..c1b6e3cd 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
+import net.titanium.config.TitaniumConfig;
 
 public class CommandDispatcher extends CommandHandler implements ICommandDispatcher {
 
@@ -100,7 +101,7 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
             }
         }
 
-        if (icommandlistener != minecraftserver && minecraftserver.worldServer[0].getGameRules().getBoolean("logAdminCommands") && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
+        if (icommandlistener != minecraftserver && minecraftserver.worldServer[0].getGameRules().getBoolean("logAdminCommands") && !TitaniumConfig.get().spigot.commands.silentCommandblockConsole) { // Spigot
             minecraftserver.sendMessage(chatmessage);
         }
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index f86b5d29..83e5333d 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -184,7 +184,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.a(MinecraftEncryption.b());
             DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
-        if (!org.spigotmc.SpigotConfig.lateBind) {
+        if (!TitaniumConfig.get().spigot.settings.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
@@ -205,7 +205,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
                 // Spigot start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                if (TitaniumConfig.get().spigot.settings.bungeecord) {
                     DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
                     DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
                 } else {
@@ -280,7 +280,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(); // CraftBukkit
                 }
 
-        if (org.spigotmc.SpigotConfig.lateBind) {
+        if (TitaniumConfig.get().spigot.settings.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 0cc3e2fb..6082de68 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -10,11 +11,11 @@ public class GenericAttributes {
 
     private static final Logger f = LogManager.getLogger();
     // Spigot start
-    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
+    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  2048)).a("Max Health").a(true);
     public static final IAttribute FOLLOW_RANGE = (new AttributeRanged((IAttribute) null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
     public static final IAttribute c = (new AttributeRanged((IAttribute) null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
-    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
-    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
+    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, 2048)).a("Movement Speed").a(true);
+    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, 2048);
     // Spigot end
 
     public static NBTTagList a(AttributeMapBase attributemapbase) {
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 5454f2b5..807b520f 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 // CraftBukkit start
 import java.net.InetAddress;
 import java.util.HashMap;
+import net.titanium.config.TitaniumConfig;
 // CraftBukkit end
 
 public class HandshakeListener implements PacketHandshakingInListener {
@@ -63,18 +64,18 @@ public class HandshakeListener implements PacketHandshakingInListener {
             // CraftBukkit end
 
             if (packethandshakinginsetprotocol.b() > 47) {
-                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
+                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( TitaniumConfig.get().spigot.messages.outdatedServer.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else if (packethandshakinginsetprotocol.b() < 47) {
-                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
+                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( TitaniumConfig.get().spigot.messages.outdatedClient.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else {
                 this.b.protocolVersion = packethandshakinginsetprotocol.b();
                 this.b.a((PacketListener) (new LoginListener(this.a, this.b)));
                 // Spigot Start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                if (TitaniumConfig.get().spigot.settings.bungeecord) {
                     String[] split = packethandshakinginsetprotocol.hostname.split("\00");
                     if ( split.length == 3 || split.length == 4 ) {
                         packethandshakinginsetprotocol.hostname = split[0];
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index 95060a4e..ed235495 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.List;
+import net.titanium.config.TitaniumConfig;
 
 public class IntCache {
 
@@ -17,11 +18,11 @@ public class IntCache {
         if (i <= 256) {
             if (IntCache.b.isEmpty()) {
                 aint = new int[256];
-                if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
+                if (c.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.c.add(aint);
                 return aint;
             } else {
                 aint = (int[]) IntCache.b.remove(IntCache.b.size() - 1);
-                if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
+                if (c.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.c.add(aint);
                 return aint;
             }
         } else if (i > IntCache.a) {
@@ -29,15 +30,15 @@ public class IntCache {
             IntCache.d.clear();
             IntCache.e.clear();
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.e.add(aint);
             return aint;
         } else if (IntCache.d.isEmpty()) {
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.e.add(aint);
             return aint;
         } else {
             aint = (int[]) IntCache.d.remove(IntCache.d.size() - 1);
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.e.add(aint);
             return aint;
         }
     }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 772b79e7..22f0e99b 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -15,6 +15,7 @@ import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import javax.crypto.SecretKey;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -52,7 +53,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
     public void c() {
         // Paper start - Do not allow logins while the server is shutting down
         if (!MinecraftServer.getServer().isRunning()) {
-            this.disconnect(org.spigotmc.SpigotConfig.restartMessage);
+            this.disconnect(TitaniumConfig.get().spigot.messages.restart);
             return;
         }
         // Paper end
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1f94d925..4056b8a9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -39,6 +39,7 @@ import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -508,7 +509,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.n.e();
             }
             // Spigot start
-            if( org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly )
+            if( TitaniumConfig.get().spigot.settings.saveUserCacheOnStopOnly )
             {
                 LOGGER.info("Saving usercache.json");
                 this.Z.c(false); // Paper
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 40291094..d7949903 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -23,6 +23,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -66,7 +67,7 @@ public class NameReferencingFileConverter {
             }
         }), String.class);
 
-        if (minecraftserver.getOnlineMode() || org.spigotmc.SpigotConfig.bungee) { // Spigot: bungee = online mode, for now.
+        if (minecraftserver.getOnlineMode() || TitaniumConfig.get().spigot.settings.bungeecord) { // Spigot: bungee = online mode, for now.
             minecraftserver.getGameProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, profilelookupcallback);
         } else {
             String[] astring1 = astring;
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 770fd53a..6868f2c0 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -7,6 +7,7 @@ import java.net.InetSocketAddress;
 import java.util.Iterator;
 import java.util.Locale; // SportPaper - server list ping extra
 
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.entity.Player;
 
@@ -113,7 +114,7 @@ public class PacketStatusListener implements PacketStatusInListener {
         if ( !profiles.isEmpty() )
         {
             java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
-            profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            profiles = profiles.subList( 0, Math.min( profiles.size(), TitaniumConfig.get().spigot.settings.sampleCount ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
         }
         // Spigot End
         playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5e903d40..44275fe0 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -16,6 +16,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -402,7 +403,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     double d15 = d11 * d11 + d12 * d12 + d13 * d13;
 
                     // Spigot: make "moved too quickly" limit configurable
-                    if (d15 - d14 > org.spigotmc.SpigotConfig.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
+                    if (d15 - d14 > TitaniumConfig.get().spigot.settings.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
                         PlayerConnection.c.warn(this.player.getName() + " moved too quickly! " + d11 + "," + d12 + "," + d13 + " (" + d11 + ", " + d12 + ", " + d13 + ")");
                         this.a(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
                         return;
@@ -440,7 +441,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     boolean flag1 = false;
 
                     // Spigot: make "moved wrongly" limit configurable
-                    if (d15 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
+                    if (d15 > TitaniumConfig.get().spigot.settings.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
                         flag1 = true;
                         PlayerConnection.c.warn(this.player.getName() + " moved wrongly!");
                     }
@@ -1175,7 +1176,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             // Spigot start - spam exclusions
             boolean counted = true;
-            for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
+            for ( String exclude : TitaniumConfig.get().spigot.commands.spamExclusions)
             {
                 if ( exclude != null && s.startsWith( exclude ) )
                 {
@@ -1314,15 +1315,15 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
    private void handleCommand(String s) {
         SpigotTimings.playerCommandTimer.startTiming(); // Spigot
        // CraftBukkit start - whole method
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
+        if ( TitaniumConfig.get().spigot.commands.log ) // Spigot
         this.c.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
         // SportPaper - make unknown command and internal error messages customisable
         PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(),
-                org.spigotmc.SpigotConfig.unknownCommandMessage,
-                org.spigotmc.SpigotConfig.internalErrorMessage);
+                TitaniumConfig.get().spigot.messages.unknownCommand,
+                TitaniumConfig.get().spigot.messages.internalError);
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
@@ -1954,7 +1955,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() < 36 + PlayerInventory.getHotbarSize();
             // CraftBukkit - Add invalidItems check
-            boolean flag2 = itemstack == null || itemstack.getItem() != null && (!invalidItems.contains(Item.getId(itemstack.getItem())) || !org.spigotmc.SpigotConfig.filterCreativeItems); // Spigot
+            boolean flag2 = itemstack == null || itemstack.getItem() != null && (!invalidItems.contains(Item.getId(itemstack.getItem())) || !TitaniumConfig.get().spigot.settings.filterCreativeItems); // Spigot
             boolean flag3 = itemstack == null || itemstack.getData() >= 0 && itemstack.count <= 64 && itemstack.count > 0;
             // CraftBukkit start - Call click event
             if (flag || (flag1 && !ItemStack.matches(this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem(), packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index b12fa3b8..b14cc2e3 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -16,6 +16,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -473,7 +474,7 @@ public abstract class PlayerList {
             if (!gameprofilebanentry.hasExpired()) event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s); // Spigot
         } else if (!this.isWhitelisted(gameprofile)) {
             // return "You are not white-listed on this server!";
-            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, TitaniumConfig.get().spigot.messages.whitelist); // Spigot
         } else if (getIPBans().isBanned(socketaddress) && !getIPBans().get(socketaddress).hasExpired()) {
             IpBanEntry ipbanentry = this.l.get(socketaddress);
 
@@ -487,7 +488,7 @@ public abstract class PlayerList {
         } else {
             // return this.players.size() >= this.maxPlayers && !this.f(gameprofile) ? "The server is full!" : null;
             if (this.players.size() >= this.maxPlayers && !this.f(gameprofile)) {
-                event.disallow(PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+                event.disallow(PlayerLoginEvent.Result.KICK_FULL, TitaniumConfig.get().spigot.messages.serverFull); // Spigot
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index cc6f993b..be22b6f3 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -25,6 +25,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -149,7 +150,7 @@ public class ServerConnection {
             // Spigot Start
             addPending(); // Paper
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
-            if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
+            if (TitaniumConfig.get().spigot.settings.playerShuffle > 0 && MinecraftServer.currentTick % TitaniumConfig.get().spigot.settings.playerShuffle == 0 )
             {
                 Collections.shuffle( this.h );
             }
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 22c2ffdd..f5f8bcf9 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -15,6 +15,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -32,11 +33,10 @@ public class ServerStatisticManager extends StatisticManager {
         this.c = minecraftserver;
         this.d = file;
         // Spigot start
-        for ( String name : org.spigotmc.SpigotConfig.forcedStats.keySet() )
-        {
+        for (Entry<String, Integer> forcedStat : TitaniumConfig.get().spigot.stats.forcedStats.entrySet()) {
             StatisticWrapper wrapper = new StatisticWrapper();
-            wrapper.a( org.spigotmc.SpigotConfig.forcedStats.get( name ) );
-            a.put( StatisticList.getStatistic( name ), wrapper );
+            wrapper.a( forcedStat.getValue() );
+            a.put( StatisticList.getStatistic( forcedStat.getKey() ), wrapper );
         }
         // Spigot end
     }
@@ -56,17 +56,17 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void b() {
-        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        if ( TitaniumConfig.get().spigot.stats.disableSaving ) return; // Spigot
         try {
             FileUtils.writeStringToFile(this.d, a(this.a));
         } catch (IOException ioexception) {
-            ServerStatisticManager.b.error("Couldn\'t save stats", ioexception);
+            ServerStatisticManager.b.error("Couldn't save stats", ioexception);
         }
 
     }
 
     public void setStatistic(EntityHuman entityhuman, Statistic statistic, int i) {
-        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        if ( TitaniumConfig.get().spigot.stats.disableSaving ) return; // Spigot
         int j = statistic.d() ? this.getStatisticValue(statistic) : 0;
 
         super.setStatistic(entityhuman, statistic, i);
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index f84a55e8..b8968ad3 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -17,6 +17,7 @@ import java.util.concurrent.TimeUnit;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.authlib.Agent;
 import com.mojang.authlib.ProfileLookupCallback;
+import net.titanium.config.TitaniumConfig;
 import org.spigotmc.SpigotConfig;
 // Spigot end
 
@@ -68,7 +69,7 @@ public class TileEntitySkull extends TileEntity {
 
                         if ( property == null )
                         {
-                            if(SpigotConfig.fetchSkulls) {
+                            if(TitaniumConfig.get().spigot.settings.fetchSkulls) {
                                 profile = MinecraftServer.getServer().aD().fillProfileProperties(profile, true);
                             } else {
                                 org.bukkit.Bukkit.getLogger().warning("Skull-fetching is disabled, so not fetching skin for \"" + profile.getName() + "\"");
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 700c6069..101862cd 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -35,6 +35,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.io.IOUtils;
 
 public class UserCache {
@@ -122,7 +123,7 @@ public class UserCache {
         this.c.put(gameprofile.getName().toLowerCase(Locale.ROOT), usercache_usercacheentry);
         this.d.put(uuid, usercache_usercacheentry);
         this.e.addFirst(gameprofile);
-        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
+        if( !TitaniumConfig.get().spigot.settings.saveUserCacheOnStopOnly) this.c(); // Spigot - skip saving if disabled
     }
 
     public synchronized GameProfile getProfile(String s) { // Paper - synchronize
@@ -150,7 +151,7 @@ public class UserCache {
             }
         }
 
-        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
+        if( !TitaniumConfig.get().spigot.stats.disableSaving ) this.c(); // Spigot - skip saving if disabled
         return usercache_usercacheentry == null ? null : usercache_usercacheentry.a();
     }
 
@@ -214,7 +215,7 @@ public class UserCache {
         c(true);
         }
         public void c(boolean asyncSave) {
-        String s = this.b.toJson(this.a(org.spigotmc.SpigotConfig.userCacheCap));
+        String s = this.b.toJson(this.a(TitaniumConfig.get().spigot.settings.userCacheSize));
         Runnable save = () -> {
         BufferedWriter bufferedwriter = null;
 
diff --git a/src/main/java/net/titanium/config/BukkitConfig.java b/src/main/java/net/titanium/config/BukkitConfig.java
index ad3cda4e..a52bafcc 100644
--- a/src/main/java/net/titanium/config/BukkitConfig.java
+++ b/src/main/java/net/titanium/config/BukkitConfig.java
@@ -42,7 +42,7 @@ public class BukkitConfig extends TitaniumConfigSection {
         public Warning.WarningState deprecatedVerbose = Warning.WarningState.DEFAULT;
 
         @Comment("Message sent to clients before shutdown.")
-        public String shutdownMessage = TitaniumConfig.color("Server close!");
+        public String shutdownMessage = "Server closed!";
 
         @Comment("Whether to not check if the login location is safe.")
         public boolean useExactLoginLocation = false;
diff --git a/src/main/java/net/titanium/config/SpigotConfig.java b/src/main/java/net/titanium/config/SpigotConfig.java
index 7fa25e88..83c145af 100644
--- a/src/main/java/net/titanium/config/SpigotConfig.java
+++ b/src/main/java/net/titanium/config/SpigotConfig.java
@@ -28,9 +28,6 @@ import static net.titanium.config.TitaniumConfig.log;
 @Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
 public class SpigotConfig extends TitaniumConfigSection {
 
-    @Exclude
-    private static SpigotConfig INSTANCE;
-
     public Settings settings = new Settings();
 
     public static class Settings extends TitaniumConfigSection {
@@ -135,13 +132,13 @@ public class SpigotConfig extends TitaniumConfigSection {
 
     public static class Messages extends TitaniumConfigSection {
 
-        public String restart = TitaniumConfig.color("Server is restarting!");
-        public String whitelist = TitaniumConfig.color("You are not on the whitelist!");
-        public String unknownCommand = TitaniumConfig.color("Unknown command. Type /help for help.");
-        public String internalError = TitaniumConfig.color("&cAn internal error occurred while attempting to perform this command");
-        public String serverFull = TitaniumConfig.color("The server is full!");
-        public String outdatedClient = TitaniumConfig.color("Outdated client! Please use {0}");
-        public String outdatedServer = TitaniumConfig.color("Outdated server! Server is on {0}");
+        public String restart = "&cServer is restarting!";
+        public String whitelist = "&cYou are not on the whitelist!";
+        public String unknownCommand = "&7Unknown command. Type &c/help &7for help.";
+        public String internalError ="&cAn internal error occurred while attempting to perform this command";
+        public String serverFull = "&cThe server is full!";
+        public String outdatedClient = "&7Outdated client! Please use &c{0}";
+        public String outdatedServer = "&7Outdated server! Server is on &c{0}";
 
     }
 
@@ -163,6 +160,11 @@ public class SpigotConfig extends TitaniumConfigSection {
                 .add("tellraw")
                 .build();
 
+        //TODO comment
+        public Set<String> spamExclusions = ImmutableSet.<String>builder()
+                .add("/skill")
+                .build();
+
         @Comment("Change the verbosity of tab complete events.")
         @Comment("Disable all tab completion with -1.")
         @Comment("Enable server commands to be queryable with 0.")
@@ -245,8 +247,4 @@ public class SpigotConfig extends TitaniumConfigSection {
 
     public SpigotWorldConfig worldSettings = new SpigotWorldConfig();
 
-    public static SpigotConfig get() {
-        return INSTANCE;
-    }
-
 }
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 5a7770eb..29d0e421 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -23,9 +23,6 @@ import org.spigotmc.TicksPerSecondCommand;
 @Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
 public class TitaniumConfig extends OkaeriConfig {
 
-    //TODO commands
-    //TODO /restart
-
     @Exclude
     private static TitaniumConfig INSTANCE;
 
@@ -67,11 +64,15 @@ public class TitaniumConfig extends OkaeriConfig {
         return INSTANCE;
     }
 
-    protected static String color(String input) {
+    static String color(String input) {
         return ChatColor.translateAlternateColorCodes('&', input);
     }
 
-    protected static void log(boolean verbose, String log) {
+    static void log(boolean verbose, String log) {
+        if (Bukkit.getLogger() == null) {
+            return;
+        }
+
         if (!verbose) {
             return;
         }
@@ -79,7 +80,8 @@ public class TitaniumConfig extends OkaeriConfig {
         Bukkit.getLogger().info(log);
     }
 
-    protected static void log(String log) {
+
+    static void log(String log) {
         log(true, log);
     }
 
diff --git a/src/main/java/net/titanium/config/TitaniumConfigSection.java b/src/main/java/net/titanium/config/TitaniumConfigSection.java
index e0e3ab67..afd2cb55 100644
--- a/src/main/java/net/titanium/config/TitaniumConfigSection.java
+++ b/src/main/java/net/titanium/config/TitaniumConfigSection.java
@@ -4,6 +4,7 @@ import eu.okaeri.configs.OkaeriConfig;
 import eu.okaeri.configs.annotation.Exclude;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.util.List;
 import java.util.logging.Level;
 import org.bukkit.Bukkit;
 
@@ -16,10 +17,18 @@ public abstract class TitaniumConfigSection extends OkaeriConfig {
 
     public void loadProperties() {
         this.loadProcessedProperties();
+
         Class<?> clazz = this.getClass();
         for (Field field : clazz.getDeclaredFields()) {
-            if (Modifier.isStatic(field.getModifiers())) {
-                continue;
+            try {
+                if (field.getType().equals(String.class)) {
+                    field.set(this, TitaniumConfig.color((String) field.get(this)));
+                } else if (field.getType().equals(List.class)) {
+                    List<String> list = (List<String>) field.get(this);
+                    list.replaceAll(TitaniumConfig::color);
+                }
+            } catch (Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failed to color property " + field.getName(), ex);
             }
 
             if (field.getAnnotation(Exclude.class) != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 57153025..42da5531 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -306,7 +306,7 @@ public final class CraftServer implements Server {
         for (ICommand cmd : commands.values()) {
             // Spigot start
             VanillaCommandWrapper wrapper = new VanillaCommandWrapper((CommandAbstract) cmd, LocaleI18n.get(cmd.getUsage(null)));
-            if (org.spigotmc.SpigotConfig.replaceCommands.contains( wrapper.getName() ) ) {
+            if (TitaniumConfig.get().spigot.commands.replaceCommands.contains( wrapper.getName() ) ) {
                 if (first) {
                     commandMap.register("minecraft", wrapper);
                 }
@@ -563,7 +563,7 @@ public final class CraftServer implements Server {
     @Override
     public long getConnectionThrottle() {
         // Spigot Start - Automatically set connection throttle for bungee configurations
-        if (org.spigotmc.SpigotConfig.bungee) {
+        if (TitaniumConfig.get().spigot.settings.bungeecord) {
             return -1;
         } else {
             return serverConfig.bukkit.settings.connectionThrottle;
@@ -639,7 +639,7 @@ public final class CraftServer implements Server {
     // SportPaper start
     @Override
     public boolean dispatchCommand(CommandSender sender, String commandLine) {
-        return dispatchCommand(sender, commandLine, org.spigotmc.SpigotConfig.unknownCommandMessage);
+        return dispatchCommand(sender, commandLine, TitaniumConfig.get().spigot.messages.unknownCommand);
     }
     // SportPaper end
 
@@ -1270,7 +1270,7 @@ public final class CraftServer implements Server {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( MinecraftServer.getServer().getOnlineMode() || org.spigotmc.SpigotConfig.bungee )
+            if ( MinecraftServer.getServer().getOnlineMode() || TitaniumConfig.get().spigot.settings.bungeecord)
             {
                 profile = MinecraftServer.getServer().getUserCache().getProfile( name );
             }
@@ -1578,7 +1578,7 @@ public final class CraftServer implements Server {
      */
     public List<String> tabCompleteCommand(Player player, String message, BlockPosition blockPosition) {
         // Spigot Start
-        if ( (org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains( " " ) )
+        if ( (TitaniumConfig.get().spigot.commands.tabComplete < 0 || message.length() <= TitaniumConfig.get().spigot.commands.tabComplete) && !message.contains( " " ) )
         {
             return ImmutableList.of();
         }
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index e366f56e..10029389 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -4,6 +4,7 @@ import java.io.File;
 import java.util.List;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
@@ -37,7 +38,7 @@ public class RestartCommand extends Command
 
     public static void restart()
     {
-        restart( new File( SpigotConfig.restartScript ) );
+        restart( new File( TitaniumConfig.get().spigot.settings.restartScript ) );
     }
 
     public static void restart(final File script)
@@ -47,7 +48,7 @@ public class RestartCommand extends Command
         {
             if ( script.isFile() )
             {
-                System.out.println( "Attempting to restart with " + SpigotConfig.restartScript );
+                System.out.println( "Attempting to restart with " + TitaniumConfig.get().spigot.settings.restartScript );
 
                 // Disable Watchdog
                 WatchdogThread.doStop();
@@ -55,7 +56,7 @@ public class RestartCommand extends Command
                 // Kick all players
                 for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
                 {
-                    p.playerConnection.disconnect(SpigotConfig.restartMessage);
+                    p.playerConnection.disconnect(TitaniumConfig.get().spigot.messages.restart);
                 }
                 // Give the socket a chance to send the packets
                 try
@@ -113,7 +114,7 @@ public class RestartCommand extends Command
                 Runtime.getRuntime().addShutdownHook( shutdownHook );
             } else
             {
-                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+                System.out.println( "Startup script '" + TitaniumConfig.get().spigot.settings.restartScript + "' does not exist! Stopping server." );
             }
             System.exit( 0 );
         } catch ( Exception ex )
-- 
2.32.0.windows.2

