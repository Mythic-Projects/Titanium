From 9f0e37df31967fa3fca99a160a3b4fb71bfa1cc1 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 30 Apr 2022 15:45:44 +0200
Subject: [PATCH] Stop using SharedConfig, finally inear peace


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 83e5333d..2c9df045 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -178,7 +178,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.a((PlayerList) (new DedicatedPlayerList(this)));
             // Spigot end
             TitaniumConfig.get().registerCommands();
-            SharedConfig.registerCommands();
+            //SharedConfig.registerCommands(); Titanium
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index e5afa7fa..7d270143 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -1,5 +1,7 @@
 package net.titanium.config;
 
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import eu.okaeri.configs.OkaeriConfig;
 import eu.okaeri.configs.annotation.Comment;
 import eu.okaeri.configs.annotation.Exclude;
@@ -9,7 +11,9 @@ import eu.okaeri.configs.annotation.NameStrategy;
 import eu.okaeri.configs.annotation.Names;
 import eu.okaeri.configs.exception.OkaeriException;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -30,9 +34,6 @@ public class TitaniumConfig extends OkaeriConfig {
     @Exclude
     private static TitaniumConfig INSTANCE;
 
-    @Exclude
-    private static boolean DISABLE_LOGGING = true;
-
     @Exclude
     public static Map<String, Command> COMMANDS = new HashMap<>();
 
@@ -45,12 +46,23 @@ public class TitaniumConfig extends OkaeriConfig {
     @Comment("Configuration from paper.yml")
     public PaperConfig paper = new PaperConfig();
 
+    public Commands commands = new Commands();
+
+    public static class Commands extends TitaniumConfigSection {
+
+        public Set<String> commandBlockOverrides = new HashSet<>();
+
+        public Map<String, Set<String>> aliases = ImmutableMap.<String, Set<String>>builder()
+                .put("icanhasbukkit", ImmutableSet.of("version"))
+                .build();
+
+    }
+
     @Override
     public OkaeriConfig load() throws OkaeriException {
         super.load();
 
         INSTANCE = this;
-        DISABLE_LOGGING = false;
 
         this.loadProperties();
 
@@ -92,7 +104,7 @@ public class TitaniumConfig extends OkaeriConfig {
     }
 
     static void log(boolean verbose, String log) {
-        if (Bukkit.getLogger() == null || DISABLE_LOGGING) {
+        if (Bukkit.getLogger() == null) {
             return;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e7b5327f..a1d486cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -202,7 +202,7 @@ public final class CraftServer implements Server {
             getLogger().info("Console input is disabled due to --noconsole command argument");
         }
 
-        SharedConfig.init((File) console.options.valueOf("titanium-settings")); // SportPaper
+        //SharedConfig.init((File) console.options.valueOf("titanium-settings")); // SportPaper // Titanium
 
         // Titanium start
         serverConfig = ConfigManager.create(TitaniumConfig.class, (it) -> {
@@ -211,13 +211,13 @@ public final class CraftServer implements Server {
                 registry.register(new DecolorTransformer());
                 registry.register(new WarningStateTransformer());
             });
-            it.withBindFile("titanium-config.yml"); // TODO Change to console.options.valueOf("titanium-settings") after migrating everything
+            it.withBindFile((File) console.options.valueOf("titanium-settings"));
             it.saveDefaults();
             it.load(true);
         });
         // Titanium end
 
-        // overrideAllCommandBlockCommands = SharedConfig.config.getStringList("commands.command-block-overrides").contains("*"); //TODO add this to config
+        overrideAllCommandBlockCommands = TitaniumConfig.get().commands.commandBlockOverrides.contains("*");
         net.titanium.config.BukkitConfig bukkit = serverConfig.bukkit;
         ((SimplePluginManager) pluginManager).useTimings(bukkit.settings.pluginProfiling);
         monsterSpawn = bukkit.spawnLimits.monsters;
@@ -237,7 +237,7 @@ public final class CraftServer implements Server {
     }
 
     public boolean getCommandBlockOverride(String command) {
-        return overrideAllCommandBlockCommands || SharedConfig.config.getStringList("commands.command-block-overrides").contains(command);
+        return overrideAllCommandBlockCommands || TitaniumConfig.get().commands.commandBlockOverrides.contains(command);
     }
 
     private void pluginFailedToLoad(Plugin plugin) {
@@ -1099,24 +1099,10 @@ public final class CraftServer implements Server {
 
     @Override
     public Map<String, String[]> getCommandAliases() {
-
-        ConfigurationSection section = SharedConfig.config.getConfigurationSection("commands.aliases");
         Map<String, String[]> result = new LinkedHashMap<String, String[]>();
-
-        if (section != null) {
-            for (String key : section.getKeys(false)) {
-                List<String> commands;
-
-                if (section.isList(key)) {
-                    commands = section.getStringList(key);
-                } else {
-                    commands = ImmutableList.of(section.getString(key));
-                }
-
-                result.put(key, commands.toArray(new String[commands.size()]));
-            }
-        }
-
+        TitaniumConfig.get().commands.aliases.forEach((key, commands) -> {
+            result.put(key, commands.toArray(new String[commands.size()]));
+        });
         return result;
     }
 
@@ -1166,7 +1152,7 @@ public final class CraftServer implements Server {
         ChunkGenerator result = null;
 
         /* Titanium start
-        ConfigurationSection section = BukkitConfig.getConfigurationSection("worlds");
+        ConfigurationSection section = BukkitConfig.getConfigurationSection("worlds"); //TODO Move this somewhere
 
         if (section != null) {
             section = section.getConfigurationSection(world);
diff --git a/src/main/java/org/github/paperspigot/SharedConfig.java b/src/main/java/org/github/paperspigot/SharedConfig.java
index a6a40fdf..a6c22bf1 100644
--- a/src/main/java/org/github/paperspigot/SharedConfig.java
+++ b/src/main/java/org/github/paperspigot/SharedConfig.java
@@ -45,17 +45,14 @@ public class SharedConfig {
 
         commands = new HashMap<String, Command>();
 
-        /* Titanium  start
         BukkitConfig.init();
         SpigotConfig.init();
         PaperSpigotConfig.init();
         SpigotWorldConfig.init();
         PaperSpigotWorldConfig.init();
-        Titanium  end */
     }
 
     public static void registerCommands() {
-        /* Titanium start
         for (Map.Entry<String, Command> entry : commands.entrySet()) {
             MinecraftServer.
                     getServer().
@@ -63,7 +60,6 @@ public class SharedConfig {
                     getCommandMap().
                     register(entry.getKey(), "SportPaper", entry.getValue());
         }
-        Titanium end */
     }
 
     public static void readConfig(Class<?> clazz, Object instance) {
-- 
2.32.0.windows.2

