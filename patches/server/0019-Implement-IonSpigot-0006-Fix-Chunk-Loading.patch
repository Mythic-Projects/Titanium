From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 11 May 2022 16:04:30 +0200
Subject: [PATCH] Implement [IonSpigot-0006] Fix Chunk Loading


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index c0f24e60fdb2e709d2621c978578d504e1f43b55..ce4f5a1ff8977b1db2ab02695f11fd067680137e 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -422,11 +422,31 @@ public abstract class Entity implements ICommandListener {
      * PaperSpigot - Load surrounding chunks the entity is moving through
      */
     public void loadChunks() {
-        for (int cx = (int) locX >> 4; cx <= (int) (locX + motX) >> 4; ++cx) {
-            for (int cz = (int) locZ >> 4; cz <= (int) (locZ + motZ) >> 4; ++cz) {
-                ((ChunkProviderServer) world.chunkProvider).getChunkAt(cx, cz);
-            }
-        }
+        // IonSpigot start - Fix Load Chunks
+        /*
+        This implementation is flawed, as it does not work properly in south and east directions.
+        The reason for this is because the motion would be negative in those directions which
+        would cause the checks to fail, as it is missing min and max checks.
+
+        Now you're going to be saying my cannon loaded chunks in those directions,
+        you are right about that, the reason it works is because theres an additional layer
+        of chunk loading, I personally believe this method is meant to ensure that the current position
+        is loaded as it isn't guaranteed that the entity will move at all.
+
+        This additional layer is located in the getCubes method, we can remove the excess logic from here
+        and take advantage of that with the triangle patch that was implemented in TacoSpigot
+        this allows for triangle chunk loading allowing to us to reduce chunks loaded by cannons.
+
+         for (int cx = (int) locX >> 4; cx <= (int) (locX  motX) >> 4; cx) {
+             for (int cz = (int) locZ >> 4; cz <= (int) (locZ  motZ) >> 4; cz) {
+                 ((ChunkProviderServer) world.chunkProvider).getChunkAt(cx, cz);
+             }
+         }
+        */
+        int chunkX = org.bukkit.util.NumberConversions.floor(locX) >> 4;
+        int chunkZ = org.bukkit.util.NumberConversions.floor(locZ) >> 4;
+        ((ChunkProviderServer) world.chunkProvider).getChunkAt(chunkX, chunkZ);
+        // IonSpigot end
     }
 
 
