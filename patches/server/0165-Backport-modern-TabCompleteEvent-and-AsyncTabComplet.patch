From c4d4ce34df171b9a1bc6d1792c423c78c1c816e7 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 17 Sep 2022 12:10:54 +0200
Subject: [PATCH] Backport modern TabCompleteEvent and AsyncTabCompleteEvent


diff --git a/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java b/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
index 0d811e789..3440a3377 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
@@ -1,6 +1,9 @@
 package net.minecraft.server;
 
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.IOException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import org.apache.commons.lang3.StringUtils;
 
 public class PacketPlayInTabComplete implements Packet<PacketListenerPlayIn> {
@@ -40,8 +43,11 @@ public class PacketPlayInTabComplete implements Packet<PacketListenerPlayIn> {
 
     }
 
+    // Titanium start - Async tab complete
+    private static final ExecutorService TAB_COMPLETION_EXECUTOR = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Titanium TabComplete Thread - %d").build());
     public void a(PacketListenerPlayIn packetlistenerplayin) {
-        packetlistenerplayin.a(this);
+        TAB_COMPLETION_EXECUTOR.submit(() -> packetlistenerplayin.a(this));
+        // Titanium end
     }
 
     public String a() {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index c10ff1faa..fe3a1520a 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1,10 +1,11 @@
 package net.minecraft.server;
 
+import com.destroystokyo.paper.event.server.AsyncTabCompleteEvent;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
-import com.google.common.util.concurrent.Futures;
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
@@ -19,6 +20,7 @@ import java.util.Set;
 import java.util.concurrent.Callable;
 import net.titanium.config.TitaniumConfig;
 import net.titanium.util.MathUtil;
+import net.titanium.util.async.AsyncUtil;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -2002,14 +2004,15 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     }
 
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
-        PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.u());
+        //PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.u()); // Paper - run this async
         // CraftBukkit start
         if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
-            this.disconnect("disconnect.spam");
+            minecraftServer.postToMainThread(() -> this.disconnect("disconnect.spam")); // Paper
             return;
         }
         // CraftBukkit end
-        ArrayList arraylist = Lists.newArrayList();
+        // Titanium start - Backport some modern tab completion API
+        /*ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b()).iterator();
 
         while (iterator.hasNext()) {
@@ -2018,7 +2021,26 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             arraylist.add(s);
         }
 
-        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) arraylist.toArray(new String[arraylist.size()])));
+        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) arraylist.toArray(new String[arraylist.size()])));*/
+
+        List<String> completions = new ArrayList<>();
+        String buffer = packetplayintabcomplete.a();
+        Location location = MCUtil.toLocation(this.player.getWorld(), packetplayintabcomplete.b());
+
+        AsyncTabCompleteEvent event = new AsyncTabCompleteEvent(this.getPlayer(), completions, buffer, buffer.startsWith("/"), location);
+        boolean cancelled = !event.callEvent();
+
+        // If the event isn't handled, we can assume that we have no completions, and so we'll ask the server
+        if (!event.isHandled() && !cancelled) {
+            completions = AsyncUtil.supplyNextTick(() -> this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b()));
+            if (completions == null) {
+                completions = ImmutableList.of();
+            }
+        } else if (!completions.isEmpty()) {
+            completions = event.getCompletions();
+        }
+        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete(completions.toArray(new String[0])));
+        // Titanium end
     }
 
     public void a(PacketPlayInSettings packetplayinsettings) {
diff --git a/src/main/java/net/titanium/console/TitaniumConsoleCompleter.java b/src/main/java/net/titanium/console/TitaniumConsoleCompleter.java
index b87509781..18066a65e 100644
--- a/src/main/java/net/titanium/console/TitaniumConsoleCompleter.java
+++ b/src/main/java/net/titanium/console/TitaniumConsoleCompleter.java
@@ -1,10 +1,15 @@
 package net.titanium.console;
 
+import com.destroystokyo.paper.event.server.AsyncTabCompleteEvent;
+import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.logging.Level;
+import java.util.stream.Collectors;
 import net.minecraft.server.DedicatedServer;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.event.server.TabCompleteEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.jline.reader.Candidate;
 import org.jline.reader.Completer;
@@ -13,6 +18,7 @@ import org.jline.reader.ParsedLine;
 
 // Titanium - it's come from PandaSpigot and originally was named PandaConsoleCompleter
 public class TitaniumConsoleCompleter implements Completer {
+
     private final DedicatedServer server;
 
     public TitaniumConsoleCompleter(DedicatedServer server) {
@@ -21,7 +27,60 @@ public class TitaniumConsoleCompleter implements Completer {
 
     @Override
     public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {
-        CompletionWaiter waitable = new CompletionWaiter(line.line());
+        CraftServer server = this.server.server;
+        List<String> completions = new ArrayList<>();
+        String buffer = line.line();
+
+        AsyncTabCompleteEvent asyncEvent = new AsyncTabCompleteEvent(server.getConsoleSender(), completions, buffer, true, null);
+        boolean cancelled = !asyncEvent.callEvent();
+        completions = cancelled
+                ? ImmutableList.of()
+                : asyncEvent.getCompletions();
+
+        if (cancelled || asyncEvent.isHandled()) {
+            // Still fire sync event with the provided completions, if someone is listening
+            if (!cancelled && TabCompleteEvent.getHandlerList().getRegisteredListeners().length > 0) {
+                List<String> finalCompletions = completions;
+                Waitable<List<String>> syncCompletions = new Waitable<List<String>>() {
+                    @Override
+                    protected List<String> evaluate() {
+                        TabCompleteEvent syncEvent = new TabCompleteEvent(server.getConsoleSender(), buffer, finalCompletions);
+                        return syncEvent.callEvent()
+                                ? syncEvent.getCompletions()
+                                : ImmutableList.of();
+                    }
+                };
+                server.getServer().processQueue.add(syncCompletions);
+                try {
+                    completions = syncCompletions.get();
+                } catch (InterruptedException | ExecutionException ex) {
+                    ex.printStackTrace();
+                }
+            }
+
+            if (!completions.isEmpty()) {
+                candidates.addAll(completions.stream()
+                        .map(Candidate::new)
+                        .collect(Collectors.toList())
+                );
+            }
+            return;
+        }
+
+        Waitable<List<String>> waitable = new Waitable<List<String>>() {
+            @Override
+            protected List<String> evaluate() {
+                List<String> offers = server.getCommandMap().tabComplete(server.getConsoleSender(), buffer);
+                if (offers == null) {
+                    offers = ImmutableList.of();
+                }
+
+                TabCompleteEvent syncEvent = new TabCompleteEvent(server.getConsoleSender(), buffer, offers);
+                return syncEvent.callEvent()
+                        ? syncEvent.getCompletions()
+                        : ImmutableList.of();
+            }
+        };
         this.server.processQueue.add(waitable);
 
         try {
@@ -41,18 +100,4 @@ public class TitaniumConsoleCompleter implements Completer {
         }
     }
 
-    private class CompletionWaiter extends Waitable<List<String>> {
-        private final String buffer;
-
-        private CompletionWaiter(String buffer) {
-            this.buffer = buffer;
-        }
-
-        @Override
-        protected List<String> evaluate() {
-            final CraftServer server = TitaniumConsoleCompleter.this.server.server;
-
-            return server.getCommandMap().tabComplete(server.getConsoleSender(), this.buffer);
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 742981496..94c16996d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -61,6 +61,7 @@ import net.minecraft.server.IProgressUpdate;
 import net.minecraft.server.Items;
 import net.minecraft.server.JsonListEntry;
 import net.minecraft.server.LocaleI18n;
+import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.MobEffectList;
 import net.minecraft.server.PersistentCollection;
@@ -134,6 +135,7 @@ import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
+import org.bukkit.event.server.TabCompleteEvent;
 import org.bukkit.event.world.WorldInitEvent;
 import org.bukkit.event.world.WorldLoadEvent;
 import org.bukkit.event.world.WorldUnloadEvent;
@@ -1821,13 +1823,18 @@ public final class CraftServer implements Server {
         if (!(sender instanceof EntityPlayer)) {
             return ImmutableList.of();
         }
-
+        // Titanium start - Backport some modern tab completion API
         Player player = ((EntityPlayer) sender).getBukkitEntity();
-        if (message.startsWith("/")) {
-            return tabCompleteCommand(player, message, blockPosition);
-        } else {
-            return tabCompleteChat(player, message);
-        }
+
+        boolean isCommand = message.startsWith("/");
+        List<String> offers = isCommand
+                ? this.tabCompleteCommand(player, message, blockPosition)
+                : this.tabCompleteChat(player, message);
+        Location location = MCUtil.toLocation(((CraftWorld) player.getWorld()).getHandle(), blockPosition);
+
+        TabCompleteEvent tabEvent = new TabCompleteEvent(player, message, offers, isCommand, location);
+        return tabEvent.callEvent() ? tabEvent.getCompletions() : ImmutableList.of();
+        // Titanium end
     }
     // PaperSpigot end
 
-- 
2.36.0.windows.1

