From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 15 May 2022 18:17:49 +0200
Subject: [PATCH] Implement [Nacho-0009] Remove an extra file io call within
 world credit bob7l


diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index ba422aecbf3db350247e84749bddc481f8901f16..b7bb92f0fe3b5123271975d52618f52a923e4ab1 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -169,7 +169,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
-        final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
+        final EnumProtocol enumprotocol1 = this.channel.attr(NetworkManager.c).get();
 
         if (enumprotocol1 != enumprotocol) {
             NetworkManager.g.debug("Disabled auto read");
@@ -189,20 +189,18 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         } else {
-            this.channel.eventLoop().execute(new Runnable() {
-                public void run() {
-                    if (enumprotocol != enumprotocol1) {
-                        NetworkManager.this.a(enumprotocol);
-                    }
-
-                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
+            this.channel.eventLoop().execute(() -> {
+                if (enumprotocol != enumprotocol1) {
+                    NetworkManager.this.a(enumprotocol);
+                }
 
-                    if (agenericfuturelistener != null) {
-                        channelfuture.addListeners(agenericfuturelistener);
-                    }
+                ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
 
-                    channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                if (agenericfuturelistener != null) {
+                    channelfuture.addListeners(agenericfuturelistener);
                 }
+
+                channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
             });
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index eab4180420f2f34ad75fa52405a3af8709034056..d508977f55d3010a7602a8a5380e29d941da7aa0 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -207,7 +207,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file = new File(this.playerDir, entityhuman.getUniqueID().toString() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
-            boolean normalFile = file.exists() && file.isFile(); // Akarin - ensures normal file
+            boolean normalFile = file.isFile(); // Akarin - ensures normal file // Nacho - Remove file.exists, Thanks bob7l :)
             if ( org.bukkit.Bukkit.getOnlineMode() && !normalFile ) // Paper - Check online mode first // Akarin - ensures normal file
             {
                 file = new File( this.playerDir, UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes( "UTF-8" ) ).toString() + ".dat");
