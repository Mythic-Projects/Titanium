From f9b365799dc4f61488b6d37722fdac5b8538eb03 Mon Sep 17 00:00:00 2001
From: Minecrell <minecrell@minecrell.net>
Date: Thu, 22 Sep 2022 22:19:40 +0200
Subject: [PATCH] Implement [Paper-0192] Make legacy ping handler more reliable
 by Minecrell


diff --git a/src/main/java/net/minecraft/server/LegacyPingHandler.java b/src/main/java/net/minecraft/server/LegacyPingHandler.java
index a7990660e..48acf6364 100644
--- a/src/main/java/net/minecraft/server/LegacyPingHandler.java
+++ b/src/main/java/net/minecraft/server/LegacyPingHandler.java
@@ -7,6 +7,7 @@ import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -14,6 +15,7 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
 
     private static final Logger a = LogManager.getLogger();
     private ServerConnection b;
+    private ByteBuf buf; // Paper
 
     public LegacyPingHandler(ServerConnection serverconnection) {
         this.b = serverconnection;
@@ -22,6 +24,16 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
     public void channelRead(ChannelHandlerContext channelhandlercontext, Object object) throws Exception {
         ByteBuf bytebuf = (ByteBuf) object;
 
+        // Paper start - Make legacy ping handler more reliable
+        if (this.buf != null) {
+            try {
+                readLegacy1_6(channelhandlercontext, bytebuf);
+            } finally {
+                bytebuf.release();
+            }
+            return;
+        }
+        // Paper end
         bytebuf.markReaderIndex();
         boolean flag = true;
 
@@ -50,6 +62,10 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
                     break;
 
                 default:
+                    // Paper start - Replace with improved version below
+                    if (bytebuf.readUnsignedByte() != 0x01 || bytebuf.readUnsignedByte() != 0xFA) return;
+                    readLegacy1_6(channelhandlercontext, bytebuf);
+                    /*
                     boolean flag1 = bytebuf.readUnsignedByte() == 1;
 
                     flag1 &= bytebuf.readUnsignedByte() == 250;
@@ -73,6 +89,7 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
                     } finally {
                         bytebuf1.release();
                     }
+                    */ // Paper end - Replace with improved version below
                 }
 
                 bytebuf.release();
@@ -92,6 +109,90 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
 
     }
 
+    // Paper start
+    private static String readLegacyString(ByteBuf buf) {
+        int size = buf.readShort() * Character.BYTES;
+        if (!buf.isReadable(size)) {
+            return null;
+        }
+
+        String result = buf.toString(buf.readerIndex(), size, StandardCharsets.UTF_16BE);
+        buf.skipBytes(size); // toString doesn't increase readerIndex automatically
+        return result;
+    }
+
+    private void readLegacy1_6(ChannelHandlerContext ctx, ByteBuf part) {
+        ByteBuf buf = this.buf;
+
+        if (buf == null) {
+            this.buf = buf = ctx.alloc().buffer();
+            buf.markReaderIndex();
+        } else {
+            buf.resetReaderIndex();
+        }
+
+        buf.writeBytes(part);
+
+        if (!buf.isReadable(Short.BYTES + Short.BYTES + Byte.BYTES + Short.BYTES + Integer.BYTES)) {
+            return;
+        }
+
+        String s = readLegacyString(buf);
+        if (s == null) {
+            return;
+        }
+
+        if (!s.equals("MC|PingHost")) {
+            removeHandler(ctx);
+            return;
+        }
+
+        if (!buf.isReadable(Short.BYTES) || !buf.isReadable(buf.readShort())) {
+            return;
+        }
+
+        MinecraftServer server = this.b.d();
+        int protocolVersion = buf.readByte();
+        String host = readLegacyString(buf);
+        if (host == null) {
+            removeHandler(ctx);
+            return;
+        }
+        int port = buf.readInt();
+
+        if (buf.isReadable()) {
+            removeHandler(ctx);
+            return;
+        }
+
+        buf.release();
+        this.buf = null;
+
+        a.debug("Ping: (1.6) from {}", ctx.channel().remoteAddress());
+
+        String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d",
+                Byte.MAX_VALUE, server.getVersion(), server.getMotd(), server.getPlayerList().getPlayerCount(), server.getPlayerList().getMaxPlayers());
+        this.a(ctx, this.a(response));
+    }
+
+    private void removeHandler(ChannelHandlerContext ctx) {
+        ByteBuf buf = this.buf;
+        this.buf = null;
+
+        buf.resetReaderIndex();
+        ctx.pipeline().remove(this);
+        ctx.fireChannelRead(buf);
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) {
+        if (this.buf != null) {
+            this.buf.release();
+            this.buf = null;
+        }
+    }
+    // Paper end
+
     private void a(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf) {
         channelhandlercontext.pipeline().firstContext().writeAndFlush(bytebuf).addListener(ChannelFutureListener.CLOSE);
     }
-- 
2.36.0.windows.1

