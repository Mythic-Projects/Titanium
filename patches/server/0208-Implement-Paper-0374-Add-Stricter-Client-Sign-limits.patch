From 8056b96a3d65037d6fc3885d9c58b67e210e39d8 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 27 Feb 2019 22:18:40 -0500
Subject: [PATCH] Implement [Paper-0374] Add Stricter Client Sign limits by
 Aikar


diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index da1b4b2f6..9b3898093 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1944,6 +1944,15 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             String[] lines = new String[4];
 
             for (int i = 0; i < aichatbasecomponent.length; ++i) {
+                // Paper start - cap line length - modified clients can send longer data than normal
+                String line = aichatbasecomponent[i].getText();
+                if (line.length() > TileEntitySign.MAX_SIGN_LINE_LENGTH && TileEntitySign.MAX_SIGN_LINE_LENGTH > 0) {
+                    int offset = line.codePoints().limit(TileEntitySign.MAX_SIGN_LINE_LENGTH).map(Character::charCount).sum();
+                    if (line.length() >= offset) {
+                        aichatbasecomponent[i] = new ChatComponentText(line.substring(0, offset));
+                    }
+                }
+                // Paper end
                 lines[i] = EnumChatFormat.a(aichatbasecomponent[i].c());
             }
             SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index e927fd237..9300731d1 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.gson.JsonParseException;
+import net.titanium.config.TitaniumConfig;
 
 public class TileEntitySign extends TileEntity {
 
@@ -9,6 +10,7 @@ public class TileEntitySign extends TileEntity {
     public boolean isEditable = true;
     private EntityHuman h;
     private final CommandObjectiveExecutor i = new CommandObjectiveExecutor();
+    public static final int MAX_SIGN_LINE_LENGTH = TitaniumConfig.get().maxSignLineLength; // Paper
 
     public TileEntitySign() {}
 
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 902d79cf7..d2922e080 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -152,6 +152,13 @@ public class TitaniumConfig extends TitaniumConfigSection {
     @Comment("Smaller values (Our 50000 is probably enough, but smaller value would be even better) prevents most NBT related overflow exploits (for eg. Books)")
     public long nbtReadLimiter = 50000L;
 
+    @Comment("The maximum length of sign's line.")
+    @Comment("Modified clients can send abnormally long lines, which server will later store in memory.")
+    @Comment("However clients can barely render around 16 characters - since formatting codes also takes some space, we left some buffer (max length of 80 characters should be enough in most cases).")
+    @Comment("This change only affects data sent from clients, and doesn't affect currently existing signs (or with text changed in other ways for eg. plugins).")
+    @Comment("To disable use -1")
+    public int maxSignLineLength = 80;
+
     @Comment("Configuration of book limits.")
     @Comment("Setting these values prevent players from using NBT overflow exploits.")
     @Comment("See also nbt-read-limiter, maybe you don't have to change these values.")
-- 
2.36.0.windows.1

