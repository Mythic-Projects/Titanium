From 3ba4086a8be263d7f1c69d20f544e99ee9200a50 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 22 Jun 2022 08:24:59 +0200
Subject: [PATCH] Fix Ion CannonTracker with Async entity tracking


diff --git a/src/main/java/me/suicidalkids/ion/visuals/CannonTrackerEntry.java b/src/main/java/me/suicidalkids/ion/visuals/CannonTrackerEntry.java
index 32e5a1945..abad942d9 100644
--- a/src/main/java/me/suicidalkids/ion/visuals/CannonTrackerEntry.java
+++ b/src/main/java/me/suicidalkids/ion/visuals/CannonTrackerEntry.java
@@ -1,6 +1,5 @@
 package me.suicidalkids.ion.visuals;
 
-import java.util.ArrayList;
 import net.minecraft.server.*;
 
 import java.util.List;
@@ -9,7 +8,7 @@ import java.util.List;
  * This is a custom entity tracker made for the cannoning entities tnt and sand.
  * The goal behind this is to reduce packets and logic without hiding entities.
  * It may not completely replicate the original behavior, but it should make up
- * for that with it's advantages.
+ * for that with its advantages.
  */
 public class CannonTrackerEntry extends EntityTrackerEntry {
 
@@ -23,6 +22,7 @@ public class CannonTrackerEntry extends EntityTrackerEntry {
 
     public CannonTrackerEntry(EntityTracker entityTracker, Entity entity, int i, int j, boolean flag) {
         super(entityTracker, entity, i, j, flag);
+        this.tracker = entity;
         this.movingX = entity.motX != 0.0;
         this.movingY = true;
         this.movingZ = entity.motZ != 0.0;
@@ -37,14 +37,15 @@ public class CannonTrackerEntry extends EntityTrackerEntry {
         boolean motionY = this.tracker.motY != 0.0;
         boolean motionZ = this.tracker.motZ != 0.0;
 
-        // This tracked entities motion has changed or an explosion has occurred, update it!
+        // This tracked entities motion has changed or an explosion has occurred, update
+        // it!
         if (!this.tracker.ai && motionX == movingX && motionY == movingY && motionZ == movingZ) {
             return;
         }
 
         // This entity has moved 4 blocks since the last update, search for players
         if (this.tracker.e(updateX, updateY, updateZ) > 16.0D) {
-            //this.scanPlayers(list); // Nacho - Async entity tracker
+            // this.scanPlayers(list);
             this.updateX = this.tracker.locX;
             this.updateY = this.tracker.locY;
             this.updateZ = this.tracker.locZ;
@@ -70,7 +71,8 @@ public class CannonTrackerEntry extends EntityTrackerEntry {
         }
 
         // Only update location on movement
-        if (this.tracker.lastX != this.tracker.locX || this.tracker.lastY != this.tracker.locY || this.tracker.lastZ != this.tracker.locZ) {
+        if (this.tracker.lastX != this.tracker.locX || this.tracker.lastY != this.tracker.locY
+                || this.tracker.lastZ != this.tracker.locZ) {
             this.broadcast(new PacketPlayOutEntityTeleport(this.tracker));
         }
 
@@ -81,28 +83,40 @@ public class CannonTrackerEntry extends EntityTrackerEntry {
     public void updatePlayer(EntityPlayer entityplayer) {
         // Check configurable distance as a cube then visible distance.
         if (this.c(entityplayer) && this.tracker.h(entityplayer) < 4096.0D) {
-            if (this.tracker instanceof EntityPlayer && withinNoTrack()) return; // Nacho - Async entity tracker
-            if (this.trackedPlayers.contains(entityplayer) || (!this.e(entityplayer) && !this.tracker.attachedToPlayer)) {
+            if (this.tracker instanceof EntityPlayer && withinNoTrack()) {
+                return;
+            }
+            if (this.trackedPlayers.contains(entityplayer)
+                    || (!this.e(entityplayer) && !this.tracker.attachedToPlayer)) {
                 return;
             }
 
-            //entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId())); // Nacho - Async entity tracker
+            // entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
 
             this.trackedPlayerMap.put(entityplayer, true); // Paper
-            this.trackedPlayers.add(entityplayer); // Nacho - Async entity tracker
-            Packet packet = this.createPacket(); // IonSpigot
-            if (packet == null) return; // IonSpigot - If it's null don't update the client!
+            //this.trackedPlayers.add(entityplayer);
+
+            // WindSpigot - fix cannon tracker
+            //this.trackedPlayers = this.trackedPlayerMap.keySet();
+
+            Packet<?> packet = this.c(); // IonSpigot
+            if (packet == null) {
+                return; // IonSpigot - If it's null don't update the client!
+            }
 
             entityplayer.playerConnection.sendPacket(packet);
 
             if (this.tracker.getCustomNameVisible()) {
-                entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityMetadata(this.tracker.getId(), this.tracker.getDataWatcher(), true));
+                entityplayer.playerConnection.sendPacket(
+                        new PacketPlayOutEntityMetadata(this.tracker.getId(), this.tracker.getDataWatcher(), true));
             }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityVelocity(this.tracker.getId(), this.tracker.motX, this.tracker.motY, this.tracker.motZ));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityVelocity(this.tracker.getId(),
+                    this.tracker.motX, this.tracker.motY, this.tracker.motZ));
 
             if (this.tracker.vehicle != null) {
-                entityplayer.playerConnection.sendPacket(new PacketPlayOutAttachEntity(0, this.tracker, this.tracker.vehicle));
+                entityplayer.playerConnection
+                        .sendPacket(new PacketPlayOutAttachEntity(0, this.tracker, this.tracker.vehicle));
             }
         } else if (this.trackedPlayers.contains(entityplayer)) {
             this.trackedPlayers.remove(entityplayer);
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 4bf441d7d..1b70d8a44 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -139,9 +139,14 @@ public class EntityTrackerEntry {
     }
 
     protected void addNearPlayers(boolean updateCooldown) {
-        if (this.withinNoTrack) return;
-        if (updateCooldown) this.addRemoveCooldown = addRemoveRate;
-        this.tracker.world.playerMap.forEachNearby(this.tracker.locX, this.tracker.locY, this.tracker.locZ, this.getRange(), false, addNearPlayersConsumer);
+        if (this.withinNoTrack) {
+            return;
+        }
+        if (updateCooldown) {
+            this.addRemoveCooldown = addRemoveRate;
+        }
+        this.tracker.world.playerMap.forEachNearby(this.tracker.locX, this.tracker.locY, this.tracker.locZ,
+                this.getRange(), false, addNearPlayersConsumer);
     }
 
     protected boolean withinNoTrack() {
@@ -149,7 +154,9 @@ public class EntityTrackerEntry {
     }
 
     protected boolean withinNoTrack(Entity entity) {
-        if (!(entity instanceof EntityPlayer)) return false; // ensure all non-players are always tracked
+        if (!(entity instanceof EntityPlayer)) {
+            return false; // ensure all non-players are always tracked
+        }
         double xDistSqrd = entity.locX * entity.locX;
         double zDistSqrd = entity.locZ * entity.locZ;
 
@@ -161,7 +168,7 @@ public class EntityTrackerEntry {
 
         @Override
         public void accept(EntityPlayer entityPlayer) {
-            updatePlayer(entityPlayer);
+             updatePlayer(entityPlayer);
         }
     };
     // Nacho end
-- 
2.36.0.windows.1

