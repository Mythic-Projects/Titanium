From a4c22cfc40afd0e33c0bdf8f77bb186b6f81ebf4 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Fri, 29 Apr 2022 17:26:55 +0200
Subject: [PATCH] Use okaeri-configs for configuration


diff --git a/pom.xml b/pom.xml
index 91916e15..847e0427 100644
--- a/pom.xml
+++ b/pom.xml
@@ -85,6 +85,16 @@
             <type>jar</type>
             <scope>compile</scope>
         </dependency>
+        <dependency>
+            <groupId>eu.okaeri</groupId>
+            <artifactId>okaeri-configs-yaml-bukkit</artifactId>
+            <version>4.0.0-beta18</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.okaeri</groupId>
+            <artifactId>okaeri-configs-serdes-commons</artifactId>
+            <version>4.0.0-beta18</version>
+        </dependency>
         <!-- testing -->
         <dependency>
             <groupId>junit</groupId>
diff --git a/src/main/java/app/ashcon/sportpaper/server/KnockbackModificationCommand.java b/src/main/java/app/ashcon/sportpaper/server/KnockbackModificationCommand.java
index 142f4268..4dc4a626 100644
--- a/src/main/java/app/ashcon/sportpaper/server/KnockbackModificationCommand.java
+++ b/src/main/java/app/ashcon/sportpaper/server/KnockbackModificationCommand.java
@@ -1,11 +1,12 @@
 package app.ashcon.sportpaper.server;

 import com.google.common.collect.ImmutableList;
+import net.titanium.config.PaperConfig;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
-import org.github.paperspigot.PaperSpigotConfig;

 import java.util.ArrayList;
 import java.util.List;
@@ -46,70 +47,72 @@ public class KnockbackModificationCommand extends Command {


         try {
+            PaperConfig.Knockback knockbackConfig = TitaniumConfig.get().paper.knockback;
             switch (args[0].toLowerCase()) {
                 case "friction": {
-                    double oldVal = PaperSpigotConfig.knockbackFriction;
+                    double oldVal = knockbackConfig.friction;
                     double newVal = parseValue(args);
-                    PaperSpigotConfig.knockbackFriction = newVal;
+                    knockbackConfig.friction = newVal;
                     updated(sender, "friction", oldVal, newVal);
                     break;
                 }
                 case "horizontal": {
-                    double oldVal = PaperSpigotConfig.knockbackHorizontal;
+                    double oldVal =knockbackConfig.horizontal;
                     double newVal = parseValue(args);
-                    PaperSpigotConfig.knockbackHorizontal = newVal;
+                    knockbackConfig.horizontal = newVal;
                     updated(sender, "horizontal knockback", oldVal, newVal);
                     break;
                 }
                 case "vertical": {
-                    double oldVal = PaperSpigotConfig.knockbackVertical;
+                    double oldVal = knockbackConfig.vertical;
                     double newVal = parseValue(args);
-                    PaperSpigotConfig.knockbackVertical = newVal;
+                    knockbackConfig.vertical = newVal;
                     updated(sender, "vertical knockback", oldVal, newVal);
                     break;
                 }
                 case "vertical-limit": {
-                    double oldVal = PaperSpigotConfig.knockbackVerticalLimit;
+                    double oldVal = knockbackConfig.verticalLimit;
                     double newVal = parseValue(args);
-                    PaperSpigotConfig.knockbackVerticalLimit = newVal;
+                    knockbackConfig.verticalLimit = newVal;
                     updated(sender, "vertical limit", oldVal, newVal);
                     break;
                 }
                 case "extra-horizontal": {
-                    double oldVal = PaperSpigotConfig.knockbackExtraHorizontal;
+                    double oldVal = knockbackConfig.extraHorizontal;
                     double newVal = parseValue(args);
-                    PaperSpigotConfig.knockbackExtraHorizontal = newVal;
+                    knockbackConfig.extraHorizontal = newVal;
                     updated(sender, "horizontal (extra)", oldVal, newVal);
                     break;
                 }
                 case "extra-vertical": {
-                    double oldVal = PaperSpigotConfig.knockbackExtraVertical;
+                    double oldVal = knockbackConfig.extraVertical;
                     double newVal = parseValue(args);
-                    PaperSpigotConfig.knockbackExtraVertical = newVal;
+                    knockbackConfig.extraVertical = newVal;
                     updated(sender, "vertical (extra)", oldVal, newVal);
                     break;
                 }
                 case "reset":
-                    PaperSpigotConfig.knockbackFriction = knockbackFriction;
-                    PaperSpigotConfig.knockbackHorizontal = knockbackHorizontal;
-                    PaperSpigotConfig.knockbackVertical = knockbackVertical;
-                    PaperSpigotConfig.knockbackVerticalLimit = knockbackVerticalLimit;
-                    PaperSpigotConfig.knockbackExtraHorizontal = knockbackExtraHorizontal;
-                    PaperSpigotConfig.knockbackExtraVertical = knockbackExtraVertical;
+                    knockbackConfig.friction = knockbackFriction;
+                    knockbackConfig.horizontal = knockbackHorizontal;
+                    knockbackConfig.vertical = knockbackVertical;
+                    knockbackConfig.verticalLimit = knockbackVerticalLimit;
+                    knockbackConfig.extraHorizontal = knockbackExtraHorizontal;
+                    knockbackConfig.extraVertical = knockbackExtraVertical;
                     sender.sendMessage(ChatColor.GREEN + "Knockback config reset to values from file.");
                     break;
                 case "show":
                     sender.sendMessage(ChatColor.GOLD + "Knockback Configuration");
-                    sendValue(sender, "Friction", PaperSpigotConfig.knockbackFriction);
-                    sendValue(sender, "Horizontal Knockback", PaperSpigotConfig.knockbackHorizontal);
-                    sendValue(sender, "Vertical Knockback", PaperSpigotConfig.knockbackVertical);
-                    sendValue(sender, "Vertical Limit", PaperSpigotConfig.knockbackVerticalLimit);
-                    sendValue(sender, "Horizontal (Extra)", PaperSpigotConfig.knockbackExtraHorizontal);
-                    sendValue(sender, "Vertical (Extra)", PaperSpigotConfig.knockbackExtraVertical);
+                    sendValue(sender, "Friction", knockbackConfig.friction);
+                    sendValue(sender, "Horizontal Knockback", knockbackConfig.horizontal);
+                    sendValue(sender, "Vertical Knockback", knockbackConfig.vertical);
+                    sendValue(sender, "Vertical Limit", knockbackConfig.verticalLimit);
+                    sendValue(sender, "Horizontal (Extra)", knockbackConfig.extraHorizontal);
+                    sendValue(sender, "Vertical (Extra)", knockbackConfig.extraVertical);
                     break;
                 default:
                     sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             }
+            TitaniumConfig.saveConfig();
         } catch (RuntimeException ex) {
             sender.sendMessage(ChatColor.RED + ex.getMessage());
         }
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 28da1365..bca2c0d3 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -278,7 +278,7 @@ public abstract class BiomeBase {
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
         for (int l1 = 255; l1 >= 0; --l1) {
-            if (l1 <= (world.paperSpigotConfig.generateFlatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
+            if (l1 <= (world.paperConfigTitanium.generatorSettings.flatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
                 chunksnapshot.a(k1, l1, j1, Blocks.BEDROCK.getBlockData());
             } else {
                 IBlockData iblockdata2 = chunksnapshot.a(k1, l1, j1);
diff --git a/src/main/java/net/minecraft/server/BiomeMesa.java b/src/main/java/net/minecraft/server/BiomeMesa.java
index 65cd706a..e9ec299f 100644
--- a/src/main/java/net/minecraft/server/BiomeMesa.java
+++ b/src/main/java/net/minecraft/server/BiomeMesa.java
@@ -94,7 +94,7 @@ public class BiomeMesa extends BiomeBase {
                 chunksnapshot.a(l, l1, k, Blocks.STONE.getBlockData());
             }
 
-            if (l1 <= (world.paperSpigotConfig.generateFlatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
+            if (l1 <= (world.paperConfigTitanium.generatorSettings.flatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
                 chunksnapshot.a(l, l1, k, Blocks.BEDROCK.getBlockData());
             } else {
                 IBlockData iblockdata2 = chunksnapshot.a(l, l1, k);
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 874af8a3..cf649e7a 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -582,7 +582,7 @@ public class Block {

     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity) {
         entityhuman.b(StatisticList.MINE_BLOCK_COUNT[getId(this)]);
-        entityhuman.applyExhaustion(world.paperSpigotConfig.blockBreakExhaustion); // PaperSpigot - Configurable block break exhaustion
+        entityhuman.applyExhaustion(world.paperConfigTitanium.playerExhaustion.blockBreak); // PaperSpigot - Configurable block break exhaustion
         if (this.I() && EnchantmentManager.hasSilkTouchEnchantment(entityhuman)) {
             ItemStack itemstack = this.i(iblockdata);
 
diff --git a/src/main/java/net/minecraft/server/BlockCactus.java b/src/main/java/net/minecraft/server/BlockCactus.java
index ddc21351..142ae5c4 100644
--- a/src/main/java/net/minecraft/server/BlockCactus.java
+++ b/src/main/java/net/minecraft/server/BlockCactus.java
@@ -26,10 +26,10 @@ public class BlockCactus extends Block {
                 ;
             }
 
-            if (i < world.paperSpigotConfig.cactusMaxHeight) { // PaperSpigot - Configurable max growth height for cactus blocks) {
+            if (i < world.paperConfigTitanium.maxGrowthHeight.cactus) { // PaperSpigot - Configurable max growth height for cactus blocks) {
                 int j = ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
 
-                if (j >= (byte) range(3, (world.growthOdds / world.spigotConfig.cactusModifier * 15) + 0.5F, 15)) { // Spigot
+                if (j >= (byte) range(3, (world.growthOdds /  world.spigotConfigTitanium.growth.cactusModifier * 15) + 0.5F, 15)) { // Spigot
                     // world.setTypeUpdate(blockposition1, this.getBlockData()); // CraftBukkit
                     IBlockData iblockdata1 = iblockdata.set(BlockCactus.AGE, Integer.valueOf(0));

diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index 26160dbe..393e6401 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -417,7 +417,7 @@ public class BlockChest extends BlockContainer {

     private boolean p(World world, BlockPosition blockposition) {
         // PaperSpigot start - Option to disable chest's cat detection (Performance++)
-        if (world.paperSpigotConfig.disableChestCatDetection) {
+        if (world.paperConfigTitanium.gameMechanics.disableChestCatDetections) {
             return false;
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index f6989962..06254ebb 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -32,7 +32,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
             if (i < 7) {
                 float f = a((Block) this, world, blockposition);
 
-                if (random.nextInt((int) (world.growthOdds / world.spigotConfig.wheatModifier * (25.0F / f)) + 1) == 0) { // Spigot                    // CraftBukkit start
+                if (random.nextInt((int) (world.growthOdds /  world.spigotConfigTitanium.growth.wheatModifier * (25.0F / f)) + 1) == 0) { // Spigot                    // CraftBukkit start
                     IBlockData data = iblockdata.set(AGE, Integer.valueOf(i + 1));
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
                     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index eaf9154c..c17f7482 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -73,7 +73,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigTitanium.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.EAST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.SOUTH), this);
@@ -181,7 +181,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
     public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.N) {
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigTitanium.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.EAST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.NORTH), this);
diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index 2c91d6d5..d7af2895 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -74,7 +74,7 @@ public class BlockFlowing extends BlockFluids {
                 }
             }
 
-            if (!world.paperSpigotConfig.fastDrainLava && this.material == Material.LAVA && i < 8 && i1 < 8 && i1 > i && random.nextInt(4) != 0) { // PaperSpigot
+            if (!world.paperConfigTitanium.fastDrain.lava && this.material == Material.LAVA && i < 8 && i1 < 8 && i1 > i && random.nextInt(4) != 0) { // PaperSpigot
                 j *= 4;
             }
 
@@ -94,7 +94,7 @@ public class BlockFlowing extends BlockFluids {
                     world.d(blockposition.up(), this);
                     world.d(blockposition.north(), this);
                     world.d(blockposition.south(), this);
-                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                    world.spigotConfigTitanium.getAntiXray().updateNearbyBlocks(world, blockposition); // Spigot
                     // PaperSpigot end
                 }
             }
@@ -287,14 +287,14 @@ public class BlockFlowing extends BlockFluids {
      */
     public int getFlowSpeed(World world, BlockPosition blockposition) {
         if (this.getMaterial() == Material.LAVA) {
-            return world.worldProvider.o() ? world.paperSpigotConfig.lavaFlowSpeedNether : world.paperSpigotConfig.lavaFlowSpeedNormal;
+            return world.worldProvider.o() ? world.paperConfigTitanium.lavaFlowSpeed.nether : world.paperConfigTitanium.lavaFlowSpeed.normal;
         }
         if (this.getMaterial() == Material.WATER && (
                 world.getType(blockposition.north(1)).getBlock().getMaterial() == Material.LAVA ||
                         world.getType(blockposition.south(1)).getBlock().getMaterial() == Material.LAVA ||
                         world.getType(blockposition.west(1)).getBlock().getMaterial() == Material.LAVA ||
                         world.getType(blockposition.east(1)).getBlock().getMaterial() == Material.LAVA)) {
-            return world.paperSpigotConfig.waterOverLavaFlowSpeed;
+            return world.paperConfigTitanium.waterOverLavaFlowSpeed;
         }
         return super.a(world);
     }
@@ -314,7 +314,7 @@ public class BlockFlowing extends BlockFluids {
         boolean result = false;
         int data = getData(world, position);
         if (this.material == Material.WATER) {
-            if (world.paperSpigotConfig.fastDrainWater) {
+            if (world.paperConfigTitanium.fastDrain.water) {
                 result = true;
                 if (getData(world, position.down()) < 0) {
                     result = false;
@@ -329,7 +329,7 @@ public class BlockFlowing extends BlockFluids {
                 }
             }
         } else if (this.material == Material.LAVA) {
-            if (world.paperSpigotConfig.fastDrainLava) {
+            if (world.paperConfigTitanium.fastDrain.lava) {
                 result = true;
                 if (getData(world, position.down()) < 0 || world.getType(position.up()).getBlock().getMaterial() != Material.AIR) {
                     result = false;
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index d68f1a2d..8ef1ae7c 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -28,7 +28,7 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (world.paperSpigotConfig.grassUpdateRate != 1 && (world.paperSpigotConfig.grassUpdateRate < 1 || (MinecraftServer.currentTick + blockposition.hashCode()) % world.paperSpigotConfig.grassUpdateRate != 0)) { return; } // Paper
+        if (world.paperConfigTitanium.grassSpreadTickRate != 1 && (world.paperConfigTitanium.grassSpreadTickRate < 1 || (MinecraftServer.currentTick + blockposition.hashCode()) % world.paperConfigTitanium.grassSpreadTickRate != 0)) { return; } // Paper
         if (!world.isClientSide) {
             int lightLevel = -1; // Paper
             if (world.getLightLevel(blockposition.up()) < 4 && (lightLevel = world.getType(blockposition.up()).getBlock().p()) > 2) {
diff --git a/src/main/java/net/minecraft/server/BlockMushroom.java b/src/main/java/net/minecraft/server/BlockMushroom.java
index 7cf7a088..6e6da9f5 100644
--- a/src/main/java/net/minecraft/server/BlockMushroom.java
+++ b/src/main/java/net/minecraft/server/BlockMushroom.java
@@ -20,7 +20,7 @@ public class BlockMushroom extends BlockPlant implements IBlockFragilePlantEleme
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         final int sourceX = blockposition.getX(), sourceY = blockposition.getY(), sourceZ = blockposition.getZ(); // CraftBukkit
-        if (random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
+        if (random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfigTitanium.growth.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
             int i = 5;
             boolean flag = true;
             Iterator iterator = BlockPosition.b(blockposition.a(-4, -1, -4), blockposition.a(4, 1, 4)).iterator();
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index 374f06ca..830f6a8f 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -27,7 +27,7 @@ public class BlockNetherWart extends BlockPlant {
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         int i = ((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue();
 
-        if (i < 3 && random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.wartModifier * 10)) == 0) { // Spigot
+        if (i < 3 && random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfigTitanium.growth.netherWartModifier * 10)) == 0) { // Spigot
             iblockdata = iblockdata.set(BlockNetherWart.AGE, Integer.valueOf(i + 1));
             // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 170f7763..e8f183e4 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -18,7 +18,7 @@ public class BlockPortal extends BlockHalfTransparent {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
-        if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.worldProvider.d() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
+        if (world.spigotConfigTitanium.enableZombiePigmenPortalSpawns && world.worldProvider.d() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
             int i = blockposition.getY();
 
             BlockPosition blockposition1;
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index b105b6a6..d0c95850 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -53,7 +53,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigTitanium.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.DOWN), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.UP), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
@@ -78,7 +78,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigTitanium.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.DOWN), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.UP), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index 532188e2..0d2abde6 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -143,7 +143,7 @@ public class BlockRedstoneWire extends Block {
 
             this.R.add(blockposition);
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigTitanium.fixCannons) {
                 this.R.add(blockposition.shift(EnumDirection.WEST));
                 this.R.add(blockposition.shift(EnumDirection.EAST));
                 this.R.add(blockposition.shift(EnumDirection.DOWN));
@@ -170,7 +170,7 @@ public class BlockRedstoneWire extends Block {
         if (world.getType(blockposition).getBlock() == this) {
             world.applyPhysics(blockposition, this);
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigTitanium.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.EAST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.NORTH), this);
diff --git a/src/main/java/net/minecraft/server/BlockReed.java b/src/main/java/net/minecraft/server/BlockReed.java
index 337f2c40..c5f004b5 100644
--- a/src/main/java/net/minecraft/server/BlockReed.java
+++ b/src/main/java/net/minecraft/server/BlockReed.java
@@ -25,10 +25,10 @@ public class BlockReed extends Block {
                     ;
                 }
 
-                if (i < world.paperSpigotConfig.reedMaxHeight) { // PaperSpigot - Configurable max growth height for reed blocks) {
+                if (i < world.paperConfigTitanium.maxGrowthHeight.reeds) { // PaperSpigot - Configurable max growth height for reed blocks) {
                     int j = ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
 
-                    if (j >= (byte) range(3, (world.growthOdds / world.spigotConfig.caneModifier * 15) + 0.5F, 15)) { // Spigot
+                    if (j >= (byte) range(3, (world.growthOdds / world.spigotConfigTitanium.growth.caneModifier * 15) + 0.5F, 15)) { // Spigot
                         // CraftBukkit start
                         // world.setTypeUpdate(blockposition.up(), this.getBlockData()); // CraftBukkit
                         BlockPosition upPos = blockposition.up();
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index 304005ed..12e78b6c 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -32,7 +32,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
             super.b(world, blockposition, iblockdata, random);
-            if (world.isLightLevel(blockposition.up(), 9) && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfig.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) {
+            if (world.isLightLevel(blockposition.up(), 9) && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfigTitanium.growth.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) {
                 // CraftBukkit start
                 world.captureTreeGeneration = true;
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index 8cfc6532..3df19f77 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -55,7 +55,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
         if (world.isLightLevel(blockposition.up(), 9)) {
             float f = BlockCrops.a((Block) this, world, blockposition);
 
-            if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
+            if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfigTitanium.growth.pumpkinModifier : world.spigotConfigTitanium.growth.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
                 int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
 
                 if (i < 7) {
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index 9fc46d83..c633bd7a 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -35,7 +35,7 @@ public class BlockTNT extends Block {
             org.bukkit.Location loc = explosion.source instanceof EntityTNTPrimed ? ((EntityTNTPrimed) explosion.source).sourceLoc : new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()); // PaperSpigot
             // PaperSpigot start - Fix cannons
             double y = blockposition.getY();
-            if (!world.paperSpigotConfig.fixCannons) y += 0.5;
+            if (!world.paperConfigTitanium.fixCannons) y += 0.5;
             EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(loc, world, (double) ((float) blockposition.getX() + 0.5F), y, (double) ((float) blockposition.getZ() + 0.5F), explosion.getSource()); // PaperSpigot - add loc
             // PaperSpigot end
 
@@ -69,7 +69,7 @@ public class BlockTNT extends Block {
                 org.bukkit.Location loc = new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()); // PaperSpigot
                 // PaperSpigot start - Fix cannons
                 double y = blockposition.getY();
-                if (!world.paperSpigotConfig.fixCannons) y += 0.5;
+                if (!world.paperConfigTitanium.fixCannons) y += 0.5;
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(loc, world, (double) ((float) blockposition.getX() + 0.5F), y, (double) ((float) blockposition.getZ() + 0.5F), entityliving); // PaperSpigot - add loc
                 // PaperSpigot end
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 9f573ce3..a3c1d08a 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -64,7 +64,7 @@ public class Chunk {
     private int emptySectionBits;
 
     public PacketPlayOutMapChunk.ChunkMap getChunkMap(boolean groundUpContinuous, int primaryBitMask) {
-        if (!world.paperSpigotConfig.cacheChunkMaps || !groundUpContinuous || (primaryBitMask != 0 && primaryBitMask != '\uffff')) {
+        if (!world.paperConfigTitanium.cacheChunkMaps || !groundUpContinuous || (primaryBitMask != 0 && primaryBitMask != '\uffff')) {
             return PacketPlayOutMapChunk.a(this, groundUpContinuous, !world.worldProvider.o(), primaryBitMask);
         }
 
@@ -872,7 +872,7 @@ public class Chunk {
             this.tileEntities.put(blockposition, tileentity);
             // CraftBukkit start
             // PaperSpigot start - Remove invalid mob spawner tile entities
-        } else if (this.world.paperSpigotConfig.removeInvalidMobSpawnerTEs && tileentity instanceof TileEntityMobSpawner &&
+        } else if (this.world.paperConfigTitanium.removeInvalidMobSpawnerTileEntities && tileentity instanceof TileEntityMobSpawner &&
                 org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(getType(blockposition)) != org.bukkit.Material.MOB_SPAWNER) {
             this.tileEntities.remove(blockposition);
             // PaperSpigot end
@@ -886,7 +886,7 @@ public class Chunk {
             e.printStackTrace();
             ServerInternalException.reportInternalException(e);
 
-            if (this.world.paperSpigotConfig.removeCorruptTEs) {
+            if (this.world.paperConfigTitanium.removeInvalidMobSpawnerTileEntities) {
                 this.removeTileEntity(tileentity.getPosition());
                 this.markDirty();
                 org.bukkit.Bukkit.getLogger().info("Removing corrupt tile entity");
@@ -1069,7 +1069,7 @@ public class Chunk {
         }
 
         // This !flag section should say if s(isModified) or t(hasEntities), then check auto save
-        return ((this.q || this.r) && this.world.getTime() >= this.lastSaved + world.paperSpigotConfig.autoSavePeriod); // Paper - Make world configurable and incremental
+        return ((this.q || this.r) && this.world.getTime() >= this.lastSaved + world.paperConfigTitanium.autoSaveInterval); // Paper - Make world configurable and incremental
     }
 
     public Random a(long i) {
@@ -1166,7 +1166,7 @@ public class Chunk {
         }
 
         this.p = true;
-        if (!this.lit && this.done && this.world.spigotConfig.randomLightUpdates) { // Spigot - also use random light updates setting to determine if we should relight
+        if (!this.lit && this.done && world.spigotConfigTitanium.randomLightUpdates) { // Spigot - also use random light updates setting to determine if we should relight
             this.n();
         }
 
@@ -1187,7 +1187,7 @@ public class Chunk {
      * PaperSpigot - Recheck gaps asynchronously.
      */
     public void recheckGaps(final boolean isClientSide) {
-        if (!world.paperSpigotConfig.useAsyncLighting) {
+        if (!world.paperConfigTitanium.useAsyncLightning) {
             this.h(isClientSide);
             return;
         }
@@ -1490,7 +1490,7 @@ public class Chunk {
     }
 
     public long w() {
-        return world.paperSpigotConfig.useInhabitedTime ? this.u : 0; // Paper
+        return world.paperConfigTitanium.useChunkInhabitedTimer ? this.u : 0; // Paper
     }
 
     public void c(long i) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index b939f47a..381a9f8d 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -25,7 +25,7 @@ public class ChunkProviderFlat implements IChunkProvider {
         if (flag) {
             Map map = this.d.b();
 
-            if (map.containsKey("village") && world.paperSpigotConfig.generateVillage) { // PaperSpigot
+            if (map.containsKey("village") && world.paperConfigTitanium.generatorSettings.village) { // PaperSpigot
                 Map map1 = (Map) map.get("village");
 
                 if (!map1.containsKey("size")) {
@@ -35,19 +35,19 @@ public class ChunkProviderFlat implements IChunkProvider {
                 this.e.add(new WorldGenVillage(map1));
             }
 
-            if (map.containsKey("biome_1") && world.paperSpigotConfig.generateTemple) { // PaperSpigot
+            if (map.containsKey("biome_1") && world.paperConfigTitanium.generatorSettings.temple) { // PaperSpigot
                 this.e.add(new WorldGenLargeFeature((Map) map.get("biome_1")));
             }
 
-            if (map.containsKey("mineshaft") && world.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+            if (map.containsKey("mineshaft") && world.paperConfigTitanium.generatorSettings.mineshaft) { // PaperSpigot
                 this.e.add(new WorldGenMineshaft((Map) map.get("mineshaft")));
             }
 
-            if (map.containsKey("stronghold") && world.paperSpigotConfig.generateStronghold) { // PaperSpigot
+            if (map.containsKey("stronghold") && world.paperConfigTitanium.generatorSettings.stronghold) { // PaperSpigot
                 this.e.add(new WorldGenStronghold((Map) map.get("stronghold")));
             }
 
-            if (map.containsKey("oceanmonument") && world.paperSpigotConfig.generateMonument) { // PaperSpigot
+            if (map.containsKey("oceanmonument") && world.paperConfigTitanium.generatorSettings.monument) { // PaperSpigot
                 this.e.add(new WorldGenMonument((Map) map.get("oceanmonument")));
             }
         }
@@ -60,7 +60,7 @@ public class ChunkProviderFlat implements IChunkProvider {
             this.i = new WorldGenLakes(Blocks.LAVA);
         }
 
-        this.g = world.paperSpigotConfig.generateDungeon && this.d.b().containsKey("dungeon");  // PaperSpigot
+        this.g = world.paperConfigTitanium.generatorSettings.dungeon && this.d.b().containsKey("dungeon");  // PaperSpigot
         int j = 0;
         int k = 0;
         boolean flag1 = true;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index ad464d32..1c08afa5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -156,31 +156,31 @@ public class ChunkProviderGenerate implements IChunkProvider {
         this.a(i, j, chunksnapshot);
         this.B = this.m.getWorldChunkManager().getBiomeBlock(this.B, i * 16, j * 16, 16, 16);
         this.a(i, j, chunksnapshot, this.B);
-        if (this.r.r && this.m.paperSpigotConfig.generateCaves) { // PaperSpigot
+        if (this.r.r && this.m.paperConfigTitanium.generatorSettings.caves) { // PaperSpigot
             this.u.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.z && this.m.paperSpigotConfig.generateCanyon) { // PaperSpigot
+        if (this.r.z && this.m.paperConfigTitanium.generatorSettings.canyon) { // PaperSpigot
             this.z.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+        if (this.r.w && this.n && this.m.paperConfigTitanium.generatorSettings.mineshaft) { // PaperSpigot
             this.x.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
+        if (this.r.v && this.n && this.m.paperConfigTitanium.generatorSettings.village) { // PaperSpigot
             this.w.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
+        if (this.r.u && this.n && this.m.paperConfigTitanium.generatorSettings.stronghold) { // PaperSpigot
             this.v.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
+        if (this.r.x && this.n && this.m.paperConfigTitanium.generatorSettings.temple) { // PaperSpigot
             this.y.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
+        if (this.r.y && this.n && this.m.paperConfigTitanium.generatorSettings.monument) { // PaperSpigot
             this.A.a(this, this.m, i, j, chunksnapshot);
         }
 
@@ -319,23 +319,23 @@ public class ChunkProviderGenerate implements IChunkProvider {
         boolean flag = false;
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
 
-        if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+        if (this.r.w && this.n && this.m.paperConfigTitanium.generatorSettings.mineshaft) { // PaperSpigot
             this.x.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
+        if (this.r.v && this.n && this.m.paperConfigTitanium.generatorSettings.mineshaft) { // PaperSpigot
             flag = this.w.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
+        if (this.r.u && this.n && this.m.paperConfigTitanium.generatorSettings.stronghold) { // PaperSpigot
             this.v.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
+        if (this.r.x && this.n && this.m.paperConfigTitanium.generatorSettings.temple) { // PaperSpigot
             this.y.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
+        if (this.r.y && this.n && this.m.paperConfigTitanium.generatorSettings.monument) { // PaperSpigot
             this.A.a(this.m, this.h, chunkcoordintpair);
         }
 
@@ -359,7 +359,7 @@ public class ChunkProviderGenerate implements IChunkProvider {
             }
         }
 
-        if (this.r.s && this.m.paperSpigotConfig.generateDungeon) { // PaperSpigot
+        if (this.r.s && this.m.paperConfigTitanium.generatorSettings.dungeon) { // PaperSpigot
             for (k1 = 0; k1 < this.r.t; ++k1) {
                 l1 = this.h.nextInt(16) + 8;
                 i2 = this.h.nextInt(256);
@@ -444,23 +444,23 @@ public class ChunkProviderGenerate implements IChunkProvider {
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+        if (this.r.w && this.n && this.m.paperConfigTitanium.generatorSettings.mineshaft) { // PaperSpigot
             this.x.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
+        if (this.r.v && this.n && this.m.paperConfigTitanium.generatorSettings.village) { // PaperSpigot
             this.w.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
+        if (this.r.u && this.n && this.m.paperConfigTitanium.generatorSettings.stronghold) { // PaperSpigot
             this.v.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
+        if (this.r.x && this.n && this.m.paperConfigTitanium.generatorSettings.temple) { // PaperSpigot
             this.y.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
+        if (this.r.y && this.n && this.m.paperConfigTitanium.generatorSettings.monument) { // PaperSpigot
             this.A.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 0156892a..51538b7c 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -143,8 +143,8 @@ public class ChunkProviderHell implements IChunkProvider {
 
                 for (int l1 = 127; l1 >= 0; --l1) {
                     // PaperSpigot start - Configurable flat bedrock worldgen
-                    if (l1 < 127 - (h.paperSpigotConfig.generateFlatBedrock ? 0 : this.j.nextInt(5)) &&
-                            l1 > (h.paperSpigotConfig.generateFlatBedrock ? 0 : this.j.nextInt(5))) {
+                    if (l1 < 127 - (h.paperConfigTitanium.generatorSettings.flatBedrock ? 0 : this.j.nextInt(5)) &&
+                            l1 > (h.paperConfigTitanium.generatorSettings.flatBedrock ? 0 : this.j.nextInt(5))) {
                     // PaperSpigot end
                         IBlockData iblockdata2 = chunksnapshot.a(i1, l1, l);
 
@@ -201,8 +201,8 @@ public class ChunkProviderHell implements IChunkProvider {
 
         this.a(i, j, chunksnapshot);
         this.b(i, j, chunksnapshot);
-        if (this.h.paperSpigotConfig.generateCaves) this.C.a(this, this.h, i, j, chunksnapshot); // PaperSpigot
-        if (this.i && this.h.paperSpigotConfig.generateFortress) { // PaperSpigot
+        if (this.h.paperConfigTitanium.generatorSettings.caves) this.C.a(this, this.h, i, j, chunksnapshot); // PaperSpigot
+        if (this.i && this.h.paperConfigTitanium.generatorSettings.fortress) { // PaperSpigot
             this.B.a(this, this.h, i, j, chunksnapshot);
         }
 
@@ -387,7 +387,7 @@ public class ChunkProviderHell implements IChunkProvider {
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        if (this.h.paperSpigotConfig.generateFortress) this.B.a(this, this.h, i, j, (ChunkSnapshot) null); // PaperSpigot
+        if (this.h.paperConfigTitanium.generatorSettings.fortress) this.B.a(this, this.h, i, j, (ChunkSnapshot) null); // PaperSpigot
     }
 
     public Chunk getChunkAt(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 02674615..32bd3431 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -78,7 +78,7 @@ public class ChunkProviderServer implements IChunkProvider {
     public void queueUnload(int i, int j) {
         // PaperSpigot start - Asynchronous lighting updates
         Chunk chunk = chunks.get(LongHash.toLong(i, j));
-        if (chunk != null && chunk.world.paperSpigotConfig.useAsyncLighting && (chunk.pendingLightUpdates.get() > 0 || chunk.world.getTime() - chunk.lightUpdateTime < 20)) {
+        if (chunk != null && chunk.world.paperConfigTitanium.useAsyncLightning && (chunk.pendingLightUpdates.get() > 0 || chunk.world.getTime() - chunk.lightUpdateTime < 20)) {
             return;
         }
         // PaperSpigot end
@@ -376,7 +376,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 this.saveChunk(chunk);
                 chunk.f(false);
                 ++i;
-                if (!flag && i >= world.paperSpigotConfig.maxAutoSaveChunksPerTick) { // Spigot - // Paper - Incremental Auto Save - cap max per tick
+                if (!flag && i >= world.paperConfigTitanium.maxAutoSaveChunksPerTick) { // Spigot - // Paper - Incremental Auto Save - cap max per tick
                     return false;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index fc522873..c1b6e3cd 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
+import net.titanium.config.TitaniumConfig;
 
 public class CommandDispatcher extends CommandHandler implements ICommandDispatcher {
 
@@ -100,7 +101,7 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
             }
         }
 
-        if (icommandlistener != minecraftserver && minecraftserver.worldServer[0].getGameRules().getBoolean("logAdminCommands") && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
+        if (icommandlistener != minecraftserver && minecraftserver.worldServer[0].getGameRules().getBoolean("logAdminCommands") && !TitaniumConfig.get().spigot.commands.silentCommandblockConsole) { // Spigot
             minecraftserver.sendMessage(chatmessage);
         }
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 79a53cc4..2c9df045 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -12,6 +12,7 @@ import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -176,13 +177,14 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             // Spigot start
             this.a((PlayerList) (new DedicatedPlayerList(this)));
             // Spigot end
-            SharedConfig.registerCommands();
+            TitaniumConfig.get().registerCommands();
+            //SharedConfig.registerCommands(); Titanium
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
             DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
-        if (!org.spigotmc.SpigotConfig.lateBind) {
+        if (!TitaniumConfig.get().spigot.settings.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
@@ -203,7 +205,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
                 // Spigot start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                if (TitaniumConfig.get().spigot.settings.bungeecord) {
                     DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
                     DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
                 } else {
@@ -278,7 +280,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(); // CraftBukkit
                 }
 
-        if (org.spigotmc.SpigotConfig.lateBind) {
+        if (TitaniumConfig.get().spigot.settings.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index 9577483d..8997d541 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -526,7 +526,7 @@ public class DispenserRegistry {
 
                 // PaperSpigot start - Fix cannons
                 double y = blockposition.getY();
-                if (!world.paperSpigotConfig.fixCannons) y += 0.5;
+                if (!world.paperConfigTitanium.fixCannons) y += 0.5;
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(block.getLocation(), world, blockposition.getX() + 0.5, blockposition.getY(), blockposition.getZ() + 0.5, (EntityLiving) null);
                 BlockDispenseEntityEvent event = new BlockDispenseEntityEvent(block, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX() + 0.5, y, blockposition.getZ() + 0.5), entitytntprimed.getBukkitEntity());
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 4b655951..8a4fc05c 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -189,7 +189,7 @@ public abstract class Entity implements ICommandListener {
         if (world != null) {
             this.dimension = world.worldProvider.getDimension();
             // Spigot start
-            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, world.spigotConfig);
+            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, world.spigotConfigTitanium);
         } else {
             this.defaultActivationState = false;
         }
@@ -286,7 +286,7 @@ public abstract class Entity implements ICommandListener {
      * PaperSpigot - Checks if the feature is enabled and the entity is above the nether world bedrock height
      */
     private boolean paperNetherCheck() {
-        return this.world.paperSpigotConfig.netherVoidTopDamage && this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.NETHER && this.locY >= 128.0D;
+        return this.world.paperConfigTitanium.netherCeilingVoidDamage && this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.NETHER && this.locY >= 128.0D;
     }
 
     public void K() {
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index dd903aa7..f5d8d59f 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -3,10 +3,10 @@ package net.minecraft.server;
 import java.util.List;
 
 // CraftBukkit start
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerPickupItemEvent;
-import org.github.paperspigot.PaperSpigotConfig;
 import org.github.paperspigot.event.entity.ProjectileCollideEvent;
 // CraftBukkit end
 
@@ -97,7 +97,7 @@ public class EntityArrow extends Entity implements IProjectile {
         this.motX = (double) (-MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F));
         this.motZ = (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F));
         this.motY = (double) (-MathHelper.sin(this.pitch / 180.0F * 3.1415927F));
-        this.shoot(this.motX, this.motY, this.motZ, f * 1.5F, PaperSpigotConfig.includeRandomnessInArrowTrajectory ? 1.0F : 0); // SportPaper
+        this.shoot(this.motX, this.motY, this.motZ, f * 1.5F, TitaniumConfig.get().paper.settings.includeRandomnessInArrowTrajectory ? 1.0F : 0); // SportPaper
     }
 
     protected void h() {
@@ -159,7 +159,7 @@ public class EntityArrow extends Entity implements IProjectile {
 
             if (block == this.g && i == this.h) {
                 ++this.ar;
-                if (this.ar >= world.spigotConfig.arrowDespawnRate) { // Spigot - First int after shooter
+                if (this.ar >= world.spigotConfigTitanium.arrowDespawnRate) { // Spigot - First int after shooter
                     this.die();
                 }
             } else {
@@ -247,7 +247,7 @@ public class EntityArrow extends Entity implements IProjectile {
                     f2 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
                     int k = MathHelper.f((double) f2 * this.damage);
 
-                    if (this.isCritical() && PaperSpigotConfig.includeRandomnessInArrowDamage) { // SportPaper
+                    if (this.isCritical() && TitaniumConfig.get().paper.settings.includeRandomnessInArrowDamage) { // SportPaper
                         k += this.random.nextInt(k / 2 + 2);
                     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 3a6bbe4a..e860038e 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -486,7 +486,7 @@ public class EntityBoat extends Entity {
      * PaperSpigot - Handles boat drops depending on the user's config setting
      */
     public void breakNaturally() {
-        if (this.world.paperSpigotConfig.boatsDropBoats) {
+        if (this.world.paperConfigTitanium.gameMechanics.boatsDropBoats) {
             this.a(Items.BOAT, 1, 0.0F);
         } else {
             for (int k = 0; k < 3; ++k) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index fe54268a..0392a31d 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -582,7 +582,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
-                    if ( world.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > world.spigotConfig.dragonDeathSoundRadius * world.spigotConfig.dragonDeathSoundRadius ) continue; // Spigot
+                    if ( world.spigotConfigTitanium.dragonDeathSoundRadius > 0 && distanceSquared > world.spigotConfigTitanium.dragonDeathSoundRadius * world.spigotConfigTitanium.dragonDeathSoundRadius ) continue; // Spigot
                     if (distanceSquared > viewDistance * viewDistance) {
                         double deltaLength = Math.sqrt(distanceSquared);
                         double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 319c0bc6..80f2c116 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -12,13 +12,13 @@ public class EntityEnderPearl extends EntityProjectile {
 
     public EntityEnderPearl(World world) {
         super(world);
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedEnderPearls; // PaperSpigot
+        this.loadChunks = world.paperConfigTitanium.loadChunks.enderpearls; // PaperSpigot
     }
 
     public EntityEnderPearl(World world, EntityLiving entityliving) {
         super(world, entityliving);
         this.c = entityliving;
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedEnderPearls; // PaperSpigot
+        this.loadChunks = world.paperConfigTitanium.loadChunks.enderpearls; // PaperSpigot
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
@@ -33,7 +33,7 @@ public class EntityEnderPearl extends EntityProjectile {
         }
 
         // PaperSpigot start - Remove entities in unloaded chunks
-        if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedEnderPearls) {
+        if (this.inUnloadedChunk && world.paperConfigTitanium.removeUnloaded.enderpearls) {
             this.die();
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 303d9e44..f5892c45 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -27,7 +27,7 @@ public class EntityFallingBlock extends Entity {
     public EntityFallingBlock(org.bukkit.Location loc, World world) {
         super(world);
         sourceLoc = loc;
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
+        this.loadChunks = world.paperConfigTitanium.loadChunks.fallingBlocks; // PaperSpigot
     }
 
     public EntityFallingBlock(World world, double d0, double d1, double d2, IBlockData iblockdata) {
@@ -48,7 +48,7 @@ public class EntityFallingBlock extends Entity {
         this.lastX = d0;
         this.lastY = d1;
         this.lastZ = d2;
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
+        this.loadChunks = world.paperConfigTitanium.loadChunks.fallingBlocks; // PaperSpigot
     }
 
     protected boolean s_() {
@@ -76,7 +76,7 @@ public class EntityFallingBlock extends Entity {
                 blockposition = new BlockPosition(this);
                 if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), Blocks.AIR, 0).isCancelled()) {
                     this.world.setAir(blockposition);
-                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                    world.spigotConfigTitanium.getAntiXray().updateNearbyBlocks(world, blockposition); // Spigot
                 } else if (!this.world.isClientSide) {
                     this.die();
                     return;
@@ -87,13 +87,13 @@ public class EntityFallingBlock extends Entity {
             this.move(this.motX, this.motY, this.motZ);
 
             // PaperSpigot start - Remove entities in unloaded chunks
-            if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedFallingBlocks) {
+            if (this.inUnloadedChunk && world.paperConfigTitanium.removeUnloaded.fallingBlocks) {
                 this.die();
             }
             // PaperSpigot end
 
             // PaperSpigot start - Drop falling blocks above the specified height
-            if (this.world.paperSpigotConfig.fallingBlockHeightNerf != 0 && this.locY > this.world.paperSpigotConfig.fallingBlockHeightNerf) {
+            if (this.world.paperConfigTitanium.fallingBlockHeightNerf != 0 && this.locY > this.world.paperConfigTitanium.fallingBlockHeightNerf) {
                 if (this.dropItem) {
                     this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
                 }
@@ -120,7 +120,7 @@ public class EntityFallingBlock extends Entity {
                                     return;
                                 }
                                 this.world.setTypeAndData(blockposition, this.block, 3);
-                                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                                world.spigotConfigTitanium.getAntiXray().updateNearbyBlocks(world, blockposition); // Spigot
                                 // CraftBukkit end
                                 if (block instanceof BlockFalling) {
                                     ((BlockFalling) block).a_(this.world, blockposition);
@@ -288,7 +288,7 @@ public class EntityFallingBlock extends Entity {
     // PaperSpigot start - Fix cannons
     @Override
     public double f(double d0, double d1, double d2) {
-        if (!world.paperSpigotConfig.fixCannons) return super.f(d0, d1, d2);
+        if (!world.paperConfigTitanium.fixCannons) return super.f(d0, d1, d2);
 
         double d3 = this.locX - d0;
         double d4 = this.locY + this.getHeadHeight() - d1;
@@ -299,7 +299,7 @@ public class EntityFallingBlock extends Entity {
 
     @Override
     public float getHeadHeight() {
-        return world.paperSpigotConfig.fixCannons ? this.length / 2 : super.getHeadHeight();
+        return world.paperConfigTitanium.fixCannons ? this.length / 2 : super.getHeadHeight();
     }
     // PaperSpigot end
 }
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index 38025152..19ddba56 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -350,7 +350,7 @@ public class EntityFishingHook extends Entity {
                                 this.ax = MathHelper.nextInt(this.random, 20, 80);
                             }
                         } else {
-                            this.aw = MathHelper.nextInt(this.random, this.world.paperSpigotConfig.fishingMinTicks, this.world.paperSpigotConfig.fishingMaxTicks); // PaperSpigot - Configurable fishing tick range
+                            this.aw = MathHelper.nextInt(this.random, this.world.paperConfigTitanium.fishingTimeRange.minimumTicks, this.world.paperConfigTitanium.fishingTimeRange.maximumTicks); // PaperSpigot - Configurable fishing tick range
                             this.aw -= EnchantmentManager.h(this.owner) * 20 * 5;
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index f374c396..15d4bdc9 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -96,7 +96,7 @@ public abstract class EntityHanging extends Entity {
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
-        if (this.c++ == this.world.spigotConfig.hangingTickFrequency && !this.world.isClientSide) {
+        if (this.c++ == world.spigotConfigTitanium.hangingTickFrequency && !this.world.isClientSide) {
             this.c = 0;
             if (!this.dead && !this.survives()) {
                 // CraftBukkit start - fire break events
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
index 53aaa654..0328a63a 100644
--- a/src/main/java/net/minecraft/server/EntityHorse.java
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -180,7 +180,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
     public boolean cb() {
         // PaperSpigot start - Configurable undead horse leashing
-        if (this.world.paperSpigotConfig.allowUndeadHorseLeashing) {
+        if (this.world.paperConfigTitanium.allowUndeadHorseLeashing) {
             return super.cb();
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 0e68599d..9bbff5bb 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -9,6 +9,7 @@ import java.util.List;
 import java.util.UUID;
 
 // CraftBukkit start
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -900,7 +901,7 @@ public abstract class EntityHuman extends EntityLiving {
         // CraftBukkit end
         if (!this.isInvulnerable(damagesource)) {
             if (!damagesource.ignoresArmor() && this.isBlocking() && f > 0.0F) {
-                f = (1.0F + f) * this.world.paperSpigotConfig.playerBlockingDamageMultiplier; // PaperSpigot - Configurable damage multiplier for blocking;
+                f = (1.0F + f) * this.world.paperConfigTitanium.playerBlockingDamageMultiplier; // PaperSpigot - Configurable damage multiplier for blocking;
             }
 
             f = this.applyArmorModifier(damagesource, f);
@@ -1012,7 +1013,7 @@ public abstract class EntityHuman extends EntityLiving {
                 }
 
                 if (f > 0.0F || f1 > 0.0F) {
-                    boolean flag = !world.paperSpigotConfig.disablePlayerCrits && this.fallDistance > 0.0F && !this.onGround && !this.k_() && !this.V() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && entity instanceof EntityLiving; // PaperSpigot
+                    boolean flag = !world.paperConfigTitanium.gameMechanics.disablePlayerCrits && this.fallDistance > 0.0F && !this.onGround && !this.k_() && !this.V() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && entity instanceof EntityLiving; // PaperSpigot
 
                     if (flag && f > 0.0F) {
                         f *= 1.5F;
@@ -1044,9 +1045,9 @@ public abstract class EntityHuman extends EntityLiving {
                             // SportPaper start - Customizable knockback
                             entity.g(
                                 (double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i *
-                                    PaperSpigotConfig.knockbackExtraHorizontal), PaperSpigotConfig.knockbackExtraVertical,
+                                    TitaniumConfig.get().paper.knockback.extraHorizontal), TitaniumConfig.get().paper.knockback.extraVertical,
                                 (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i *
-                                    PaperSpigotConfig.knockbackExtraHorizontal));
+                                        TitaniumConfig.get().paper.knockback.extraHorizontal));
                             // SportPaper end
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
@@ -1129,7 +1130,7 @@ public abstract class EntityHuman extends EntityLiving {
                             }
                         }
 
-                        this.applyExhaustion(world.spigotConfig.combatExhaustion); // Spigot - Change to use configurable value
+                        this.applyExhaustion(world.spigotConfigTitanium.hunger.combatExhaustion); // Spigot - Change to use configurable value
                     } else if (flag1) {
                         entity.extinguish();
                     }
@@ -1387,9 +1388,9 @@ public abstract class EntityHuman extends EntityLiving {
         super.bF();
         this.b(StatisticList.u);
         if (this.isSprinting()) {
-            this.applyExhaustion(world.spigotConfig.sprintExhaustion); // Spigot - Change to use configurable value
+            this.applyExhaustion(world.spigotConfigTitanium.hunger.sprintExhaustion); // Spigot - Change to use configurable value
         } else {
-            this.applyExhaustion(world.spigotConfig.walkExhaustion); // Spigot - Change to use configurable value
+            this.applyExhaustion(world.spigotConfigTitanium.hunger.walkExhaustion); // Spigot - Change to use configurable value
         }
 
     }
@@ -1426,13 +1427,13 @@ public abstract class EntityHuman extends EntityLiving {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.p, i);
-                    this.applyExhaustion(world.paperSpigotConfig.playerSwimmingExhaustion * (float) i * 0.01F); // PaperSpigot - Configurable swimming exhaustion
+                    this.applyExhaustion(world.paperConfigTitanium.playerExhaustion.swimming * (float) i * 0.01F); // PaperSpigot - Configurable swimming exhaustion
                 }
             } else if (this.V()) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.l, i);
-                    this.applyExhaustion(world.paperSpigotConfig.playerSwimmingExhaustion * (float) i * 0.01F); // PaperSpigot - Configurable swimming (diving) exhaustion
+                    this.applyExhaustion(world.paperConfigTitanium.playerExhaustion.swimming * (float) i * 0.01F); // PaperSpigot - Configurable swimming (diving) exhaustion
                 }
             } else if (this.k_()) {
                 if (d1 > 0.0D) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 5f4bc422..21bcdf89 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -445,13 +445,13 @@ public abstract class EntityInsentient extends EntityLiving {
                 double d2 = entityhuman.locZ - this.locZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (d3 > this.world.paperSpigotConfig.hardDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distances
+                if (d3 > this.world.paperConfigTitanium.despawnRanges.hard) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distances
                     this.die();
                 }
 
-                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > this.world.paperSpigotConfig.softDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distance
+                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > this.world.paperConfigTitanium.despawnRanges.soft) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distance
                     this.die();
-                } else if (d3 < this.world.paperSpigotConfig.softDespawnDistance) { // PaperSpigot - custom despawn distances
+                } else if (d3 < this.world.paperConfigTitanium.despawnRanges.soft) { // PaperSpigot - custom despawn distances
                     this.ticksFarFromPlayer = 0;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index f17f3a7f..0a099138 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -110,7 +110,7 @@ public class EntityItem extends Entity {
 
 
             this.W();
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (!this.world.isClientSide && this.age >= world.spigotConfigTitanium.itemDespawnRate) { // Spigot
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
@@ -134,7 +134,7 @@ public class EntityItem extends Entity {
         this.lastTick = MinecraftServer.currentTick;
         // CraftBukkit end
 
-        if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+        if (!this.world.isClientSide && this.age >= world.spigotConfigTitanium.itemDespawnRate) { // Spigot
             // CraftBukkit start - fire ItemDespawnEvent
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                 this.age = 0;
@@ -152,7 +152,7 @@ public class EntityItem extends Entity {
         if (stack.count >= stack.getMaxStackSize()) return;
         // Paper end
         // Spigot start
-        double radius = world.spigotConfig.itemMerge;
+        double radius = world.spigotConfigTitanium.mergeRadius.item;
         Iterator iterator = this.world.a(EntityItem.class, this.getBoundingBox().grow(radius, radius, radius)).iterator();
         // Spigot end
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index f311373f..930fe084 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -14,6 +14,7 @@ import java.util.UUID;
 import java.util.ArrayList;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -824,7 +825,7 @@ public abstract class EntityLiving extends Entity {
 
                 // PaperSpigot start - Disable explosion knockback
                 boolean knockbackCancelled = false;
-                if (flag && !(knockbackCancelled = world.paperSpigotConfig.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
+                if (flag && !(knockbackCancelled = world.paperConfigTitanium.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
                 // PaperSpigot end
                     this.world.broadcastEntityEffect(this, (byte) 2);
                     if (damagesource != DamageSource.DROWN) {
@@ -940,10 +941,10 @@ public abstract class EntityLiving extends Entity {
             double magnitude = MathHelper.sqrt(d0 * d0 + d1 * d1);
 
             double knockbackReduction = this.getBukkitEntity().getKnockbackReduction();
-            double friction = PaperSpigotConfig.knockbackFriction - knockbackReduction;
+            double friction = TitaniumConfig.get().paper.knockback.friction - knockbackReduction;
 
-            double horizontalKnockback = PaperSpigotConfig.knockbackHorizontal * (1d - knockbackReduction);
-            double verticalKnockback = PaperSpigotConfig.knockbackVertical * (1d - knockbackReduction);
+            double horizontalKnockback = TitaniumConfig.get().paper.knockback.horizontal * (1d - knockbackReduction);
+            double verticalKnockback = TitaniumConfig.get().paper.knockback.vertical * (1d - knockbackReduction);
 
             // Paper - preserve old velocity
             double oldMotX = this.motX;
@@ -958,8 +959,8 @@ public abstract class EntityLiving extends Entity {
             this.motY += verticalKnockback;
             this.motZ -= d1 / magnitude * horizontalKnockback;
 
-            if (this.motY > PaperSpigotConfig.knockbackVerticalLimit) {
-                this.motY = PaperSpigotConfig.knockbackVerticalLimit;
+            if (this.motY > TitaniumConfig.get().paper.knockback.verticalLimit) {
+                this.motY = TitaniumConfig.get().paper.knockback.verticalLimit;
             }
             // SportPaper end
 
@@ -1745,9 +1746,9 @@ public abstract class EntityLiving extends Entity {
         }));
 
         if (this.ad() && !list.isEmpty()) { // Spigot: Add this.ad() condition
-            numCollisions -= world.spigotConfig.maxCollisionsPerEntity; // Spigot
+            numCollisions -= world.spigotConfigTitanium.maxEntityCollisions; // Spigot
             for (int i = 0; i < list.size(); ++i) {
-                if (numCollisions > world.spigotConfig.maxCollisionsPerEntity) { break; } // Spigot
+                if (numCollisions > world.spigotConfigTitanium.maxEntityCollisions) { break; } // Spigot
                 Entity entity = (Entity) list.get(i);
 
                 // TODO better check now?
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 24d15388..6cd001b0 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -89,7 +89,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public EntityPlayer(MinecraftServer minecraftserver, WorldServer worldserver, GameProfile gameprofile, PlayerInteractManager playerinteractmanager) {
         super(worldserver, gameprofile);
-        this.viewDistance = world.spigotConfig.viewDistance; // PaperSpigot - Player view distance API
+        this.viewDistance = world.spigotConfigTitanium.viewDistance; // PaperSpigot - Player view distance API
         playerinteractmanager.player = this;
         this.playerInteractManager = playerinteractmanager;
         BlockPosition blockposition = worldserver.getSpawn();
@@ -210,7 +210,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // PaperSpigot start - Configurable container update tick rate
         if (--containerUpdateDelay <= 0) {
             this.activeContainer.b();
-            containerUpdateDelay = world.paperSpigotConfig.containerUpdateTickRate;
+            containerUpdateDelay = world.paperConfigTitanium.containerUpdateTickRate;
         }
         // PaperSpigot end
         if (!this.world.isClientSide && !this.activeContainer.a((EntityHuman) this)) {
@@ -240,7 +240,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             Chunk chunk;
 
-            while (iterator1.hasNext() && arraylist.size() < this.world.spigotConfig.maxBulkChunk) { // Spigot
+            while (iterator1.hasNext() && arraylist.size() < world.spigotConfigTitanium.maxBulkChunks) { // Spigot
                 ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator1.next();
 
                 if (chunkcoordintpair != null) {
@@ -531,7 +531,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         boolean endPortal = this.dimension == 1 && i == 1;
         if (endPortal) {
             this.b((Statistic) AchievementList.D);
-            if (!world.paperSpigotConfig.disableEndCredits) {
+            if (!world.paperConfigTitanium.gameMechanics.disableEndCredits) {
                 this.world.kill(this);
                 this.viewingCredits = true;
                 this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(4, 0.0F));
@@ -557,7 +557,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
 
         // PaperSpigot start - Allow configurable end portal credits
-        if (!endPortal || world.paperSpigotConfig.disableEndCredits) {
+        if (!endPortal || world.paperConfigTitanium.gameMechanics.disableEndCredits) {
             // CraftBukkit start
             TeleportCause cause = (endPortal || (this.dimension == 1 || i == 1)) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
             this.server.getPlayerList().changeDimension(this, i, cause);
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index c927832b..d2126b16 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -235,7 +235,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
                 }
 
                 // PaperSpigot - Toggle to make all chunks spawn chunks
-                boolean isSlimeChunk = world.paperSpigotConfig.allChunksAreSlimeChunks || chunk.a(987234911L).nextInt(10) == 0;
+                boolean isSlimeChunk = world.paperConfigTitanium.allChunksAreSlimeChunks || chunk.a(987234911L).nextInt(10) == 0;
                 if (this.random.nextInt(10) == 0 && isSlimeChunk && this.locY < 40.0D) {
                     return super.bR();
                 }
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index aaaece35..9f9719a9 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -142,7 +142,7 @@ public class EntitySquid extends EntityWaterAnimal {
 
     public boolean bR() {
         // PaperSpigot - Configurable squid spawn range
-        return this.locY > this.world.paperSpigotConfig.squidMinSpawnHeight && this.locY < (double) this.world.paperSpigotConfig.squidMaxSpawnHeight && super.bR();
+        return this.locY > this.world.paperConfigTitanium.squidSpawnHeight.minimum && this.locY < (double) this.world.paperConfigTitanium.squidSpawnHeight.maximum && super.bR();
     }
 
     public void b(float f, float f1, float f2) {
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index b1a49452..508cea4f 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -21,7 +21,7 @@ public class EntityTNTPrimed extends Entity {
     // PaperSpigot end
         this.k = true;
         this.setSize(0.98F, 0.98F);
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedTNTEntities; // PaperSpigot
+        this.loadChunks = world.paperConfigTitanium.loadChunks.tntEntities; // PaperSpigot
     }
 
     public EntityTNTPrimed(org.bukkit.Location loc, World world, double d0, double d1, double d2, EntityLiving entityliving) {
@@ -37,7 +37,7 @@ public class EntityTNTPrimed extends Entity {
         this.lastY = d1;
         this.lastZ = d2;
         this.source = entityliving;
-        if (world.paperSpigotConfig.fixCannons) this.motX = this.motZ = 0.0F; // PaperSpigot - Fix cannons
+        if (world.paperConfigTitanium.fixCannons) this.motX = this.motZ = 0.0F; // PaperSpigot - Fix cannons
     }
 
     protected void h() {}
@@ -51,7 +51,7 @@ public class EntityTNTPrimed extends Entity {
     }
 
     public void t_() {
-        if (world.spigotConfig.currentPrimedTnt++ > world.spigotConfig.maxTntTicksPerTick) { return; } // Spigot
+        if (world.spigotConfigTitanium.currentPrimedTnt++ > world.spigotConfigTitanium.maxTntPerTick) { return; } // Spigot
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
@@ -59,13 +59,13 @@ public class EntityTNTPrimed extends Entity {
         this.move(this.motX, this.motY, this.motZ);
 
         // PaperSpigot start - Drop TNT entities above the specified height
-        if (this.world.paperSpigotConfig.tntEntityHeightNerf != 0 && this.locY > this.world.paperSpigotConfig.tntEntityHeightNerf) {
+        if (this.world.paperConfigTitanium.tntEntityHeightNerf != 0 && this.locY > this.world.paperConfigTitanium.tntEntityHeightNerf) {
             this.die();
         }
         // PaperSpigot end
 
         // PaperSpigot start - Remove entities in unloaded chunks
-        if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedTNTEntities) {
+        if (this.inUnloadedChunk && world.paperConfigTitanium.removeUnloaded.tntEntities) {
             this.die();
             this.fuseTicks = 2;
         }
@@ -102,7 +102,7 @@ public class EntityTNTPrimed extends Entity {
         // PaperSpigot start - Force load chunks during TNT explosions
         ChunkProviderServer chunkProviderServer = ((ChunkProviderServer) world.chunkProvider);
         boolean forceChunkLoad = chunkProviderServer.forceChunkLoad;
-        if (world.paperSpigotConfig.loadUnloadedTNTEntities) {
+        if (world.paperConfigTitanium.loadChunks.tntEntities) {
             chunkProviderServer.forceChunkLoad = true;
         }
         // PaperSpigot end
@@ -114,7 +114,7 @@ public class EntityTNTPrimed extends Entity {
         // CraftBukkit end
 
         // PaperSpigot start - Force load chunks during TNT explosions
-        if (world.paperSpigotConfig.loadUnloadedTNTEntities) {
+        if (world.paperConfigTitanium.loadChunks.tntEntities) {
             chunkProviderServer.forceChunkLoad = forceChunkLoad;
         }
         // PaperSpigot end
@@ -150,7 +150,7 @@ public class EntityTNTPrimed extends Entity {
     // PaperSpigot start - Fix cannons
     @Override
     public double f(double d0, double d1, double d2) {
-        if (!world.paperSpigotConfig.fixCannons) return super.f(d0, d1, d2);
+        if (!world.paperConfigTitanium.fixCannons) return super.f(d0, d1, d2);
 
         double d3 = this.locX - d0;
         double d4 = this.locY + this.getHeadHeight() - d1;
@@ -161,12 +161,12 @@ public class EntityTNTPrimed extends Entity {
 
     @Override
     public boolean aL() {
-        return !world.paperSpigotConfig.fixCannons && super.aL();
+        return !world.paperConfigTitanium.fixCannons && super.aL();
     }
 
     @Override
     public float getHeadHeight() {
-        return world.paperSpigotConfig.fixCannons ? this.length / 2 : 0.0F;
+        return world.paperConfigTitanium.fixCannons ? this.length / 2 : 0.0F;
     }
 
     /**
@@ -174,7 +174,7 @@ public class EntityTNTPrimed extends Entity {
      */
     @Override
     public boolean W() {
-        if (!world.paperSpigotConfig.fixCannons) return super.W();
+        if (!world.paperConfigTitanium.fixCannons) return super.W();
 
         // Preserve velocity while calling the super method
         double oldMotX = this.motX;
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index ef87df16..d675d7ac 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -195,7 +195,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
-                    if ( world.spigotConfig.witherSpawnSoundRadius > 0 && distanceSquared > world.spigotConfig.witherSpawnSoundRadius * world.spigotConfig.witherSpawnSoundRadius ) continue; // Spigot
+                    if ( world.spigotConfigTitanium.witherSpawnSoundRadius > 0 && distanceSquared > world.spigotConfigTitanium.witherSpawnSoundRadius * world.spigotConfigTitanium.witherSpawnSoundRadius ) continue; // Spigot
                     if (distanceSquared > viewDistance * viewDistance) {
                         double deltaLength = Math.sqrt(distanceSquared);
                         double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index dd21d542..c408889a 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -5,6 +5,7 @@ import java.util.List;
 import java.util.UUID;
 
 //CraftBukkit start
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
@@ -16,7 +17,7 @@ public class EntityZombie extends EntityMonster {
 
     protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
     private static final UUID b = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
-    private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", org.github.paperspigot.PaperSpigotConfig.babyZombieMovementSpeed, 1); // PaperSpigot - Configurable baby zombie movement speed
+    private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", TitaniumConfig.get().paper.settings.babyZombieMovementSpeed, 1); // PaperSpigot - Configurable baby zombie movement speed
     private final PathfinderGoalBreakDoor bm = new PathfinderGoalBreakDoor(this);
     private int bn;
     private boolean bo = false;
@@ -38,12 +39,12 @@ public class EntityZombie extends EntityMonster {
     }
 
     protected void n() {
-        if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityVillager.class, 1.0D, true)); // Spigot
+        if ( world.spigotConfigTitanium.zombieAggressiveTowardsVillager ) this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityVillager.class, 1.0D, true)); // Spigot
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityIronGolem.class, 1.0D, true));
         this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, false));
         this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[] { EntityPigZombie.class}));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
-        if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)); // Spigot
+        if ( world.spigotConfigTitanium.zombieAggressiveTowardsVillager ) this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)); // Spigot
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
     }
 
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 0d6ccbf7..6d123a0b 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -145,7 +145,7 @@ public class Explosion {
                             continue;
                         }
                         // CraftBukkit end
-                        double d14 = entity instanceof EntityHuman && world.paperSpigotConfig.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
+                        double d14 = entity instanceof EntityHuman && world.paperConfigTitanium.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
 
                         // PaperSpigot start - Fix cannons
                         /*
@@ -175,7 +175,7 @@ public class Explosion {
                         // SportPaper end
                         // PaperSpigot end
 
-                        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperSpigotConfig.disableExplosionKnockback) { // PaperSpigot
+                        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperConfigTitanium.disableExplosionKnockback) { // PaperSpigot
                             double vecX = d14 == 0 ? x : x / d14;
                             double vecY = d14 == 0 ? y : y / d14;
                             double vecZ = d14 == 0 ? z : z / d14;
@@ -191,7 +191,7 @@ public class Explosion {
 
     public void a(boolean flag) {
         // PaperSpigot start - Configurable TNT explosion volume.
-        float volume = source instanceof EntityTNTPrimed ? world.paperSpigotConfig.tntExplosionVolume : 4.0F;
+        float volume = source instanceof EntityTNTPrimed ? world.paperConfigTitanium.tntExplosionVolume : 4.0F;
         this.world.makeSound(this.posX, this.posY, this.posZ, "random.explode", volume, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
         // PaperSpigot end
         if (this.size >= 2.0F && this.b) {
@@ -254,7 +254,7 @@ public class Explosion {
                 blockposition = (BlockPosition) iterator.next();
                 Block block = this.world.getType(blockposition).getBlock();
 
-                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                world.spigotConfigTitanium.getAntiXray().updateNearbyBlocks(world, blockposition); // Spigot
                 if (flag) {
                     double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
                     double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
@@ -326,7 +326,7 @@ public class Explosion {
 
     // PaperSpigot start - Optimize explosions
     private float getBlockDensity(Vec3D vec3d, AxisAlignedBB aabb) {
-        if (!this.world.paperSpigotConfig.optimizeExplosions) {
+        if (!this.world.paperConfigTitanium.optimizeExplosions) {
             return this.world.a(vec3d, aabb);
         }
 
diff --git a/src/main/java/net/minecraft/server/FoodMetaData.java b/src/main/java/net/minecraft/server/FoodMetaData.java
index d0bcad67..f4f4f824 100644
--- a/src/main/java/net/minecraft/server/FoodMetaData.java
+++ b/src/main/java/net/minecraft/server/FoodMetaData.java
@@ -63,7 +63,7 @@ public class FoodMetaData {
             if (this.foodTickTimer >= 80) {
                 // CraftBukkit - added RegainReason
                 entityhuman.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED);
-                this.a(entityhuman.world.spigotConfig.regenExhaustion); // Spigot - Change to use configurable value
+                this.a(entityhuman.world.spigotConfigTitanium.hunger.regenExhaustion); // Spigot - Change to use configurable value
                 this.foodTickTimer = 0;
             }
         } else if (this.foodLevel <= 0) {
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 0cc3e2fb..6082de68 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -10,11 +11,11 @@ public class GenericAttributes {
 
     private static final Logger f = LogManager.getLogger();
     // Spigot start
-    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
+    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  2048)).a("Max Health").a(true);
     public static final IAttribute FOLLOW_RANGE = (new AttributeRanged((IAttribute) null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
     public static final IAttribute c = (new AttributeRanged((IAttribute) null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
-    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
-    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
+    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, 2048)).a("Movement Speed").a(true);
+    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, 2048);
     // Spigot end
 
     public static NBTTagList a(AttributeMapBase attributemapbase) {
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 5454f2b5..807b520f 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 // CraftBukkit start
 import java.net.InetAddress;
 import java.util.HashMap;
+import net.titanium.config.TitaniumConfig;
 // CraftBukkit end
 
 public class HandshakeListener implements PacketHandshakingInListener {
@@ -63,18 +64,18 @@ public class HandshakeListener implements PacketHandshakingInListener {
             // CraftBukkit end
 
             if (packethandshakinginsetprotocol.b() > 47) {
-                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
+                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( TitaniumConfig.get().spigot.messages.outdatedServer.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else if (packethandshakinginsetprotocol.b() < 47) {
-                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
+                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( TitaniumConfig.get().spigot.messages.outdatedClient.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else {
                 this.b.protocolVersion = packethandshakinginsetprotocol.b();
                 this.b.a((PacketListener) (new LoginListener(this.a, this.b)));
                 // Spigot Start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                if (TitaniumConfig.get().spigot.settings.bungeecord) {
                     String[] split = packethandshakinginsetprotocol.hostname.split("\00");
                     if ( split.length == 3 || split.length == 4 ) {
                         packethandshakinginsetprotocol.hostname = split[0];
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index 95060a4e..ed235495 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.List;
+import net.titanium.config.TitaniumConfig;
 
 public class IntCache {
 
@@ -17,11 +18,11 @@ public class IntCache {
         if (i <= 256) {
             if (IntCache.b.isEmpty()) {
                 aint = new int[256];
-                if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
+                if (c.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.c.add(aint);
                 return aint;
             } else {
                 aint = (int[]) IntCache.b.remove(IntCache.b.size() - 1);
-                if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
+                if (c.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.c.add(aint);
                 return aint;
             }
         } else if (i > IntCache.a) {
@@ -29,15 +30,15 @@ public class IntCache {
             IntCache.d.clear();
             IntCache.e.clear();
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.e.add(aint);
             return aint;
         } else if (IntCache.d.isEmpty()) {
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.e.add(aint);
             return aint;
         } else {
             aint = (int[]) IntCache.d.remove(IntCache.d.size() - 1);
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < TitaniumConfig.get().spigot.settings.cacheLimit) IntCache.e.add(aint);
             return aint;
         }
     }
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index 2e24129f..266f3859 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -1,14 +1,13 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.player.PlayerBucketEmptyEvent;
 import org.bukkit.event.player.PlayerBucketFillEvent;
 // CraftBukkit end
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
-
 public class ItemBucket extends Item {
 
     private Block a;
@@ -100,8 +99,8 @@ public class ItemBucket extends Item {
                         if (this.a(world, blockposition1) && !entityhuman.abilities.canInstantlyBuild) {
                             entityhuman.b(StatisticList.USE_ITEM_COUNT[Item.getId(this)]);
                             // PaperSpigot start - Stackable Buckets
-                            if ((this == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
-                                    (this == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets)) {
+                            if ((this == Items.LAVA_BUCKET && TitaniumConfig.get().paper.stackableBuckets.lava) ||
+                                    (this == Items.WATER_BUCKET && TitaniumConfig.get().paper.stackableBuckets.water)) {
                                 if (--itemstack.count <= 0) {
                                     return CraftItemStack.asNMSCopy(event.getItemStack());
                                 }
diff --git a/src/main/java/net/minecraft/server/ItemMilkBucket.java b/src/main/java/net/minecraft/server/ItemMilkBucket.java
index 8e3d77e0..b8f5c403 100644
--- a/src/main/java/net/minecraft/server/ItemMilkBucket.java
+++ b/src/main/java/net/minecraft/server/ItemMilkBucket.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
+import net.titanium.config.TitaniumConfig;
 
 public class ItemMilkBucket extends Item {
 
@@ -20,7 +20,7 @@ public class ItemMilkBucket extends Item {
 
         entityhuman.b(StatisticList.USE_ITEM_COUNT[Item.getId(this)]);
         // PaperSpigot start - Stackable Buckets
-        if (PaperSpigotConfig.stackableMilkBuckets) {
+        if (TitaniumConfig.get().paper.stackableBuckets.milk) {
             if (itemstack.count <= 0) {
                 return new ItemStack(Items.BUCKET);
             } else if (!entityhuman.inventory.pickup(new ItemStack(Items.BUCKET))) {
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c54050bf..49d68638 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -9,6 +9,7 @@ import java.util.Random;
 import java.util.List;
 import java.util.Map;
 
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -19,8 +20,6 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.world.StructureGrowEvent;
 // CraftBukkit end
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
-
 public final class ItemStack {
 
     public static final DecimalFormat a = new DecimalFormat("#.###");
@@ -334,7 +333,7 @@ public final class ItemStack {
         int id = CraftMagicNumbers.getId(this.getItem());
         if (CraftMagicNumbers.getBlock(id) != Blocks.AIR) {
             // If vanilla doesn't use data on it don't allow any
-            if ((PaperSpigotConfig.dataValueAllowedItems == null || !PaperSpigotConfig.dataValueAllowedItems.contains(id)) &&
+            if ((TitaniumConfig.get().paper.dataValueAllowedItems == null || !TitaniumConfig.get().paper.dataValueAllowedItems.contains(id)) &&
                     (!(this.usesData() || this.getItem().usesDurability()))) {
             // PaperSpigot end
                 i = 0;
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 772b79e7..22f0e99b 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -15,6 +15,7 @@ import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import javax.crypto.SecretKey;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -52,7 +53,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
     public void c() {
         // Paper start - Do not allow logins while the server is shutting down
         if (!MinecraftServer.getServer().isRunning()) {
-            this.disconnect(org.spigotmc.SpigotConfig.restartMessage);
+            this.disconnect(TitaniumConfig.get().spigot.messages.restart);
             return;
         }
         // Paper end
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1f94d925..ba744422 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -39,6 +39,7 @@ import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -508,7 +509,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.n.e();
             }
             // Spigot start
-            if( org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly )
+            if( TitaniumConfig.get().spigot.settings.saveUserCacheOnStopOnly )
             {
                 LOGGER.info("Saving usercache.json");
                 this.Z.c(false); // Paper
@@ -838,7 +839,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             serverAutoSave = (autosavePeriod > 0 && this.ticks % autosavePeriod == 0); // Paper
-            int playerSaveInterval = PaperSpigotConfig.playerAutoSaveRate;
+            int playerSaveInterval = TitaniumConfig.get().paper.settings.playerAutoSaveRate;
             if (playerSaveInterval < 0) {
                 playerSaveInterval = autosavePeriod;
             }
@@ -851,7 +852,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             // Also pass flag to only save modified chunks
             server.playerCommandState = true;
             for (World world : worlds) {
-                if (world.paperSpigotConfig.autoSavePeriod > 0) world.getWorld().save(false); // Paper - Incremental / Configurable Auto Saving
+                if (world.paperConfigTitanium.autoSaveInterval > 0) world.getWorld().save(false); // Paper - Incremental / Configurable Auto Saving
             }
             server.playerCommandState = false;
             // this.saveChunks(true);
diff --git a/src/main/java/net/minecraft/server/MobEffectAttackDamage.java b/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
index 175503bd..3a8a3940 100644
--- a/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
+++ b/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.titanium.config.TitaniumConfig;
+
 public class MobEffectAttackDamage extends MobEffectList {
 
     protected MobEffectAttackDamage(int i, MinecraftKey minecraftkey, boolean flag, int j) {
@@ -8,6 +10,6 @@ public class MobEffectAttackDamage extends MobEffectList {
 
     public double a(int i, AttributeModifier attributemodifier) {
         // PaperSpigot - Configurable modifiers for strength and weakness effects
-        return this.id == MobEffectList.WEAKNESS.id ? (double) (org.github.paperspigot.PaperSpigotConfig.weaknessEffectModifier * (float) (i + 1)) : org.github.paperspigot.PaperSpigotConfig.strengthEffectModifier * (double) (i + 1);
+        return this.id == MobEffectList.WEAKNESS.id ? (double) (TitaniumConfig.get().paper.effectModifiers.weakness * (float) (i + 1)) : TitaniumConfig.get().paper.effectModifiers.strength * (double) (i + 1);
     }
 }
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index c7e6c6f6..f11db7bd 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -61,7 +61,7 @@ public abstract class MobSpawnerAbstract {
     public void c() {
         // PaperSpigot start - Configurable mob spawner tick rate
         if (spawnDelay > 0 && --tickDelay > 0) return;
-        tickDelay = this.a().paperSpigotConfig.mobSpawnerTickRate;
+        tickDelay = this.a().paperConfigTitanium.mobSpawnerTickRate;
         // PaperSpigot end
         if (this.g()) {
             BlockPosition blockposition = this.b();
@@ -167,7 +167,7 @@ public abstract class MobSpawnerAbstract {
                 if (!event.isCancelled()) {
                     entity.world.addEntity(entity, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
                     // Spigot Start
-                    if ( entity.world.spigotConfig.nerfSpawnerMobs )
+                    if ( entity.world.spigotConfigTitanium.nerfSpawnerMobs )
                     {
                         entity.fromMobSpawner = true;
                     }
@@ -220,7 +220,7 @@ public abstract class MobSpawnerAbstract {
             if (!event.isCancelled()) {
                 entity.world.addEntity(entity, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
                 // Spigot Start
-                if ( entity.world.spigotConfig.nerfSpawnerMobs )
+                if ( entity.world.spigotConfigTitanium.nerfSpawnerMobs )
                 {
                     entity.fromMobSpawner = true;
                 }
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 40291094..d7949903 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -23,6 +23,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -66,7 +67,7 @@ public class NameReferencingFileConverter {
             }
         }), String.class);
 
-        if (minecraftserver.getOnlineMode() || org.spigotmc.SpigotConfig.bungee) { // Spigot: bungee = online mode, for now.
+        if (minecraftserver.getOnlineMode() || TitaniumConfig.get().spigot.settings.bungeecord) { // Spigot: bungee = online mode, for now.
             minecraftserver.getGameProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, profilelookupcallback);
         } else {
             String[] astring1 = astring;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index a0021fb9..4f2cf825 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -19,7 +19,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.b = chunk.locZ;
         this.d = flag;
         this.c = chunk.getChunkMap(flag, i); // PaperSpigot
-        chunk.world.spigotConfig.antiXrayInstance.obfuscateSync(chunk.locX, chunk.locZ, c.b, c.a, chunk.world);
+        chunk.world.spigotConfigTitanium.getAntiXray().obfuscateSync(chunk.locX, chunk.locZ, c.b, c.a, chunk.world);
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
index 00c05385..d08d11b7 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
@@ -70,7 +70,7 @@ public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut>
         }
 
         for (i = 0; i < this.a.length; ++i) {
-            world.spigotConfig.antiXrayInstance.obfuscate(this.a[i], this.b[i], this.c[i].b, this.c[i].a, world); // Spigot
+            world.spigotConfigTitanium.getAntiXray().obfuscate(this.a[i], this.b[i], this.c[i].b, this.c[i].a, world); // Spigot
             packetdataserializer.writeBytes(this.c[i].a);
         }
 
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 770fd53a..6868f2c0 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -7,6 +7,7 @@ import java.net.InetSocketAddress;
 import java.util.Iterator;
 import java.util.Locale; // SportPaper - server list ping extra
 
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.entity.Player;
 
@@ -113,7 +114,7 @@ public class PacketStatusListener implements PacketStatusInListener {
         if ( !profiles.isEmpty() )
         {
             java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
-            profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            profiles = profiles.subList( 0, Math.min( profiles.size(), TitaniumConfig.get().spigot.settings.sampleCount ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
         }
         // Spigot End
         playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
diff --git a/src/main/java/net/minecraft/server/PersistentScoreboard.java b/src/main/java/net/minecraft/server/PersistentScoreboard.java
index a962804e..34d0b476 100644
--- a/src/main/java/net/minecraft/server/PersistentScoreboard.java
+++ b/src/main/java/net/minecraft/server/PersistentScoreboard.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import java.util.Collection;
 import java.util.Iterator;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -174,7 +175,7 @@ public class PersistentScoreboard extends PersistentBase {
 
         while (iterator.hasNext()) {
             ScoreboardTeam scoreboardteam = (ScoreboardTeam) iterator.next();
-            if (!org.github.paperspigot.PaperSpigotConfig.saveEmptyScoreboardTeams && scoreboardteam.getPlayerNameSet().isEmpty()) continue; // Paper
+            if (!TitaniumConfig.get().paper.settings.saveEmptyScoreboardTeams && scoreboardteam.getPlayerNameSet().isEmpty()) continue; // Paper
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             nbttagcompound.setString("Name", scoreboardteam.getName());
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5e903d40..2e4701d3 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -16,6 +16,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -402,7 +403,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     double d15 = d11 * d11 + d12 * d12 + d13 * d13;
 
                     // Spigot: make "moved too quickly" limit configurable
-                    if (d15 - d14 > org.spigotmc.SpigotConfig.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
+                    if (d15 - d14 > TitaniumConfig.get().spigot.settings.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
                         PlayerConnection.c.warn(this.player.getName() + " moved too quickly! " + d11 + "," + d12 + "," + d13 + " (" + d11 + ", " + d12 + ", " + d13 + ")");
                         this.a(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
                         return;
@@ -440,7 +441,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     boolean flag1 = false;
 
                     // Spigot: make "moved wrongly" limit configurable
-                    if (d15 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
+                    if (d15 > TitaniumConfig.get().spigot.settings.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
                         flag1 = true;
                         PlayerConnection.c.warn(this.player.getName() + " moved wrongly!");
                     }
@@ -690,7 +691,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         boolean throttled = false;
         // PaperSpigot - Allow disabling the player interaction limiter
-        if (org.github.paperspigot.PaperSpigotConfig.interactLimitEnabled && lastPlace != -1 && packetplayinblockplace.timestamp - lastPlace < 30 && packets++ >= 4) {
+        if (TitaniumConfig.get().paper.settings.limitPlayerInteractions && lastPlace != -1 && packetplayinblockplace.timestamp - lastPlace < 30 && packets++ >= 4) {
             throttled = true;
         } else if ( packetplayinblockplace.timestamp - lastPlace >= 30 || lastPlace == -1 )
         {
@@ -1175,7 +1176,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             // Spigot start - spam exclusions
             boolean counted = true;
-            for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
+            for ( String exclude : TitaniumConfig.get().spigot.commands.spamExclusions)
             {
                 if ( exclude != null && s.startsWith( exclude ) )
                 {
@@ -1314,15 +1315,15 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
    private void handleCommand(String s) {
         SpigotTimings.playerCommandTimer.startTiming(); // Spigot
        // CraftBukkit start - whole method
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
+        if ( TitaniumConfig.get().spigot.commands.log ) // Spigot
         this.c.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
         // SportPaper - make unknown command and internal error messages customisable
         PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(),
-                org.spigotmc.SpigotConfig.unknownCommandMessage,
-                org.spigotmc.SpigotConfig.internalErrorMessage);
+                TitaniumConfig.get().spigot.messages.unknownCommand,
+                TitaniumConfig.get().spigot.messages.internalError);
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
@@ -1821,9 +1822,9 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             itemstack = this.player.activeContainer.clickItem(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
                             // PaperSpigot start - Stackable Buckets
                             if (itemstack != null &&
-                                    ((itemstack.getItem() == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
-                                            (itemstack.getItem() == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets) ||
-                                            (itemstack.getItem() == Items.MILK_BUCKET && PaperSpigotConfig.stackableMilkBuckets))) {
+                                    ((itemstack.getItem() == Items.LAVA_BUCKET && TitaniumConfig.get().paper.stackableBuckets.lava) ||
+                                            (itemstack.getItem() == Items.WATER_BUCKET && TitaniumConfig.get().paper.stackableBuckets.water) ||
+                                            (itemstack.getItem() == Items.MILK_BUCKET && TitaniumConfig.get().paper.stackableBuckets.milk))) {
                                 if (action == InventoryAction.MOVE_TO_OTHER_INVENTORY) {
                                     this.player.updateInventory(this.player.activeContainer);
                                 } else {
@@ -1954,7 +1955,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() < 36 + PlayerInventory.getHotbarSize();
             // CraftBukkit - Add invalidItems check
-            boolean flag2 = itemstack == null || itemstack.getItem() != null && (!invalidItems.contains(Item.getId(itemstack.getItem())) || !org.spigotmc.SpigotConfig.filterCreativeItems); // Spigot
+            boolean flag2 = itemstack == null || itemstack.getItem() != null && (!invalidItems.contains(Item.getId(itemstack.getItem())) || !TitaniumConfig.get().spigot.settings.filterCreativeItems); // Spigot
             boolean flag3 = itemstack == null || itemstack.getData() >= 0 && itemstack.count <= 64 && itemstack.count > 0;
             // CraftBukkit start - Call click event
             if (flag || (flag1 && !ItemStack.matches(this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem(), packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
@@ -2108,7 +2109,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
         PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.u());
         // CraftBukkit start
-        if (tabSpamLimiter.addAndGet(PaperSpigotConfig.tabSpamIncrement) > PaperSpigotConfig.tabSpamLimit && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Paper start - split and make configurable
+        if (tabSpamLimiter.addAndGet(TitaniumConfig.get().paper.settings.spamLimiter.tabSpamIncrement) > TitaniumConfig.get().paper.settings.spamLimiter.tabSpamLimit && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Paper start - split and make configurable
             this.disconnect("disconnect.spam");
             return;
         }
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index a04a0891..73e9017d 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -202,7 +202,7 @@ public class PlayerInteractManager {
             }
 
         }
-        world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+        world.spigotConfigTitanium.getAntiXray().updateNearbyBlocks(world, blockposition); // Spigot
     }
 
     public void a(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index b12fa3b8..f08ef9f9 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -16,6 +16,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -39,7 +40,6 @@ import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.util.Vector;
-import org.github.paperspigot.PaperSpigotConfig;
 import org.spigotmc.event.player.PlayerSpawnLocationEvent;
 // CraftBukkit end
 
@@ -473,7 +473,7 @@ public abstract class PlayerList {
             if (!gameprofilebanentry.hasExpired()) event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s); // Spigot
         } else if (!this.isWhitelisted(gameprofile)) {
             // return "You are not white-listed on this server!";
-            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, TitaniumConfig.get().spigot.messages.whitelist); // Spigot
         } else if (getIPBans().isBanned(socketaddress) && !getIPBans().get(socketaddress).hasExpired()) {
             IpBanEntry ipbanentry = this.l.get(socketaddress);
 
@@ -487,7 +487,7 @@ public abstract class PlayerList {
         } else {
             // return this.players.size() >= this.maxPlayers && !this.f(gameprofile) ? "The server is full!" : null;
             if (this.players.size() >= this.maxPlayers && !this.f(gameprofile)) {
-                event.disallow(PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+                event.disallow(PlayerLoginEvent.Result.KICK_FULL, TitaniumConfig.get().spigot.messages.serverFull); // Spigot
             }
         }
 
@@ -1112,7 +1112,7 @@ public abstract class PlayerList {
             EntityPlayer entityplayer = this.players.get(i);
             if (interval == null || now - entityplayer.lastSave >= interval) {
                 this.savePlayerFile(entityplayer);
-                if (interval != null && ++numSaved <= PaperSpigotConfig.maxPlayerAutoSavePerTick) { break; } // Paper
+                if (interval != null && ++numSaved <= TitaniumConfig.get().paper.settings.maxPlayersAutoSavePerTick) { break; } // Paper
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index b78477e0..1c1ba380 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -1,7 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Maps;
-import org.github.paperspigot.PaperSpigotConfig;
+import net.titanium.config.TitaniumConfig;
 import org.github.paperspigot.exception.ServerInternalException;
 
 import java.io.DataInputStream;
@@ -14,7 +14,7 @@ import java.util.Map;
 
 public class RegionFileCache {
 
-    public static final Map<File, RegionFile> a = new LinkedHashMap(PaperSpigotConfig.regionFileCacheSize, 0.75f, true); // Spigot - private -> public, Paper - HashMap -> LinkedHashMap
+    public static final Map<File, RegionFile> a = new LinkedHashMap(TitaniumConfig.get().paper.settings.regionFileCacheSize, 0.75f, true); // Spigot - private -> public, Paper - HashMap -> LinkedHashMap
 
     // PaperSpigot start
     public static synchronized RegionFile a(File file, int i, int j) {
@@ -34,7 +34,7 @@ public class RegionFileCache {
                 file1.mkdirs();
             }
 
-            if (RegionFileCache.a.size() >= PaperSpigotConfig.regionFileCacheSize) { // Paper
+            if (RegionFileCache.a.size() >= TitaniumConfig.get().paper.settings.regionFileCacheSize) { // Paper
                 trimCache(); // Paper
             }
 
@@ -48,7 +48,7 @@ public class RegionFileCache {
     // Paper Start
     private static synchronized void trimCache() {
         Iterator<Map.Entry<File, RegionFile>> itr = RegionFileCache.a.entrySet().iterator();
-        int count = RegionFileCache.a.size() - PaperSpigotConfig.regionFileCacheSize;
+        int count = RegionFileCache.a.size() - TitaniumConfig.get().paper.settings.regionFileCacheSize;
         while (count-- >= 0 && itr.hasNext()) {
             try {
                 itr.next().getValue().c();
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index cc6f993b..be22b6f3 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -25,6 +25,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -149,7 +150,7 @@ public class ServerConnection {
             // Spigot Start
             addPending(); // Paper
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
-            if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
+            if (TitaniumConfig.get().spigot.settings.playerShuffle > 0 && MinecraftServer.currentTick % TitaniumConfig.get().spigot.settings.playerShuffle == 0 )
             {
                 Collections.shuffle( this.h );
             }
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 22c2ffdd..f5f8bcf9 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -15,6 +15,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -32,11 +33,10 @@ public class ServerStatisticManager extends StatisticManager {
         this.c = minecraftserver;
         this.d = file;
         // Spigot start
-        for ( String name : org.spigotmc.SpigotConfig.forcedStats.keySet() )
-        {
+        for (Entry<String, Integer> forcedStat : TitaniumConfig.get().spigot.stats.forcedStats.entrySet()) {
             StatisticWrapper wrapper = new StatisticWrapper();
-            wrapper.a( org.spigotmc.SpigotConfig.forcedStats.get( name ) );
-            a.put( StatisticList.getStatistic( name ), wrapper );
+            wrapper.a( forcedStat.getValue() );
+            a.put( StatisticList.getStatistic( forcedStat.getKey() ), wrapper );
         }
         // Spigot end
     }
@@ -56,17 +56,17 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void b() {
-        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        if ( TitaniumConfig.get().spigot.stats.disableSaving ) return; // Spigot
         try {
             FileUtils.writeStringToFile(this.d, a(this.a));
         } catch (IOException ioexception) {
-            ServerStatisticManager.b.error("Couldn\'t save stats", ioexception);
+            ServerStatisticManager.b.error("Couldn't save stats", ioexception);
         }
 
     }
 
     public void setStatistic(EntityHuman entityhuman, Statistic statistic, int i) {
-        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        if ( TitaniumConfig.get().spigot.stats.disableSaving ) return; // Spigot
         int j = statistic.d() ? this.getStatisticValue(statistic) : 0;
 
         super.setStatistic(entityhuman, statistic, i);
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index ab396fcf..9614c2b7 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -63,8 +63,8 @@ public final class SpawnerCreature {
                     j = MathHelper.floor(entityhuman.locZ / 16.0D);
                     byte b0 = 8;
                     // Spigot Start
-                    b0 = worldserver.spigotConfig.mobSpawnRange;
-                    b0 = ( b0 > worldserver.spigotConfig.viewDistance ) ? (byte) worldserver.spigotConfig.viewDistance : b0;
+                    b0 = worldserver.spigotConfigTitanium.mobSpawnRange;
+                    b0 = ( b0 > worldserver.spigotConfigTitanium.viewDistance ) ? (byte) worldserver.spigotConfigTitanium.viewDistance : b0;
                     b0 = ( b0 > 8 ) ? 8 : b0;
                     // Paper start
                     PlayerNaturallySpawnCreaturesEvent event = new PlayerNaturallySpawnCreaturesEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), b0);
diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java
index e76acfc4..d48a4356 100644
--- a/src/main/java/net/minecraft/server/StructureGenerator.java
+++ b/src/main/java/net/minecraft/server/StructureGenerator.java
@@ -198,7 +198,7 @@ public abstract class StructureGenerator extends WorldGenBase {
     private void a(World world) {
         if (this.d == null) {
             // Spigot Start
-            if ( world.spigotConfig.saveStructureInfo && !this.a().equals( "Mineshaft" ) )
+            if ( world.spigotConfigTitanium.saveStructureInfo && !this.a().equals( "Mineshaft" ) )
             {
             this.d = (PersistentStructure) world.a(PersistentStructure.class, this.a());
             } else
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 49a004b2..5b4e5617 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -194,14 +194,14 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 }
 
                 if (flag) {
-                    this.d(world.spigotConfig.hopperTransfer); // Spigot
+                    this.d(world.spigotConfigTitanium.ticksPer.hopperTransfer); // Spigot
                     this.update();
                     return true;
                 }
             }
             // PaperSpigot start
-            if (world.paperSpigotConfig.useHopperCheck && !this.n()) {
-                this.d(world.spigotConfig.hopperCheck);
+            if (world.paperConfigTitanium.useHopperCheck && !this.n()) {
+                this.d(world.spigotConfigTitanium.ticksPer.hopperCheck);
             }
             // PaperSpigot end
             return false;
@@ -257,7 +257,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                         // ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
 
                         // CraftBukkit start - Call event when pushing items into other inventories
-                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfigTitanium.hopperAmount)); // Spigot
 
                         Inventory destinationInventory;
                         // Have to special case large chests as they work oddly
@@ -271,7 +271,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                         this.getWorld().getServer().getPluginManager().callEvent(event);
                         if (event.isCancelled()) {
                             this.setItem(i, itemstack);
-                            this.d(world.spigotConfig.hopperTransfer); // Spigot
+                            this.d(world.spigotConfigTitanium.ticksPer.hopperTransfer); // Spigot
                             return false;
                         }
                         int origCount = event.getItem().getAmount(); // Spigot
@@ -396,7 +396,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             ItemStack itemstack1 = itemstack.cloneItemStack();
             // ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
             // CraftBukkit start - Call event on collection of items from inventories into the hopper
-            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfig.hopperAmount)); // Spigot
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfigTitanium.hopperAmount)); // Spigot
 
             Inventory sourceInventory;
             // Have to special case large chests as they work oddly
@@ -413,9 +413,9 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 iinventory.setItem(i, itemstack1);
 
                 if (ihopper instanceof TileEntityHopper) {
-                    ((TileEntityHopper) ihopper).d(ihopper.getWorld().spigotConfig.hopperTransfer); // Spigot
+                    ((TileEntityHopper) ihopper).d(ihopper.getWorld().spigotConfigTitanium.ticksPer.hopperTransfer); // Spigot
                 } else if (ihopper instanceof EntityMinecartHopper) {
-                    ((EntityMinecartHopper) ihopper).m(ihopper.getWorld().spigotConfig.hopperTransfer / 2); // Spigot
+                    ((EntityMinecartHopper) ihopper).m(ihopper.getWorld().spigotConfigTitanium.ticksPer.hopperTransfer / 2); // Spigot
                 }
                 return false;
             }
@@ -523,7 +523,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                     TileEntityHopper tileentityhopper = (TileEntityHopper) iinventory;
 
                     if (tileentityhopper.o()) {
-                        tileentityhopper.d(tileentityhopper.world.spigotConfig.hopperTransfer); // Spigot
+                        tileentityhopper.d(tileentityhopper.world.spigotConfigTitanium.ticksPer.hopperTransfer); // Spigot
                     }
 
                     iinventory.update();
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index f84a55e8..b8968ad3 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -17,6 +17,7 @@ import java.util.concurrent.TimeUnit;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.authlib.Agent;
 import com.mojang.authlib.ProfileLookupCallback;
+import net.titanium.config.TitaniumConfig;
 import org.spigotmc.SpigotConfig;
 // Spigot end
 
@@ -68,7 +69,7 @@ public class TileEntitySkull extends TileEntity {
 
                         if ( property == null )
                         {
-                            if(SpigotConfig.fetchSkulls) {
+                            if(TitaniumConfig.get().spigot.settings.fetchSkulls) {
                                 profile = MinecraftServer.getServer().aD().fillProfileProperties(profile, true);
                             } else {
                                 org.bukkit.Bukkit.getLogger().warning("Skull-fetching is disabled, so not fetching skin for \"" + profile.getName() + "\"");
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 700c6069..101862cd 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -35,6 +35,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.io.IOUtils;
 
 public class UserCache {
@@ -122,7 +123,7 @@ public class UserCache {
         this.c.put(gameprofile.getName().toLowerCase(Locale.ROOT), usercache_usercacheentry);
         this.d.put(uuid, usercache_usercacheentry);
         this.e.addFirst(gameprofile);
-        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
+        if( !TitaniumConfig.get().spigot.settings.saveUserCacheOnStopOnly) this.c(); // Spigot - skip saving if disabled
     }
 
     public synchronized GameProfile getProfile(String s) { // Paper - synchronize
@@ -150,7 +151,7 @@ public class UserCache {
             }
         }
 
-        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
+        if( !TitaniumConfig.get().spigot.stats.disableSaving ) this.c(); // Spigot - skip saving if disabled
         return usercache_usercacheentry == null ? null : usercache_usercacheentry.a();
     }
 
@@ -214,7 +215,7 @@ public class UserCache {
         c(true);
         }
         public void c(boolean asyncSave) {
-        String s = this.b.toJson(this.a(org.spigotmc.SpigotConfig.userCacheCap));
+        String s = this.b.toJson(this.a(TitaniumConfig.get().spigot.settings.userCacheSize));
         Runnable save = () -> {
         BufferedWriter bufferedwriter = null;
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 506f97ff..37bd8c0a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -4,6 +4,9 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import net.titanium.config.PaperWorldConfig;
+import net.titanium.config.SpigotWorldConfig;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
@@ -168,6 +171,11 @@ public abstract class World implements IBlockAccess {
 
     public final org.github.paperspigot.PaperSpigotWorldConfig paperSpigotConfig; // PaperSpigot
 
+    // Titanium start
+    public final SpigotWorldConfig spigotConfigTitanium;
+    public final PaperWorldConfig paperConfigTitanium;
+    // Titanium end
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
 
     public CraftWorld getWorld() {
@@ -191,6 +199,8 @@ public abstract class World implements IBlockAccess {
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(); // Spigot
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig(); // PaperSpigot
+        this.spigotConfigTitanium = TitaniumConfig.get().spigot.worldSettings;
+        this.paperConfigTitanium = TitaniumConfig.get().paper.worldSettings;
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
@@ -198,7 +208,7 @@ public abstract class World implements IBlockAccess {
         // CraftBukkit end
         // Spigot start
         this.chunkTickRadius = (byte) ( ( this.getServer().getViewDistance() < 7 ) ? this.getServer().getViewDistance() : 7 );
-        this.chunkTickList = new gnu.trove.map.hash.TLongShortHashMap( spigotConfig.chunksPerTick * 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE );
+        this.chunkTickList = new gnu.trove.map.hash.TLongShortHashMap( spigotConfigTitanium.chunksPerTick * 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE );
         this.chunkTickList.setAutoCompactionFactor( 0 );
         // Spigot end
 
@@ -241,10 +251,10 @@ public abstract class World implements IBlockAccess {
         }); 
         this.getServer().addWorld(this.world); 
         // CraftBukkit end
-        this.keepSpawnInMemory = this.paperSpigotConfig.keepSpawnInMemory; // PaperSpigot
+        this.keepSpawnInMemory = this.paperConfigTitanium.keepSpawnLoaded; // PaperSpigot
         timings = new co.aikar.timings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
-        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
-        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfigTitanium.maxTickTime.entity);
+        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfigTitanium.maxTickTime.tile);
     }
 
     public World b() {
@@ -547,7 +557,7 @@ public abstract class World implements IBlockAccess {
         this.d(blockposition.up(), block);
         this.d(blockposition.north(), block);
         this.d(blockposition.south(), block);
-        spigotConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Spigot
+        spigotConfigTitanium.getAntiXray().updateNearbyBlocks(this, blockposition); // Spigot
     }
 
     public void a(BlockPosition blockposition, Block block, EnumDirection enumdirection) {
@@ -1107,7 +1117,7 @@ public abstract class World implements IBlockAccess {
         // Spigot start
         else if (entity instanceof EntityExperienceOrb) {
             EntityExperienceOrb xp = (EntityExperienceOrb) entity;
-            double radius = spigotConfig.expMerge;
+            double radius = spigotConfigTitanium.mergeRadius.exp;
             if (radius > 0) {
                 List<Entity> entities = this.getEntities(entity, entity.getBoundingBox().grow(radius, radius, radius));
                 for (Entity e : entities) {
@@ -1300,7 +1310,7 @@ public abstract class World implements IBlockAccess {
                             {
                                 // PaperSpigot start - FallingBlocks and TNT collide with specific non-collidable blocks
                                 Block b = block.getBlock();
-                                if (entity.world.paperSpigotConfig.fallingBlocksCollideWithSigns && (entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && (b instanceof BlockSign || b instanceof BlockFenceGate || b instanceof BlockTorch || b instanceof BlockButtonAbstract || b instanceof BlockLever || b instanceof BlockTripwireHook || b instanceof BlockTripwire || b instanceof BlockChest || b instanceof BlockSlowSand || b instanceof BlockBed || b instanceof BlockEnderChest || b instanceof BlockEnchantmentTable || b instanceof BlockBrewingStand)) {
+                                if (entity.world.paperConfigTitanium.fallingBlocksCollideWithSigns && (entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && (b instanceof BlockSign || b instanceof BlockFenceGate || b instanceof BlockTorch || b instanceof BlockButtonAbstract || b instanceof BlockLever || b instanceof BlockTripwireHook || b instanceof BlockTripwire || b instanceof BlockChest || b instanceof BlockSlowSand || b instanceof BlockBed || b instanceof BlockEnderChest || b instanceof BlockEnchantmentTable || b instanceof BlockBrewingStand)) {
                                     AxisAlignedBB aabb = AxisAlignedBB.a(x, y, z, x + 1.0, y + 1.0, z + 1.0);
                                     if (axisalignedbb.b(aabb)) arraylist.add(aabb);
                                 } else {
@@ -1316,7 +1326,7 @@ public abstract class World implements IBlockAccess {
         // Spigot end
 
         if (entity instanceof EntityItem) return arraylist; // PaperSpigot - Optimize item movement
-        if (entity instanceof EntityArmorStand && !entity.world.paperSpigotConfig.armorStandEntityLookups) return arraylist; // Paper
+        if (entity instanceof EntityArmorStand && !entity.world.paperConfigTitanium.armorStandsDoCollisionEntityLookups) return arraylist; // Paper
 
         double d0 = 0.25D;
         List list = this.getEntities(entity, axisalignedbb.grow(d0, d0, d0));
@@ -1714,9 +1724,9 @@ public abstract class World implements IBlockAccess {
             entity.ticksLived++;
             entity.inactiveTick();
             // PaperSpigot start - Remove entities in unloaded chunks
-            if (!this.isChunkLoaded(i, j, true) && ((entity instanceof EntityEnderPearl && this.paperSpigotConfig.removeUnloadedEnderPearls) ||
-                    (entity instanceof EntityFallingBlock && this.paperSpigotConfig.removeUnloadedFallingBlocks) ||
-                    (entity instanceof EntityTNTPrimed && this.paperSpigotConfig.removeUnloadedTNTEntities))) {
+            if (!this.isChunkLoaded(i, j, true) && ((entity instanceof EntityEnderPearl && this.paperConfigTitanium.removeUnloaded.enderpearls) ||
+                    (entity instanceof EntityFallingBlock && this.paperConfigTitanium.removeUnloaded.fallingBlocks) ||
+                    (entity instanceof EntityTNTPrimed && this.paperConfigTitanium.removeUnloaded.tntEntities))) {
                 entity.inUnloadedChunk = true;
                 entity.die();
             }
@@ -2350,7 +2360,7 @@ public abstract class World implements IBlockAccess {
         int l;
 
         // Spigot start
-        int optimalChunks = spigotConfig.chunksPerTick;
+        int optimalChunks = spigotConfigTitanium.chunksPerTick;
         // Quick conditions to allow us to exist early
         if ( optimalChunks > 0  ) {
         // Keep chunks with growth inside of the optimal chunk range
@@ -2393,7 +2403,7 @@ public abstract class World implements IBlockAccess {
         }
 
         this.methodProfiler.a("playerCheckLight");
-        if (spigotConfig.randomLightUpdates && !this.players.isEmpty()) { // Spigot
+        if (spigotConfigTitanium.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             i = this.random.nextInt(this.players.size());
             entityhuman = (EntityHuman) this.players.get(i);
             j = MathHelper.floor(entityhuman.locX) + this.random.nextInt(11) - 5;
@@ -2409,7 +2419,7 @@ public abstract class World implements IBlockAccess {
 
     protected void a(int i, int j, Chunk chunk) {
         this.methodProfiler.c("moodSound");
-        if (!this.paperSpigotConfig.disableMoodSounds && this.L == 0 && !this.isClientSide) { // PaperSpigot - Disable mood sounds
+        if (!this.paperConfigTitanium.disableMoodSounds && this.L == 0 && !this.isClientSide) { // PaperSpigot - Disable mood sounds
             this.m = this.m * 3 + 1013904223;
             int k = this.m >> 2;
             int l = k & 15;
@@ -2681,7 +2691,7 @@ public abstract class World implements IBlockAccess {
             }
 
             // PaperSpigot start - Asynchronous light updates
-            if (chunk.world.paperSpigotConfig.useAsyncLighting) {
+            if (chunk.world.paperConfigTitanium.useAsyncLightning) {
                 chunk.pendingLightUpdates.decrementAndGet();
                 if (neighbors != null) {
                     for (Chunk neighbor : neighbors) {
@@ -2706,7 +2716,7 @@ public abstract class World implements IBlockAccess {
             return false;
         }
 
-        if (!chunk.world.paperSpigotConfig.useAsyncLighting) {
+        if (!chunk.world.paperConfigTitanium.useAsyncLightning) {
             return this.c(enumskyblock, position, chunk, null);
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 171be82c..0b8340e3 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -54,7 +54,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
 
         int i1 = i / this.g;
         int j1 = j / this.g;
-        Random random = this.c.a(i1, j1, this.c.spigotConfig.largeFeatureSeed); // Spigot
+        Random random = this.c.a(i1, j1, this.c.spigotConfigTitanium.seedFeature); // Spigot
 
         i1 *= this.g;
         j1 *= this.g;
diff --git a/src/main/java/net/minecraft/server/WorldGenVillage.java b/src/main/java/net/minecraft/server/WorldGenVillage.java
index 6648a70d..9ab4d312 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillage.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillage.java
@@ -53,7 +53,7 @@ public class WorldGenVillage extends StructureGenerator {
 
         int i1 = i / this.g;
         int j1 = j / this.g;
-        Random random = this.c.a(i1, j1, this.c.spigotConfig.villageSeed); // Spigot
+        Random random = this.c.a(i1, j1, this.c.spigotConfigTitanium.seedVillage); // Spigot
 
         i1 *= this.g;
         j1 *= this.g;
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index 4eee95ae..f4e4c915 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -8,6 +8,7 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -17,7 +18,6 @@ import java.util.UUID;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.world.CraftFormatManager;
 import org.bukkit.craftbukkit.world.IWorldFormat;
-import org.github.paperspigot.PaperSpigotConfig;
 import org.github.paperspigot.exception.ServerInternalException;
 // CraftBukkit end
 
@@ -130,7 +130,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     }
 
     public void save(EntityHuman entityhuman) {
-        if(!PaperSpigotConfig.savePlayerData) return; // Paper - Make player data saving configurable
+        if(!TitaniumConfig.get().paper.settings.savePlayerData) return; // Paper - Make player data saving configurable
         try {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 355d1686..f17873ef 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -13,6 +13,7 @@ import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -64,10 +65,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         // CraftBukkit end
         this.server = minecraftserver;
         this.tracker = new EntityTracker(this);
-        this.manager = new PlayerChunkMap(this, spigotConfig.viewDistance); // Spigot
+        this.manager = new PlayerChunkMap(this, spigotConfigTitanium.viewDistance); // Spigot
         this.worldProvider.a(this);
         this.chunkProvider = this.k();
-        this.Q = ((org.bukkit.craftbukkit.CraftTravelAgent) new org.bukkit.craftbukkit.CraftTravelAgent(this).setSearchRadius(paperSpigotConfig.portalSearchRadius)); // CraftBukkit // Paper - configurable search radius
+        this.Q = ((org.bukkit.craftbukkit.CraftTravelAgent) new org.bukkit.craftbukkit.CraftTravelAgent(this).setSearchRadius(paperConfigTitanium.portalSearchRadius)); // CraftBukkit // Paper - configurable search radius
         this.B();
         this.C();
         this.getWorldBorder().a(minecraftserver.aI());
@@ -259,7 +260,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         timings.chunkTicks.startTiming(); // Spigot
         this.h();
         timings.chunkTicks.stopTiming(); // Spigot
-        spigotConfig.antiXrayInstance.flushUpdates(this); // PaperSpigot
+        spigotConfigTitanium.getAntiXray().flushUpdates(this); // PaperSpigot
         this.methodProfiler.c("chunkMap");
         timings.doChunkMap.startTiming(); // Spigot
         this.manager.flush();
@@ -430,7 +431,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 int i1;
                 BlockPosition blockposition;
 
-                if (!this.paperSpigotConfig.disableThunder && this.random.nextInt(100000) == 0 && this.S() && this.R()) { // PaperSpigot - Disable thunder
+                if (!this.paperConfigTitanium.disableThunder && this.random.nextInt(100000) == 0 && this.S() && this.R()) { // PaperSpigot - Disable thunder
                     this.m = this.m * 3 + 1013904223;
                     i1 = this.m >> 2;
                     blockposition = this.a(new BlockPosition(k + (i1 & 15), 0, l + (i1 >> 8 & 15)));
@@ -440,7 +441,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
 
                 this.methodProfiler.c("iceandsnow");
-                if (!this.paperSpigotConfig.disableIceAndSnow && this.random.nextInt(16) == 0) { // PaperSpigot - Disable ice and snow
+                if (!this.paperConfigTitanium.disableIceAndSnow && this.random.nextInt(16) == 0) { // PaperSpigot - Disable ice and snow
                     this.m = this.m * 3 + 1013904223;
                     i1 = this.m >> 2;
                     blockposition = this.q(new BlockPosition(k + (i1 & 15), 0, l + (i1 >> 8 & 15)));
@@ -512,7 +513,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         }
         // Spigot Start
-        if ( spigotConfig.clearChunksOnTick )
+        if ( spigotConfigTitanium.clearTickList )
         {
             chunkTickList.clear();
         }
@@ -605,7 +606,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
 
         super.tickEntities();
-        spigotConfig.currentPrimedTnt = 0; // Spigot
+        spigotConfigTitanium.currentPrimedTnt = 0; // Spigot
     }
 
     public void j() {
@@ -632,8 +633,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                     // CraftBukkit end
                 */
-                if (i > paperSpigotConfig.tickNextTickCap) {
-                    i = paperSpigotConfig.tickNextTickCap;
+                if (i > paperConfigTitanium.tickNextTickListCap) {
+                    i = paperConfigTitanium.tickNextTickListCap;
                 }
                 // PaperSpigot end
 
@@ -655,7 +656,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 timings.scheduledBlocksCleanup.stopTiming(); // Spigot
 
                 // PaperSpigot start - Allow redstone ticks to bypass the tickNextTickListCap
-                if (paperSpigotConfig.tickNextTickListCapIgnoresRedstone) {
+                if (paperConfigTitanium.tickNextTickListCapIgnoresRedstone) {
                     Iterator<NextTickListEntry> iterator = this.M.iterator();
                     while (iterator.hasNext()) {
                         NextTickListEntry next = iterator.next();
@@ -688,7 +689,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                         if (iblockdata.getBlock().getMaterial() != Material.AIR && Block.a(iblockdata.getBlock(), nextticklistentry.a())) {
                             try {
-                                stopPhysicsEvent = !PaperSpigotConfig.firePhysicsEventForRedstone && (iblockdata.getBlock() instanceof BlockDiodeAbstract || iblockdata.getBlock() instanceof BlockRedstoneTorch); // Paper
+                                stopPhysicsEvent = !TitaniumConfig.get().paper.firePhysicsEventForRedstone && (iblockdata.getBlock() instanceof BlockDiodeAbstract || iblockdata.getBlock() instanceof BlockRedstoneTorch); // Paper
                                 iblockdata.getBlock().b((World) this, nextticklistentry.a, iblockdata, this.random);
                             } catch (Throwable throwable) {
                                 CrashReport crashreport = CrashReport.a(throwable, "Exception while ticking a block");
diff --git a/src/main/java/net/titanium/config/BukkitConfig.java b/src/main/java/net/titanium/config/BukkitConfig.java
new file mode 100644
index 00000000..a52bafcc
--- /dev/null
+++ b/src/main/java/net/titanium/config/BukkitConfig.java
@@ -0,0 +1,114 @@
+package net.titanium.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import org.bukkit.Warning;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+
+public class BukkitConfig extends TitaniumConfigSection {
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends TitaniumConfigSection {
+
+        @Comment("Whether the end world is loaded.")
+        public boolean allowEnd = true;
+
+        @Comment("Should a warning message be sent to console when the server is lagging or behind.")
+        public boolean warnOnOverload = true;
+
+        @Comment("On restart, plugins in this folder will be moved and updated.")
+        public String updateFolder = "update";
+
+        @Comment("TBH I don't know what is it, but maybe here it is explained better https://bukkit.fandom.com/wiki/Permissions.yml.")
+        public String permissionsFile = "permissions.yml";
+
+        @Comment("Enable the /timings command to track the execution time of events by plugins.")
+        public boolean pluginProfiling = false;
+
+        @Comment("Delay in milliseconds for a client to reconnect.")
+        @Comment("Disabled if less than or equal to 0.")
+        public int connectionThrottle = 4000;
+
+        @Comment("Whether to publish the plugin list in pings.")
+        public boolean queryPlugins = false;
+
+        @Comment("Should a warning message be sent to console when a deprecated event is used by a plugin.")
+        public Warning.WarningState deprecatedVerbose = Warning.WarningState.DEFAULT;
+
+        @Comment("Message sent to clients before shutdown.")
+        public String shutdownMessage = "Server closed!";
+
+        @Comment("Whether to not check if the login location is safe.")
+        public boolean useExactLoginLocation = false;
+
+        @Comment("Directory for where world files are stored.")
+        public String worldContainer = ".";
+
+    }
+
+    public ChunkGC chunkGC = new ChunkGC();
+
+    public static class ChunkGC extends TitaniumConfigSection {
+
+        @Comment("Ticks between each chunk garbage collection event.")
+        @Comment("Disabled if set to 0.")
+        public int periodInTicks = 600;
+
+        @Comment("Number of chunks that must have been loaded since the last chunk garbage collection event before another event is queued.")
+        @Comment("Disabled if set to 0.")
+        public int loadThreshold = 0;
+
+    }
+
+    public SpawnLimits spawnLimits = new SpawnLimits();
+
+    public static class SpawnLimits extends TitaniumConfigSection {
+
+        @Comment("Maximum number of naturally spawned monsters per-world.")
+        public int monsters = 80;
+        @Comment("Maximum number of naturally spawned animals per-world.")
+        public int animals = 15;
+        @Comment("Maximum number of naturally spawned water animals per-world.")
+        public int waterAnimals = 5;
+        @Comment("Maximum number of naturally spawned ambient entities per-world")
+        public int ambient = 15;
+
+    }
+
+    public TicksPer ticksPer = new TicksPer();
+
+    public static class TicksPer extends TitaniumConfigSection {
+
+        @Comment("Number of ticks before considering a natural animal spawn event.")
+        @Comment("Below 0 will reset to server default.")
+        public int animalSpawns = 400;
+
+        @Comment("Number of ticks before considering a natural monster spawn event.")
+        @Comment("Below 0 will reset to server default.")
+        public int monstersSpawn = 1;
+
+        @Comment("Number of ticks before all worlds are auto-saved.")
+        @Comment("Below 0 will reset to server default, so set to a high value if you want to disable.")
+        public int autosave = 6000;
+
+    }
+
+    public Database database = new Database();
+
+    public static class Database extends TitaniumConfigSection {
+
+        public String username = "bukkit";
+        public String isolation = "SERIALIZABLE";
+        public String driver = "org.sqlite.JDBC";
+        public String password = "walrus";
+        public String url = "jdbc:sqlite:{DIR}{NAME}.db";
+
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/PaperConfig.java b/src/main/java/net/titanium/config/PaperConfig.java
new file mode 100644
index 00000000..4c9ce387
--- /dev/null
+++ b/src/main/java/net/titanium/config/PaperConfig.java
@@ -0,0 +1,181 @@
+package net.titanium.config;
+
+import app.ashcon.sportpaper.server.KnockbackModificationCommand;
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.time.Duration;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.logging.Level;
+import net.minecraft.server.Items;
+import org.apache.commons.lang.StringUtils;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.spigotmc.RestartCommand;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class PaperConfig extends TitaniumConfigSection {
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends TitaniumConfigSection {
+
+        @Comment("Whether interaction packets should be limited from clients.")
+        public boolean limitPlayerInteractions = true;
+
+        @Comment("Size of the region file cache.")
+        public int regionFileCacheSize = 256;
+
+        @Comment("Speed at which baby zombies can move.")
+        public double babyZombieMovementSpeed = 0.5;
+
+        @Comment("Whether to save empty scoreboard teams.")
+        public boolean saveEmptyScoreboardTeams = false;
+
+        @Comment("Whether to save player data to disk.")
+        public boolean savePlayerData = true;
+
+        @Comment("Whether to actively tick worlds with no players.")
+        public boolean tickEmptyWorlds = true;
+
+        @Comment("Whether to abort server startup if at least one plugin fails to load.")
+        public boolean requireAllPlugins = false;
+
+        public SpamLimiter spamLimiter = new SpamLimiter();
+
+        public static class SpamLimiter extends TitaniumConfigSection {
+
+            @Comment("Value to increment for each tab complete event.")
+            public int tabSpamIncrement = 10;
+            @Comment("Maximum number of increment values before disconnecting the player.")
+            public int tabSpamLimit = 500;
+
+        }
+
+        @Comment("Duration to wait before suspending an server with no players online.")
+        public Duration emptyServerSuspend = Duration.ofMinutes(1);
+
+        @Comment("Whether arrow projectiles should have a random factor.")
+        public boolean includeRandomnessInArrowTrajectory = false;
+
+        @Comment("Whether arrow projectiles should add a random amount of damage (like in vanilla minecraft)")
+        public boolean includeRandomnessInArrowDamage = true;
+
+        @Comment("Number of ticks between player data saves to disk.")
+        public int playerAutoSaveRate = -1;
+
+        @Comment("Maximum number of player data to save per tick.")
+        @CustomKey("max-players-auto-save-per-tic")
+        public int maxPlayersAutoSavePerTick_ = 10;
+        @Exclude
+        public int maxPlayersAutoSavePerTick = 10;
+
+        @Override
+        public void loadProcessedProperties() {
+            if (!limitPlayerInteractions) {
+                Bukkit.getLogger().log(Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users");
+            }
+
+            if (!savePlayerData) {
+                Bukkit.getLogger().log(Level.WARNING, "Player Data Saving is currently disabled. Any changes to your players data, " +
+                        "such as inventories, experience points, advancements and the like will not be saved when they log out.");
+            }
+
+            if (maxPlayersAutoSavePerTick_ == -1) { // -1 Automatic / "Recommended"
+                // 10 should be safe for everyone unless your mass spamming player auto save
+                maxPlayersAutoSavePerTick = (playerAutoSaveRate == -1 || playerAutoSaveRate > 100) ? 10 : 20;
+            } else {
+                maxPlayersAutoSavePerTick = maxPlayersAutoSavePerTick_;
+            }
+        }
+
+    }
+
+    @Comment("Whether to fire a physics event for redstone activation.")
+    public boolean firePhysicsEventForRedstone = false;
+
+    @Comment("Percentage improvement to player damage with certain potions.")
+    public EffectModifiers effectModifiers = new EffectModifiers();
+
+    public static class EffectModifiers extends TitaniumConfigSection {
+
+        public double strength = 1.3;
+        public double weakness = -0.3;
+
+    }
+
+    @Comment("Whether to allow certain buckets to stack as items.")
+    public StackableBuckets stackableBuckets = new StackableBuckets();
+
+    public static class StackableBuckets extends TitaniumConfigSection {
+
+        public boolean lava = false;
+        public boolean water = false;
+        public boolean milk = false;
+
+        @Override
+        public void loadProcessedProperties() {
+            try {
+                Field maxStack = Material.class.getDeclaredField("maxStack");
+                maxStack.setAccessible(true);
+
+                if (lava) {
+                    maxStack.set(Material.LAVA_BUCKET, Material.BUCKET.getMaxStackSize());
+                    Items.LAVA_BUCKET.c(Material.BUCKET.getMaxStackSize());
+                }
+
+                if (water) {
+                    maxStack.set(Material.WATER_BUCKET, Material.BUCKET.getMaxStackSize());
+                    Items.WATER_BUCKET.c(Material.BUCKET.getMaxStackSize());
+                }
+
+                if (milk) {
+                    maxStack.set(Material.MILK_BUCKET, Material.BUCKET.getMaxStackSize());
+                    Items.MILK_BUCKET.c(Material.BUCKET.getMaxStackSize());
+                }
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+
+    }
+
+    @Comment("Send a warning to console when players are moving at excessive speeds.")
+    public boolean warnWhenSettingExcessiveVelocity = true;
+
+    @Comment("List of items that are allowed to keep invalid data values.")
+    public Set<Integer> dataValueAllowedItems = new HashSet<>();
+
+    @Comment("Configuration how knockback should behave.")
+    public Knockback knockback = new Knockback();
+
+    public static class Knockback extends TitaniumConfigSection {
+
+        public double friction = 2.0;
+        public double horizontal = 0.4;
+        public double vertical = 0.4;
+        public double verticalLimit = 0.4;
+        public double extraHorizontal = 0.5;
+        public double extraVertical = 0.1;
+
+        @Override
+        public void loadProcessedProperties() {
+            TitaniumConfig.COMMANDS.put("knockback", new KnockbackModificationCommand("knockback", friction, horizontal, vertical, verticalLimit, extraHorizontal, extraVertical));
+        }
+
+    }
+
+    public PaperWorldConfig worldSettings = new PaperWorldConfig();
+
+    public void loadProcessedProperties() {
+        Bukkit.getLogger().info("Data value allowed items: " + StringUtils.join(dataValueAllowedItems, ", "));
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/PaperWorldConfig.java b/src/main/java/net/titanium/config/PaperWorldConfig.java
new file mode 100644
index 00000000..f199ee60
--- /dev/null
+++ b/src/main/java/net/titanium/config/PaperWorldConfig.java
@@ -0,0 +1,320 @@
+package net.titanium.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import net.minecraft.server.MinecraftServer;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class PaperWorldConfig extends TitaniumConfigSection {
+
+    @Comment("Whether to log the per-world settings in console.")
+    public static boolean verbose = true;
+
+    @Comment("Number of ticks before attempting to spread grass.")
+    public int grassSpreadTickRate = 1;
+
+    @Comment("Whether to revert tnt cannon logic to 1.7.")
+    public boolean fixCannons = false;
+
+    @Comment("Percent of damage to receive while blocking.")
+    public float playerBlockingDamageMultiplier = 0.5F;
+
+    @Comment("Whether to delete invalid mob spawner items.")
+    public boolean removeInvalidMobSpawnerTileEntities = true;
+
+    @Comment("Whether to remove dead entities in the explosion radius.")
+    public boolean optimizeExplosions = false;
+
+    @Comment("Number of ticks to check for mob spawner locations.")
+    public int mobSpawnerTickRate = 1;
+
+    @Comment("Whether to cache chunks when sending packets.")
+    public boolean cacheChunkMaps = false;
+
+    @Comment("Magic number for how loud tnt explosions should be.")
+    public float tntExplosionVolume = 4.0F;
+
+    @Comment("Whether to disable the suffocation check before every teleportation event.")
+    public boolean disableTeleportationSuffocationCheck = false;
+
+    @Comment("Whether to consider player time in chunks as a factor to unload chunks.")
+    public boolean useChunkInhabitedTimer = true;
+
+    @Comment("Maximum number of chunks to auto save per tick.")
+    public int maxAutoSaveChunksPerTick = 24;
+
+    @Comment("Whether to delete corrupt tile entities.")
+    public boolean removeCorruptTileEntities = false;
+
+    @Comment("Y-level at which squids will spawn.")
+    public SquidSpawnHeight squidSpawnHeight = new SquidSpawnHeight();
+
+    public static class SquidSpawnHeight extends TitaniumConfigSection {
+
+        public double minimum = 45.0;
+        public double maximum = 63.0;
+
+    }
+
+    @Comment("Maximum number of blocks certain plants will grow.")
+    public MaxGrowthHeight maxGrowthHeight = new MaxGrowthHeight();
+
+    public static class MaxGrowthHeight extends TitaniumConfigSection {
+
+        public int cactus = 3;
+        public int reeds = 3;
+
+        @Override
+        public void loadProcessedProperties() {
+            log("Max growth height:");
+            log(" > Cactus: " + cactus);
+            log(" > Reeds: " + reeds);
+        }
+
+    }
+
+    @Comment("Number of ticks before a fish can be caught.")
+    public FishingTimeRange fishingTimeRange = new FishingTimeRange();
+
+    public static class FishingTimeRange extends TitaniumConfigSection {
+
+        @CustomKey("MinimumTicks")
+        public int minimumTicks = 100;
+        @CustomKey("MaximumTicks")
+        public int maximumTicks = 900;
+
+    }
+
+    @Comment("Magic number for food exhaustion rate for certain events.")
+    public PlayerExhaustion playerExhaustion = new PlayerExhaustion();
+
+    public static class PlayerExhaustion extends TitaniumConfigSection {
+
+        public float blockBreak = 0.025F;
+        public float swimming = 0.015F;
+
+    }
+
+    public DespawnRanges despawnRanges = new DespawnRanges();
+
+    public static class DespawnRanges extends TitaniumConfigSection {
+
+        @Comment("Distance in blocks that mobs are randomly queued for removal.")
+        @CustomKey("soft")
+        public int soft_ = 32;
+        @Exclude
+        public int soft = 0;
+
+        @Comment("Distance in blocks that mobs are immediately removed.")
+        @CustomKey("hard")
+        public int hard_ = 128;
+        @Exclude
+        public int hard = 0;
+
+        @Override
+        public void loadProcessedProperties() {
+            if (soft_ > hard_) {
+                soft_ = hard_;
+            }
+
+            log("Despawn ranges:");
+            log(" > Soft: " + soft_);
+            log(" > Hard: " + hard_);
+
+            soft = soft_ * soft_;
+            hard = hard_ * hard_;
+        }
+
+    }
+
+    @Comment("Y-level at which falling blocks will despawn.")
+    public int fallingBlockHeightNerf = 0;
+
+    @Comment("Whether to remove certain entities when entering unloaded chunks.")
+    public RemoveUnloaded removeUnloaded = new RemoveUnloaded();
+
+    public static class RemoveUnloaded extends TitaniumConfigSection {
+
+        public boolean enderpearls = true;
+        public boolean tntEntities = true;
+        public boolean fallingBlocks = true;
+
+    }
+
+    @Comment("Whether to load chunks when certain entities enter them.")
+    public LoadChunks loadChunks = new LoadChunks();
+
+    public static class LoadChunks extends TitaniumConfigSection {
+
+        public boolean enderpearls = false;
+        public boolean tntEntities = false;
+        public boolean fallingBlocks = false;
+
+    }
+
+    public GameMechanics gameMechanics = new GameMechanics();
+
+    public static class GameMechanics extends TitaniumConfigSection {
+
+        @Comment("Whether boats should always drop boat items.")
+        public boolean boatsDropBoats = false;
+
+        @Comment("Whether to disable critical hits in PvP.")
+        public boolean disablePlayerCrits = false;
+
+        @Comment("Whether to allow chests to open with cats on top of them.")
+        public boolean disableChestCatDetections = false;
+
+        @Comment("Whether to never send end credits.")
+        public boolean disableEndCredits = false;
+
+    }
+
+    @Comment("Whether to apply void damage to entities on top of a nether portal.")
+    public boolean netherCeilingVoidDamage = false;
+
+    @Comment("Whether liquids should drain faster than normal.")
+    public FastDrain fastDrain = new FastDrain();
+
+    public static class FastDrain extends TitaniumConfigSection {
+
+        public boolean lava = false;
+        public boolean water = false;
+
+    }
+
+    @Comment("Speed in ticks at which lava flows in different worlds.")
+    public LavaFlowSpeed lavaFlowSpeed = new LavaFlowSpeed();
+
+    public static class LavaFlowSpeed extends TitaniumConfigSection {
+
+        public int normal = 30;
+        public int nether = 10;
+
+    }
+
+    @Comment("Whether entities should not receive knockback from explosions.")
+    public boolean disableExplosionKnockback = false;
+
+    @Comment("Whether undead horses are allowed to be leashed.")
+    public boolean allowUndeadHorseLeashing = false;
+
+    @Comment("Speed in ticks at which water flows over lava.")
+    public int waterOverLavaFlowSpeed = 5;
+
+    @Comment("Y-level at which primed tnt will despawn.")
+    public int tntEntityHeightNerf = 0;
+
+    @Comment("Whether to recognize the hopper-check configuration options.")
+    public boolean useHopperCheck = false;
+
+    @Comment("Whether all chunks are allowed to spawn slimes.")
+    public boolean allChunksAreSlimeChunks = false;
+
+    @Comment("Number of ticks to update inventory containers.")
+    public int containerUpdateTickRate = 1;
+
+    @Comment("Whether to keep spawn chunks loaded at all times.")
+    public boolean keepSpawnLoaded = true;
+
+    @Comment("Whether falling blocks should not break when colliding with signs.")
+    public boolean fallingBlocksCollideWithSigns = false;
+
+    @Comment("Whether armor stands should be subject to collision checks.")
+    public boolean armorStandsDoCollisionEntityLookups = true;
+
+    @Comment("Whether to not send cave and ambient sounds.")
+    public boolean disableMoodSounds = false;
+
+    @Comment("Whether to use asynchronous lighting for better performance.")
+    public boolean useAsyncLightning = true;
+
+    @Comment("Maximum number of blocks to search for a nether portal before generating a new one.")
+    public int portalSearchRadius = 128;
+
+    @Comment("Whether to disable thunder events.")
+    public boolean disableThunder = false;
+
+    @Comment("Whether to disable ice and snow formation.")
+    public boolean disableIceAndSnow = false;
+
+    @Comment("Maximum number of objects that follow the tick loop.")
+    @Comment("Use with extreme caution.")
+    public int tickNextTickListCap = 10000;
+
+    @Comment("Whether or not to always tick redstone even if the number of ticking objects is above the limit.")
+    public boolean tickNextTickListCapIgnoresRedstone = false;
+
+    @Comment("Number of ticks before saving the world.")
+    @CustomKey("auto-save-interval")
+    public int autoSaveInterval_ = -1;
+    @Exclude
+    public int autoSaveInterval = -1;
+
+    @Comment("Whether to enable certain features during world generation.")
+    public GeneratorSettings generatorSettings = new GeneratorSettings();
+
+    public static class GeneratorSettings extends TitaniumConfigSection {
+
+        public boolean canyon = true;
+        public boolean caves = true;
+        public boolean dungeon = true;
+        public boolean fortress = true;
+        public boolean mineshaft = true;
+        public boolean monument = true;
+        public boolean stronghold = true;
+        public boolean temple = true;
+        public boolean village = true;
+        public boolean flatBedrock = false;
+
+    }
+
+    @Comment("Whether block locations are allowed to be tab completed.")
+    public boolean allowBlockLocationTabCompletion = true;
+
+    @Override
+    public void loadProcessedProperties() {
+        log("Grass Spread Tick Rate: " + grassSpreadTickRate);
+
+        log("Player blocking damage multiplier set to " + playerBlockingDamageMultiplier);
+
+        log("Remove invalid mob spawner tile entities: " + removeInvalidMobSpawnerTileEntities);
+
+        log("Squids will spawn between Y: " + squidSpawnHeight.minimum + " & Y: " + squidSpawnHeight.maximum);
+
+        if (fallingBlockHeightNerf > 0) {
+            log("Falling Block Height Limit set to Y: " + fallingBlockHeightNerf);
+        }
+        if (tntEntityHeightNerf > 0) {
+            log("TNT Entity Height Limit set to Y: " + tntEntityHeightNerf);
+        }
+
+        log("Allow undead horse types to be leashed: " + allowUndeadHorseLeashing);
+
+        log("Water over lava flow speed: " + waterOverLavaFlowSpeed);
+
+        log("Keep spawn chunk loaded: " + keepSpawnLoaded);
+
+        log("World async lighting: " + useAsyncLightning);
+
+        log("WorldServer TickNextTick cap set at " + tickNextTickListCap);
+        log("WorldServer TickNextTickList cap always processes redstone: " + tickNextTickListCapIgnoresRedstone);
+
+        if (autoSaveInterval_ > 0) {
+            autoSaveInterval = autoSaveInterval_;
+            log("Auto Save Interval: " + autoSaveInterval + " (" + (autoSaveInterval / 20) + "s)");
+        } else if (autoSaveInterval < 0) {
+            autoSaveInterval = MinecraftServer.getServer().autosavePeriod;
+        }
+    }
+
+    private static void log(String log) {
+        TitaniumConfig.log(verbose, log);
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/SpigotConfig.java b/src/main/java/net/titanium/config/SpigotConfig.java
new file mode 100644
index 00000000..83c145af
--- /dev/null
+++ b/src/main/java/net/titanium/config/SpigotConfig.java
@@ -0,0 +1,250 @@
+package net.titanium.config;
+
+import co.aikar.timings.TimingsManager;
+import com.google.common.collect.ImmutableSet;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import net.minecraft.server.AttributeRanged;
+import net.minecraft.server.GenericAttributes;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.config.Configuration;
+import org.bukkit.Bukkit;
+import org.spigotmc.WatchdogThread;
+import static net.titanium.config.TitaniumConfig.log;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class SpigotConfig extends TitaniumConfigSection {
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends TitaniumConfigSection {
+
+        @Comment("Whether to run in debugger mode.")
+        public boolean debug = false;
+
+        @Comment("Whether to write the user cache to disk only before shutdown.")
+        public boolean saveUserCacheOnStopOnly = false;
+
+        @Comment("Number of seconds to abort and print a thread dump when the server is unresponsive.")
+        public int timeoutTime = 60;
+
+        @Comment("Whether to run the restart-script on server-crash.")
+        public boolean restartOnCrash = false;
+
+        @Comment("Path to a restart script to turn the server back on.")
+        public String restartScript = "./start.sh";
+
+        @Comment("Whether to bind to the network only after all plugins are loaded.")
+        public boolean lateBind = false;
+
+        @Comment("Whether the server is running behind a bungee cord proxy")
+        public boolean bungeecord = false;
+
+        @Comment("Maximum number of players to publish in ping messages.")
+        public int sampleCount = 12;
+
+        @Comment("Number of ticks before shuffling the tick-order of players to prevent relog gaming to be first to get items.")
+        public int playerShuffle = 0;
+
+        @Comment("Whether to blacklist certain items that creative players can spawn.")
+        public boolean filterCreativeItems = true;
+
+        @Comment("Maximum number of entries in the usercache.json file.")
+        public int userCacheSize = 1000;
+
+        @Comment("Maximum number of entries in the integer cache, which is used extensively during world generation.")
+        public int cacheLimit = 1024;
+
+        @Comment("Magic number used as a threshold for invalid move events.")
+        public double movedWronglyThreshold = 0.0625;
+
+        @Comment("Maximum number of blocks per second a player can move before the event is cancelled.")
+        public double movedTooQuicklyThreshold = 100.0;
+
+        @Comment("Whether to fetch the UUID of old skulls that only contain a username.")
+        public boolean fetchSkulls = true;
+
+        @Comment("Number of networking threads to allocate.")
+        public int nettyThreads = 4;
+
+        @Comment("Maximum attribute values for various modifiers.")
+        public Attribute attribute = new Attribute();
+
+        public static class Attribute extends TitaniumConfigSection {
+
+            @CustomKey("maxHealth.max")
+            public double maxHealth = 2048;
+            @CustomKey("movementSpeed.max")
+            public double movementSpeed = 2048;
+            @CustomKey("attackDamage.max")
+            public double attackDamage = 2048;
+
+            @Override
+            public void loadProcessedProperties() {
+                ((AttributeRanged) GenericAttributes.maxHealth).b = maxHealth;
+                ((AttributeRanged) GenericAttributes.MOVEMENT_SPEED).b = movementSpeed;
+                ((AttributeRanged) GenericAttributes.ATTACK_DAMAGE).b = attackDamage;
+            }
+
+        }
+
+        @Override
+        public void loadProcessedProperties() {
+            if (debug && !LogManager.getRootLogger().isTraceEnabled()) {
+                // Enable debug logging
+                LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
+                Configuration conf = ctx.getConfiguration();
+                conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(org.apache.logging.log4j.Level.ALL);
+                ctx.updateLoggers(conf);
+            }
+
+            if (LogManager.getRootLogger().isTraceEnabled()) {
+                Bukkit.getLogger().info("Debug logging is enabled");
+            } else {
+                Bukkit.getLogger().info("Debug logging is disabled");
+            }
+
+            WatchdogThread.doStart(timeoutTime, restartOnCrash);
+
+            log("Server Ping Player Sample Count: " + sampleCount);
+
+            System.setProperty("io.netty.eventLoopThreads", Integer.toString(nettyThreads));
+            Bukkit.getLogger().log(Level.INFO, "Using {0} threads for Netty based IO", nettyThreads);
+        }
+
+    }
+
+    @Comment("Various messages sent to clients for errors.")
+    public Messages messages = new Messages();
+
+    public static class Messages extends TitaniumConfigSection {
+
+        public String restart = "&cServer is restarting!";
+        public String whitelist = "&cYou are not on the whitelist!";
+        public String unknownCommand = "&7Unknown command. Type &c/help &7for help.";
+        public String internalError ="&cAn internal error occurred while attempting to perform this command";
+        public String serverFull = "&cThe server is full!";
+        public String outdatedClient = "&7Outdated client! Please use &c{0}";
+        public String outdatedServer = "&7Outdated server! Server is on &c{0}";
+
+    }
+
+    public Commands commands = new Commands();
+
+    public static class Commands extends TitaniumConfigSection {
+
+        @Comment("Whether player commands should be logged.")
+        public boolean log = true;
+
+        @Comment("Whether command block commands should be logged to console.")
+        public boolean silentCommandblockConsole = false;
+
+        @Comment("Disables the bukkit variants of the following commands and defaults to the vanilla variants.")
+        public Set<String> replaceCommands = ImmutableSet.<String>builder()
+                .add("setblock")
+                .add("summon")
+                .add("testforblock")
+                .add("tellraw")
+                .build();
+
+        //TODO comment
+        public Set<String> spamExclusions = ImmutableSet.<String>builder()
+                .add("/skill")
+                .build();
+
+        @Comment("Change the verbosity of tab complete events.")
+        @Comment("Disable all tab completion with -1.")
+        @Comment("Enable server commands to be queryable with 0.")
+        @Comment("Require n letters to be typed before completing with n.")
+        public int tabComplete = 0;
+
+    }
+
+    @Comment("Various settings related to server timings and debugging.")
+    public Timings timings = new Timings();
+
+    public static class Timings extends TitaniumConfigSection {
+
+        public boolean enabled = true;
+        public boolean verbose = true;
+        public boolean serverNamePrivacy = false;
+        public List<String> hiddenConfigEntries = Arrays.asList("database", "bungeecord-addresses");
+        public int historyInterval = 300;
+        public int historyLength = 3600;
+
+        @Override
+        public void loadProcessedProperties() {
+            TimingsManager.privacy = serverNamePrivacy;
+            TimingsManager.hiddenConfigs = hiddenConfigEntries;
+
+            co.aikar.timings.Timings.setTimingsEnabled(enabled);
+            co.aikar.timings.Timings.setVerboseTimingsEnabled(verbose);
+            co.aikar.timings.Timings.setHistoryInterval(historyInterval * 20);
+            co.aikar.timings.Timings.setHistoryLength(historyLength * 20);
+
+            Bukkit.getLogger().log(Level.INFO, "Spigot Timings: " + enabled +
+                    " - Verbose: " + verbose +
+                    " - Interval: " + timeSummary(co.aikar.timings.Timings.getHistoryInterval() / 20) +
+                    " - Length: " + timeSummary(co.aikar.timings.Timings.getHistoryLength() / 20));
+        }
+
+        private static String timeSummary(int seconds) {
+            String time = "";
+            if (seconds > 60 * 60) {
+                time += TimeUnit.SECONDS.toHours(seconds) + "h";
+                seconds /= 60;
+            }
+
+            if (seconds > 0) {
+                time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+            }
+            return time;
+        }
+
+    }
+
+    public Stats stats = new Stats();
+
+    public static class Stats extends TitaniumConfigSection {
+
+        @Comment("Whether to disable saving of player statistics and achievements.")
+        public boolean disableSaving = false;
+
+        @Comment("Map of statistics and the values they should be forced.")
+        @CustomKey("forced-stats")
+        private Map<String, Map<String, Integer>> forcedStats_ = new HashMap<>();
+
+        @Exclude
+        public Map<String, Integer> forcedStats = new Object2IntOpenHashMap<>();
+
+        @Override
+        public void loadProcessedProperties() {
+            forcedStats_.forEach((key, value) ->
+                    value.forEach((key2, value2) ->
+                            forcedStats.put(key + "." + key2, value2)));
+
+            if (disableSaving && forcedStats.getOrDefault("achievement.openInventory", 0) < 1) {
+                Bukkit.getLogger().warning("*** WARNING *** stats.disable-saving is true but stats.forced-stats.achievement.openInventory" +
+                        " isn't set to 1. Disabling stat saving without forcing the achievement may cause it to get stuck on the player's " +
+                        "screen.");
+            }
+        }
+
+    }
+
+    public SpigotWorldConfig worldSettings = new SpigotWorldConfig();
+
+}
diff --git a/src/main/java/net/titanium/config/SpigotWorldConfig.java b/src/main/java/net/titanium/config/SpigotWorldConfig.java
new file mode 100644
index 00000000..ef4fd304
--- /dev/null
+++ b/src/main/java/net/titanium/config/SpigotWorldConfig.java
@@ -0,0 +1,315 @@
+package net.titanium.config;
+
+import com.google.common.collect.ImmutableSet;
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import java.util.Set;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class SpigotWorldConfig extends TitaniumConfigSection {
+
+    @Exclude
+    private static org.spigotmc.AntiXray ANTIXRAY_INSTANCE;
+
+    @Comment("Whether to log the per-world settings in console.")
+    public static boolean verbose = true;
+
+    public AntiXray antiXray = new AntiXray();
+
+    //TODO Create xray instance
+    public static class AntiXray extends TitaniumConfigSection {
+
+        @Comment("Whether to enable the anti-xray module.")
+        public boolean enabled = true;
+
+        @Comment("Controls which anti-xray modes to use.")
+        @Comment("Mode 1 will hide all ores with stone.")
+        @Comment("Mode 2 will create fake, clien-side ores around the world, which can impact client lag and network latency.")
+        public int engineMode = 1;
+
+        @Comment("IDs of blocks that should be hidden in mode 1.")
+        public Set<Integer> hideBlocks = ImmutableSet.<Integer>builder()
+                .add(14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130)
+                .build();
+
+        @Comment("IDs of blocks that should be replaced in mode 2.")
+        public Set<Integer> replaceBlocks = ImmutableSet.<Integer>builder()
+                .add(1, 5)
+                .build();
+
+        @Override
+        public void loadProcessedProperties() {
+            log("AntiXray: ");
+            log(" > Enabled: " + enabled);
+            log(" > Engine Mode: " + engineMode);
+            log(" > Hidden Blocks: " + hideBlocks);
+            log(" > Replace Blocks: " + replaceBlocks);
+
+            ANTIXRAY_INSTANCE = new org.spigotmc.AntiXray(this);
+        }
+
+    }
+
+    @Comment("Whether to remove AI from mobs that originate from mob spawners.")
+    public boolean nerfSpawnerMobs = false;
+
+    @Comment("Speed at which certain crops will grow.")
+    @Comment("Changing these values will not affect performance.")
+    public Growth growth = new Growth();
+
+    public static class Growth extends TitaniumConfigSection {
+
+        public int cactusModifier = 100;
+        public int caneModifier = 100;
+        public int melonModifier = 100;
+        public int pumpkinModifier = 100;
+        public int wheatModifier = 100;
+        public int mushroomModifier = 100;
+        public int saplingModifier = 100;
+        public int netherWartModifier = 100;
+
+        @Override
+        public void loadProcessedProperties() {
+            log("Growth modifiers:");
+            cactusModifier = validateAndLog("Cactus", cactusModifier);
+            caneModifier = validateAndLog("Cane", caneModifier);
+            melonModifier = validateAndLog("Melon", melonModifier);
+            pumpkinModifier = validateAndLog("Pumpkin", pumpkinModifier);
+            wheatModifier = validateAndLog("Wheat", wheatModifier);
+            mushroomModifier = validateAndLog("Mushroom", mushroomModifier);
+            saplingModifier = validateAndLog("Sapling", saplingModifier);
+            netherWartModifier = validateAndLog("Nether Wart", netherWartModifier);
+        }
+
+        private int validateAndLog(String crop, int modifier) {
+            if (modifier == 0) {
+                log("Cannot set " + crop + " growth to zero, defaulting to 100");
+                modifier = 100;
+            }
+            log(" > " + crop + ": " + modifier + "%");
+
+            return modifier;
+        }
+
+    }
+
+    @Comment("Radius of chunks around players that mobs will naturally spawn.")
+    public byte mobSpawnRange = 4;
+
+    @Comment("Radius in blocks around players that mobs are marked as active and are ticked.")
+    public EntityActivationRange entityActivationRange = new EntityActivationRange();
+
+    public static class EntityActivationRange extends TitaniumConfigSection {
+
+        public int animals = 32;
+        public int monsters = 32;
+        public int ambient = 16;
+
+        @Override
+        public void loadProcessedProperties() {
+            log("Entity activation ranges:");
+            log(" > Animals: " + animals + " blocks");
+            log(" > Monsters: " + monsters + " blocks");
+            log(" > Ambient: " + ambient + " blocks");
+        }
+
+    }
+
+    @Comment("Radius in blocks around players that the client will see.")
+    @Comment("Only affects client-side performance.")
+    public EntityTrackingRange entityTrackingRange = new EntityTrackingRange();
+
+    public static class EntityTrackingRange extends TitaniumConfigSection {
+
+        public int players = 48;
+        public int animals = 48;
+        public int monsters = 48;
+        public int misc = 32;
+        public int other = 64;
+
+        @Override
+        public void loadProcessedProperties() {
+            log("Entity tracking ranges:");
+            log(" > Players: " + players + " blocks");
+            log(" > Animals: " + animals + " blocks");
+            log(" > Monsters: " + monsters + " blocks");
+            log(" > Misc: " + misc + " blocks");
+            log(" > Other: " + other + " blocks");
+        }
+
+    }
+
+    @Comment("Number of ticks between each of the following events.")
+    public TicksPer ticksPer = new TicksPer();
+
+    public static class TicksPer extends OkaeriConfig {
+
+        public int hopperTransfer = 8;
+        public int hopperCheck = 8;
+
+        public void loadProcessedProperties() {
+            log(" > Transfer: " + hopperTransfer);
+            log(" > Check: " + hopperCheck);
+        }
+
+    }
+
+    @Comment("Maximum throughput of items in a hopper per tick cycle.")
+    public int hopperAmount = 1;
+
+    @Comment("Whether to randomly sample chunks and validate lighting integrity.")
+    public boolean randomLightUpdates = false;
+
+    @Comment("Whether to save generic structure information.")
+    @Comment("Only affects certain gameplay features such as witches spawning in huts.")
+    public boolean saveStructureInfo = true;
+
+    @Comment("Maximum number of chunks to send per packet.")
+    public int maxBulkChunks = 10;
+
+    @Comment("Maximum number of other entities and entity can collide with per tick.")
+    public int maxEntityCollisions = 8;
+
+    @Comment("Radius around dragons that players will hear the death sound.")
+    public int dragonDeathSoundRadius = 0;
+
+    @Comment("Radius around withers that players will hear the spawn sound.")
+    public int witherSpawnSoundRadius = 0;
+
+    @Comment("Random seed used to generate and place villages.")
+    public int seedVillage = 10387312;
+
+    @Comment("Random seed used to generate and place nether strongholds.")
+    public int seedFeature = 14357617;
+
+    @Comment("Number of hunger points to subtract upon each event.")
+    public Hunger hunger = new Hunger();
+
+    public static class Hunger extends TitaniumConfigSection {
+
+        public float walkExhaustion = 0.2F;
+        public float sprintExhaustion = 0.8F;
+        public float combatExhaustion = 0.3F;
+        public float regenExhaustion = 3F;
+
+    }
+
+    @Comment("Maximum number of primed tnt entities per tick.")
+    public int maxTntPerTick = 100;
+
+    @Exclude
+    public static int currentPrimedTnt = 0;
+
+    @Comment("Maximum number of milliseconds for entity movements tasks to have before getting skipped.")
+    @Comment("Use 1000 to disable this feature, as recommended by paper.")
+    public MaxTickTime maxTickTime = new MaxTickTime();
+
+    public static class MaxTickTime extends TitaniumConfigSection {
+
+        public int tile = 50;
+        public int entity = 50;
+
+    }
+
+    @Comment("Set the tick update interval for hanging entities.")
+    public int hangingTickFrequency = 100;
+
+    @Comment("Number of ticks before items on the ground will despawn.")
+    public int itemDespawnRate = 6000;
+
+    @Comment("Number of ticks before despawning arrows on the ground.")
+    public int arrowDespawnRate = 1200;
+
+    @Comment("Radius in blocks for certain entities to merge together.")
+    public MergeRadius mergeRadius = new MergeRadius();
+
+    public static class MergeRadius extends TitaniumConfigSection {
+
+        public double item = 2.5;
+        public double exp = 3.0;
+
+        @Override
+        public void loadProcessedProperties() {
+            log("Merge radius:");
+            log(" > Items: " + item);
+            log(" > Experience: " + exp);
+        }
+
+    }
+
+    @Comment("Whether to allow zombie pigmen from spawning inside nether portals.")
+    public boolean enableZombiePigmenPortalSpawns = true;
+
+    @Comment("Number of chunks to load around each player.")
+    @Comment("Must be within 1 and 15.")
+    public int viewDistance = 10;
+
+    @Comment("Radius around withers that players will hear the spawn sound.")
+    public boolean zombieAggressiveTowardsVillager = true;
+
+    @Comment("Number of chunks to be updated for growth per tick.")
+    public int chunksPerTick = 650;
+
+    @Comment("Prevent the tick list from increasing over time.")
+    @Comment("Use with caution, because world growth is stunted.")
+    public boolean clearTickList = false;
+
+    @Override
+    public void loadProcessedProperties() {
+        log("Nerfing mobs spawned from spawners: " + nerfSpawnerMobs);
+
+        log("Mob Spawn Range: " + mobSpawnRange);
+
+        log("Hopper:");
+        ticksPer.loadProcessedProperties();
+        log(" > Amount: " + hopperAmount);
+
+        log("Random Lighting Updates: " + randomLightUpdates);
+
+        log("Structure Info Saving: " + saveStructureInfo);
+        if (!saveStructureInfo) {
+            log("*** WARNING *** You have selected to NOT save structure info. This may cause structures such as fortresses to not spawn mobs!");
+            log("*** WARNING *** Please use this option with caution, SpigotMC is not responsible for any issues this option may cause in the future!");
+        }
+
+        log("Sending up to " + maxBulkChunks + " chunks per packet");
+
+        log("Max Entity Collisions: " + maxEntityCollisions);
+
+        log("Custom Map Seeds: ");
+        log(" > Village: " + seedVillage);
+        log(" > Feature: " + seedFeature);
+
+        log("Max TNT Explosions: " + maxTntPerTick);
+
+        log("Max Tick Time: ");
+        log(" > Tile Entities: " + maxTickTime.tile + "ms");
+        log(" > Entities: " + maxTickTime.entity + "ms");
+
+        log("Despawn rate: ");
+        log(" > Items: " + itemDespawnRate);
+        log(" > Arrows: " + arrowDespawnRate);
+
+        log("Allow Zombie Pigmen to spawn from portal blocks: " + enableZombiePigmenPortalSpawns);
+
+        log("View Distance: " + viewDistance);
+
+        log("Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager);
+
+        log("Chunks to Grow per Tick: " + chunksPerTick);
+        log("Clear tick list: " + clearTickList);
+    }
+
+    public static org.spigotmc.AntiXray getAntiXray() {
+        return ANTIXRAY_INSTANCE;
+    }
+
+    private static void log(String log) {
+        TitaniumConfig.log(verbose, log);
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
new file mode 100644
index 00000000..7d270143
--- /dev/null
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -0,0 +1,123 @@
+package net.titanium.config;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.Header;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import eu.okaeri.configs.exception.OkaeriException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.spigotmc.RestartCommand;
+import org.spigotmc.TicksPerSecondCommand;
+
+@Header("This is the main configuration file for Titanium.")
+@Header("It's collect all the settings from bukkit.yml, spigot.yml etc.")
+@Header("Command aliases also go in this file, just put what you would normally put in commands.yml under a commands: tag")
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class TitaniumConfig extends OkaeriConfig {
+
+    // For tests to work properly
+    @Exclude
+    private static TitaniumConfig DEFAULT_INSTANCE = new TitaniumConfig();
+
+    @Exclude
+    private static TitaniumConfig INSTANCE;
+
+    @Exclude
+    public static Map<String, Command> COMMANDS = new HashMap<>();
+
+    @Comment("Configuration from bukkit.yml")
+    public BukkitConfig bukkit = new BukkitConfig();
+
+    @Comment("Configuration from spigot.yml")
+    public SpigotConfig spigot = new SpigotConfig();
+
+    @Comment("Configuration from paper.yml")
+    public PaperConfig paper = new PaperConfig();
+
+    public Commands commands = new Commands();
+
+    public static class Commands extends TitaniumConfigSection {
+
+        public Set<String> commandBlockOverrides = new HashSet<>();
+
+        public Map<String, Set<String>> aliases = ImmutableMap.<String, Set<String>>builder()
+                .put("icanhasbukkit", ImmutableSet.of("version"))
+                .build();
+
+    }
+
+    @Override
+    public OkaeriConfig load() throws OkaeriException {
+        super.load();
+
+        INSTANCE = this;
+
+        this.loadProperties();
+
+        COMMANDS.put("restart", new RestartCommand("restart"));
+        COMMANDS.put("tps", new TicksPerSecondCommand("tps"));
+
+        return this;
+    }
+
+    private void loadProperties() {
+        bukkit.loadProperties();
+        spigot.loadProperties();
+        paper.loadProperties();
+    }
+
+    public void registerCommands() {
+        COMMANDS.forEach((key, commands) ->
+                MinecraftServer.getServer().server
+                        .getCommandMap()
+                        .register(key, "Titanium", commands));
+    }
+
+    public static TitaniumConfig get() {
+        if (INSTANCE == null) {
+            return DEFAULT_INSTANCE;
+        }
+        return INSTANCE;
+    }
+
+    public static void saveConfig() {
+        if (INSTANCE == null) {
+            return;
+        }
+        INSTANCE.save();
+    }
+
+    static String color(String input) {
+        return ChatColor.translateAlternateColorCodes('&', input);
+    }
+
+    static void log(boolean verbose, String log) {
+        if (Bukkit.getLogger() == null) {
+            return;
+        }
+
+        if (!verbose) {
+            return;
+        }
+
+        Bukkit.getLogger().info(log);
+    }
+
+
+    static void log(String log) {
+        log(true, log);
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/TitaniumConfigSection.java b/src/main/java/net/titanium/config/TitaniumConfigSection.java
new file mode 100644
index 00000000..3e7b2476
--- /dev/null
+++ b/src/main/java/net/titanium/config/TitaniumConfigSection.java
@@ -0,0 +1,58 @@
+package net.titanium.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Exclude;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+import org.bukkit.Bukkit;
+
+public abstract class TitaniumConfigSection extends OkaeriConfig {
+
+    private final static Class<TitaniumConfigSection> SECTION_CLASS = TitaniumConfigSection.class;
+
+    public void loadProcessedProperties() {
+    }
+
+    public void loadProperties() {
+        this.loadProcessedProperties();
+
+        Class<?> clazz = this.getClass();
+        for (Field field : clazz.getDeclaredFields()) {
+            if (colorField(field)) {
+                continue;
+            }
+
+            if (field.getAnnotation(Exclude.class) != null) {
+                continue;
+            }
+
+            if (SECTION_CLASS.isAssignableFrom(field.getType())) {
+                field.setAccessible(true);
+                try {
+                    ((TitaniumConfigSection) field.get(this)).loadProperties();
+                } catch (Exception ex) {
+                    Bukkit.getLogger().log(Level.SEVERE, "Failed to load properties for " + field.getName(), ex);
+                }
+            }
+        }
+    }
+
+    private boolean colorField(Field field) {
+        try {
+            if (field.getType().equals(String.class)) {
+                field.set(this, TitaniumConfig.color((String) field.get(this)));
+                return true;
+            } else if (field.getType().equals(List.class)) {
+                List<String> list = (List<String>) field.get(this);
+                list.replaceAll(TitaniumConfig::color);
+                return true;
+            }
+        } catch (Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Failed to color property " + field.getName(), ex);
+        }
+        return false;
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/serdes/DecolorTransformer.java b/src/main/java/net/titanium/config/serdes/DecolorTransformer.java
new file mode 100644
index 00000000..8b853f85
--- /dev/null
+++ b/src/main/java/net/titanium/config/serdes/DecolorTransformer.java
@@ -0,0 +1,26 @@
+package net.titanium.config.serdes;
+
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.schema.GenericsPair;
+import eu.okaeri.configs.serdes.ObjectTransformer;
+import eu.okaeri.configs.serdes.SerdesContext;
+import eu.okaeri.configs.serdes.SimpleObjectTransformer;
+import java.util.regex.Pattern;
+import org.bukkit.ChatColor;
+
+public class DecolorTransformer extends ObjectTransformer<String, String> {
+
+    @Exclude
+    private static final ObjectTransformer<String, String> TRANSFORMER = SimpleObjectTransformer.of(String.class, String.class, ChatColor::decolor);
+
+    @Override
+    public GenericsPair<String, String> getPair() {
+        return TRANSFORMER.getPair();
+    }
+
+    @Override
+    public String transform(String input, SerdesContext context) {
+        return TRANSFORMER.transform(input, context);
+    }
+
+}
diff --git a/src/main/java/net/titanium/config/serdes/WarningStateTransformer.java b/src/main/java/net/titanium/config/serdes/WarningStateTransformer.java
new file mode 100644
index 00000000..76dcadfd
--- /dev/null
+++ b/src/main/java/net/titanium/config/serdes/WarningStateTransformer.java
@@ -0,0 +1,25 @@
+package net.titanium.config.serdes;
+
+import eu.okaeri.configs.schema.GenericsPair;
+import eu.okaeri.configs.serdes.BidirectionalTransformer;
+import eu.okaeri.configs.serdes.SerdesContext;
+import org.bukkit.Warning;
+
+public class WarningStateTransformer extends BidirectionalTransformer<String, Warning.WarningState> {
+
+    @Override
+    public GenericsPair<String, Warning.WarningState> getPair() {
+        return this.genericsPair(String.class, Warning.WarningState.class);
+    }
+
+    @Override
+    public Warning.WarningState leftToRight(String data, SerdesContext serdesContext) {
+        return Warning.WarningState.value(data);
+    }
+
+    @Override
+    public String rightToLeft(Warning.WarningState data, SerdesContext serdesContext) {
+        return data.name().toLowerCase();
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 43c62b9a..a1d486cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit;
 
-import it.unimi.dsi.fastutil.objects.ObjectLists;
+import eu.okaeri.configs.ConfigManager;
+import eu.okaeri.configs.serdes.commons.SerdesCommons;
+import eu.okaeri.configs.yaml.bukkit.YamlBukkitConfigurer;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.FileInputStream;
@@ -29,6 +31,9 @@ import javax.imageio.ImageIO;
 import net.minecraft.server.*;
 
 import app.ashcon.sportpaper.server.WorldGenSettingsManager;
+import net.titanium.config.TitaniumConfig;
+import net.titanium.config.serdes.DecolorTransformer;
+import net.titanium.config.serdes.WarningStateTransformer;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -111,7 +116,6 @@ import com.avaje.ebean.config.ServerConfig;
 import com.avaje.ebean.config.dbplatform.SQLitePlatform;
 import com.avaje.ebeaninternal.server.lib.sql.TransactionIsolation;
 import com.google.common.base.Charsets;
-import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
@@ -144,6 +148,7 @@ public final class CraftServer implements Server {
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
+    private TitaniumConfig serverConfig; // Titanium
     private int monsterSpawn = -1;
     private int animalSpawn = -1;
     private int waterAnimalSpawn = -1;
@@ -197,18 +202,32 @@ public final class CraftServer implements Server {
             getLogger().info("Console input is disabled due to --noconsole command argument");
         }
 
-        SharedConfig.init((File) console.options.valueOf("sportpaper-settings")); // SportPaper
+        //SharedConfig.init((File) console.options.valueOf("titanium-settings")); // SportPaper // Titanium
 
-        overrideAllCommandBlockCommands = SharedConfig.config.getStringList("commands.command-block-overrides").contains("*");
-        ((SimplePluginManager) pluginManager).useTimings(BukkitConfig.pluginProfiling);
-        monsterSpawn = BukkitConfig.monsterSpawnLimit;
-        animalSpawn = BukkitConfig.animalSpawnLimit;
-        waterAnimalSpawn = BukkitConfig.waterAnimalSpawnLimit;
-        ambientSpawn = BukkitConfig.ambientSpawnLimit;
-        console.autosavePeriod = BukkitConfig.ticksPerAutosave;
-        warningState = WarningState.value(BukkitConfig.deprecatedVerbose);
-        chunkGCPeriod = BukkitConfig.chunkGCPeriodInTicks;
-        chunkGCLoadThresh = BukkitConfig.chunkGCLoadThreshold;
+        // Titanium start
+        serverConfig = ConfigManager.create(TitaniumConfig.class, (it) -> {
+            it.withConfigurer(new YamlBukkitConfigurer(), new SerdesCommons());
+            it.withSerdesPack(registry -> {
+                registry.register(new DecolorTransformer());
+                registry.register(new WarningStateTransformer());
+            });
+            it.withBindFile((File) console.options.valueOf("titanium-settings"));
+            it.saveDefaults();
+            it.load(true);
+        });
+        // Titanium end
+
+        overrideAllCommandBlockCommands = TitaniumConfig.get().commands.commandBlockOverrides.contains("*");
+        net.titanium.config.BukkitConfig bukkit = serverConfig.bukkit;
+        ((SimplePluginManager) pluginManager).useTimings(bukkit.settings.pluginProfiling);
+        monsterSpawn = bukkit.spawnLimits.monsters;
+        animalSpawn = bukkit.spawnLimits.animals;
+        waterAnimalSpawn = bukkit.spawnLimits.waterAnimals;
+        ambientSpawn = bukkit.spawnLimits.ambient;
+        console.autosavePeriod = bukkit.ticksPer.autosave;
+        warningState = bukkit.settings.deprecatedVerbose;
+        chunkGCPeriod = bukkit.chunkGC.periodInTicks;
+        chunkGCLoadThresh = bukkit.chunkGC.loadThreshold;
         loadIcon();
 
         // Spigot Start - Moved to old location of new DedicatedPlayerList in DedicatedServer
@@ -218,11 +237,11 @@ public final class CraftServer implements Server {
     }
 
     public boolean getCommandBlockOverride(String command) {
-        return overrideAllCommandBlockCommands || SharedConfig.config.getStringList("commands.command-block-overrides").contains(command);
+        return overrideAllCommandBlockCommands || TitaniumConfig.get().commands.commandBlockOverrides.contains(command);
     }
 
     private void pluginFailedToLoad(Plugin plugin) {
-        if(PaperSpigotConfig.requireAllPlugins) {
+        if(TitaniumConfig.get().paper.settings.requireAllPlugins) {
             throw new RuntimeException("Required plugin " + plugin.getDescription().getFullName() + " failed to load (server will shutdown)");
         }
     }
@@ -287,7 +306,7 @@ public final class CraftServer implements Server {
         for (ICommand cmd : commands.values()) {
             // Spigot start
             VanillaCommandWrapper wrapper = new VanillaCommandWrapper((CommandAbstract) cmd, LocaleI18n.get(cmd.getUsage(null)));
-            if (org.spigotmc.SpigotConfig.replaceCommands.contains( wrapper.getName() ) ) {
+            if (TitaniumConfig.get().spigot.commands.replaceCommands.contains( wrapper.getName() ) ) {
                 if (first) {
                     commandMap.register("minecraft", wrapper);
                 }
@@ -495,7 +514,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean getAllowEnd() {
-        return BukkitConfig.allowEnd;
+        return serverConfig.bukkit.settings.allowEnd;
     }
 
     @Override
@@ -504,11 +523,11 @@ public final class CraftServer implements Server {
     }
 
     public boolean getWarnOnOverload() {
-        return BukkitConfig.warnOnOverlaod;
+        return serverConfig.bukkit.settings.warnOnOverload;
     }
 
     public boolean getQueryPlugins() {
-        return BukkitConfig.queryPlugins;
+        return serverConfig.bukkit.settings.queryPlugins;
     }
 
     @Override
@@ -533,7 +552,7 @@ public final class CraftServer implements Server {
 
     @Override
     public String getUpdateFolder() {
-        return BukkitConfig.updateFolder;
+        return serverConfig.bukkit.settings.updateFolder;
     }
 
     @Override
@@ -544,32 +563,27 @@ public final class CraftServer implements Server {
     @Override
     public long getConnectionThrottle() {
         // Spigot Start - Automatically set connection throttle for bungee configurations
-        if (org.spigotmc.SpigotConfig.bungee) {
+        if (TitaniumConfig.get().spigot.settings.bungeecord) {
             return -1;
         } else {
-            return BukkitConfig.connectionThrottle;
+            return serverConfig.bukkit.settings.connectionThrottle;
         }
         // Spigot End
     }
 
     @Override
     public int getTicksPerAnimalSpawns() {
-        return BukkitConfig.ticksPerAnimalSpawn;
+        return serverConfig.bukkit.ticksPer.animalSpawns;
     }
 
     @Override
     public int getTicksPerMonsterSpawns() {
-        return BukkitConfig.ticksPerMonsterSpawn;
+        return serverConfig.bukkit.ticksPer.monstersSpawn;
     }
 
     @Override
     public @Nullable Duration getEmptyServerSuspendDelay() {
-        try {
-            return Duration.parse(PaperSpigotConfig.emptyServerSuspendDelay);
-        } catch(Exception e) {
-            getLogger().log(Level.SEVERE, "Invalid configuration value", e);
-            return null;
-        }
+        return TitaniumConfig.get().paper.settings.emptyServerSuspend;
     }
 
     @Override
@@ -620,7 +634,7 @@ public final class CraftServer implements Server {
     // SportPaper start
     @Override
     public boolean dispatchCommand(CommandSender sender, String commandLine) {
-        return dispatchCommand(sender, commandLine, org.spigotmc.SpigotConfig.unknownCommandMessage);
+        return dispatchCommand(sender, commandLine, TitaniumConfig.get().spigot.messages.unknownCommand);
     }
     // SportPaper end
 
@@ -678,7 +692,7 @@ public final class CraftServer implements Server {
 
     @SuppressWarnings({ "unchecked", "finally" })
     private void loadCustomPermissions() {
-        File file = new File(BukkitConfig.permissionsFile);
+        File file = new File(serverConfig.bukkit.settings.permissionsFile);
         FileInputStream stream;
 
         try {
@@ -1026,12 +1040,14 @@ public final class CraftServer implements Server {
     public void configureDbConfig(ServerConfig config) {
         Validate.notNull(config, "Config cannot be null");
 
+        net.titanium.config.BukkitConfig.Database dbConfig = new net.titanium.config.BukkitConfig.Database();
+
         DataSourceConfig ds = new DataSourceConfig();
-        ds.setDriver(BukkitConfig.databaseDriver);
-        ds.setUrl(BukkitConfig.databaseUrl);
-        ds.setUsername(BukkitConfig.databaseUsername);
-        ds.setPassword(BukkitConfig.databasePassword);
-        ds.setIsolationLevel(TransactionIsolation.getLevel(BukkitConfig.databaseIsolation));
+        ds.setDriver(dbConfig.driver);
+        ds.setUrl(dbConfig.url);
+        ds.setUsername(dbConfig.username);
+        ds.setPassword(dbConfig.password);
+        ds.setIsolationLevel(TransactionIsolation.getLevel(dbConfig.isolation));
 
         if (ds.getDriver().contains("sqlite")) {
             config.setDatabasePlatform(new SQLitePlatform());
@@ -1083,24 +1099,10 @@ public final class CraftServer implements Server {
 
     @Override
     public Map<String, String[]> getCommandAliases() {
-
-        ConfigurationSection section = SharedConfig.config.getConfigurationSection("commands.aliases");
         Map<String, String[]> result = new LinkedHashMap<String, String[]>();
-
-        if (section != null) {
-            for (String key : section.getKeys(false)) {
-                List<String> commands;
-
-                if (section.isList(key)) {
-                    commands = section.getStringList(key);
-                } else {
-                    commands = ImmutableList.of(section.getString(key));
-                }
-
-                result.put(key, commands.toArray(new String[commands.size()]));
-            }
-        }
-
+        TitaniumConfig.get().commands.aliases.forEach((key, commands) -> {
+            result.put(key, commands.toArray(new String[commands.size()]));
+        });
         return result;
     }
 
@@ -1110,7 +1112,7 @@ public final class CraftServer implements Server {
 
     @Override
     public String getShutdownMessage() {
-        return BukkitConfig.shutdownMessage;
+        return serverConfig.bukkit.settings.shutdownMessage;
     }
 
     @Override
@@ -1142,18 +1144,21 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean useExactLoginLocation() {
-        return BukkitConfig.useExactLoginLocation;
+        return serverConfig.bukkit.settings.useExactLoginLocation;
     }
 
     public ChunkGenerator getGenerator(String world) {
-        ConfigurationSection section = BukkitConfig.getConfigurationSection("worlds");
+        String name = serverConfig.bukkit.get("worlds." + world + ".generator", String.class);
         ChunkGenerator result = null;
 
+        /* Titanium start
+        ConfigurationSection section = BukkitConfig.getConfigurationSection("worlds"); //TODO Move this somewhere
+
         if (section != null) {
             section = section.getConfigurationSection(world);
 
             if (section != null) {
-                String name = section.getString("generator");
+                String name = section.getString("generator");*/
 
                 if ((name != null) && (!name.equals(""))) {
                     String[] split = name.split(":", 2);
@@ -1175,8 +1180,9 @@ public final class CraftServer implements Server {
                         }
                     }
                 }
-            }
+        /*    }
         }
+        Titanium end */
 
         return result;
     }
@@ -1249,7 +1255,7 @@ public final class CraftServer implements Server {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( MinecraftServer.getServer().getOnlineMode() || org.spigotmc.SpigotConfig.bungee )
+            if ( MinecraftServer.getServer().getOnlineMode() || TitaniumConfig.get().spigot.settings.bungeecord)
             {
                 profile = MinecraftServer.getServer().getUserCache().getProfile( name );
             }
@@ -1407,7 +1413,7 @@ public final class CraftServer implements Server {
         }
 
         if (container == null) {
-            container = new File(BukkitConfig.worldContainer);
+            container = new File(serverConfig.bukkit.settings.worldContainer);
         }
 
         return container;
@@ -1557,7 +1563,7 @@ public final class CraftServer implements Server {
      */
     public List<String> tabCompleteCommand(Player player, String message, BlockPosition blockPosition) {
         // Spigot Start
-        if ( (org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains( " " ) )
+        if ( (TitaniumConfig.get().spigot.commands.tabComplete < 0 || message.length() <= TitaniumConfig.get().spigot.commands.tabComplete) && !message.contains( " " ) )
         {
             return ImmutableList.of();
         }
@@ -1567,7 +1573,7 @@ public final class CraftServer implements Server {
         try {
             // send location info if present
             // completions = getCommandMap().tabComplete(player, message.substring(1));
-            if (blockPosition == null || !((CraftWorld) player.getWorld()).getHandle().paperSpigotConfig.allowBlockLocationTabCompletion) {
+            if (blockPosition == null || !((CraftWorld) player.getWorld()).getHandle().paperConfigTitanium.allowBlockLocationTabCompletion) {
                 completions = getCommandMap().tabComplete(player, message.substring(1));
             } else {
                 completions = getCommandMap().tabComplete(player, message.substring(1), new Location(player.getWorld(), blockPosition.getX(), blockPosition.getY(), blockPosition.getZ()));
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 2c66dbee..c8504990 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -16,6 +16,7 @@ import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
 
 import app.ashcon.sportpaper.api.text.PersonalizedComponent;
+import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.Bukkit;
@@ -125,7 +126,7 @@ public class CraftWorld implements World {
     }
 
     public boolean checkTicking() {
-        boolean shouldTick = PaperSpigotConfig.tickEmptyWorlds || hasPlayers();
+        boolean shouldTick = TitaniumConfig.get().paper.settings.tickEmptyWorlds || hasPlayers();
         if(ticking) {
             if(!shouldTick) { // Empty
                 ticking = false;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index d1ce7a86..8d1a0380 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -149,13 +149,13 @@ public class Main {
 
                 acceptsAll(asList("demo"), "Demo mode");
 
-                // SportPaper start
-                acceptsAll(asList("SP", "sportpaper-settings"), "File for sportpaper settings")
+                // SportPaper start // Titanium start
+                acceptsAll(asList("SP", "sportpaper-settings", "TS", "titanium-settings"), "File for titanium settings")
                         .withRequiredArg()
                         .ofType(File.class)
-                        .defaultsTo(new File("sportpaper.yml"))
+                        .defaultsTo(new File("titanium.yml"))
                         .describedAs("Yml file");
-                // SportPaper end
+                // SportPaper end // Titanium end
 
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 2c1b591a..ad6b5959 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -9,6 +9,7 @@ import java.util.UUID;
 
 import net.minecraft.server.*;
 
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.Chunk;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
@@ -215,7 +216,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     public void setVelocity(Vector vel) {
         // Paper start - warn server owners when plugins try to set super high velocities
-        if (PaperSpigotConfig.warnForExcessiveVelocity) {
+        if (TitaniumConfig.get().paper.warnWhenSettingExcessiveVelocity) {
             if(vel.getX() > 4 || vel.getX() < -4 || vel.getY() > 4 || vel.getY() < -4 || vel.getZ() > 4 || vel.getZ() < -4) {
                 getServer().getLogger().warning("Excessive velocity set detected: tried to set velocity of entity #"+getEntityId()+" to ("+vel.getX()+","+vel.getY()+","+vel.getZ()+").");
                 Thread.dumpStack();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index ff4236cc..de54d41b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -859,7 +859,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (fromWorld == toWorld) {
             entity.playerConnection.teleport(to);
         } else {
-            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to, !toWorld.paperSpigotConfig.disableTeleportationSuffocationCheck);
+            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to, !toWorld.paperConfigTitanium.disableTeleportationSuffocationCheck);
         }
         return true;
     }
diff --git a/src/main/java/org/github/paperspigot/BukkitConfig.java b/src/main/java/org/github/paperspigot/BukkitConfig.java
index 169673d6..31fd0e6d 100644
--- a/src/main/java/org/github/paperspigot/BukkitConfig.java
+++ b/src/main/java/org/github/paperspigot/BukkitConfig.java
@@ -7,6 +7,7 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import java.util.List;
 import java.util.Map;
 
+@Deprecated
 public class BukkitConfig {
 
     public static YamlConfiguration config;
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 8d58d1f3..158eb3eb 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -13,6 +13,7 @@ import org.bukkit.Material;
 import org.bukkit.command.Command;
 import org.bukkit.configuration.file.YamlConfiguration;
 
+@Deprecated
 public class PaperSpigotConfig
 {
     public static YamlConfiguration config;
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index abe82f36..75a88c8a 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -6,6 +6,7 @@ import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
+@Deprecated
 public class PaperSpigotWorldConfig
 {
     private static YamlConfiguration config;
diff --git a/src/main/java/org/github/paperspigot/SharedConfig.java b/src/main/java/org/github/paperspigot/SharedConfig.java
index c79ad514..a6c22bf1 100644
--- a/src/main/java/org/github/paperspigot/SharedConfig.java
+++ b/src/main/java/org/github/paperspigot/SharedConfig.java
@@ -18,6 +18,7 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.logging.Level;
 
+@Deprecated
 public class SharedConfig {
 
     private static File CONFIG_FILE;
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 82416a53..8e351a7f 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -32,6 +32,7 @@ import net.minecraft.server.MathHelper;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.World;
 import co.aikar.timings.SpigotTimings;
+import net.titanium.config.SpigotWorldConfig;
 
 
 public class ActivationRange
@@ -67,14 +68,14 @@ public class ActivationRange
      * These entities are excluded from Activation range checks.
      *
      * @param entity
-     * @param world
+     * @param config
      * @return boolean If it should always tick.
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
     {
-        if ( ( entity.activationType == 3 && config.miscActivationRange == 0 )
-                || ( entity.activationType == 2 && config.animalActivationRange == 0 )
-                || ( entity.activationType == 1 && config.monsterActivationRange == 0 )
+        if ( ( entity.activationType == 3 && config.entityActivationRange.ambient == 0 )
+                || ( entity.activationType == 2 && config.entityActivationRange.animals == 0 )
+                || ( entity.activationType == 1 && config.entityActivationRange.monsters == 0 )
                 || entity instanceof EntityHuman
                 || entity instanceof EntityProjectile
                 || entity instanceof EntityEnderDragon
@@ -102,13 +103,13 @@ public class ActivationRange
     public static void activateEntities(World world)
     {
         SpigotTimings.entityActivationCheckTimer.startTiming();
-        final int miscActivationRange = world.spigotConfig.miscActivationRange;
-        final int animalActivationRange = world.spigotConfig.animalActivationRange;
-        final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
+        final int miscActivationRange = world.spigotConfigTitanium.entityActivationRange.ambient;
+        final int animalActivationRange = world.spigotConfigTitanium.entityActivationRange.animals;
+        final int monsterActivationRange = world.spigotConfigTitanium.entityActivationRange.monsters;
 
         int maxRange = Math.max( monsterActivationRange, animalActivationRange );
         maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.spigotConfig.viewDistance << 4 ) - 8, maxRange );
+        maxRange = Math.min( ( world.spigotConfigTitanium.viewDistance << 4 ) - 8, maxRange );
 
         for ( Entity player : (List<Entity>) (List) world.players )
         {
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index c2ad90c8..15fa2c01 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -26,6 +26,7 @@ public class AntiXray
     public final Set<BlockPosition> pendingUpdates = new HashSet<BlockPosition>();
     // PaperSpigot end
 
+    @Deprecated // Titanium
     public AntiXray(SpigotWorldConfig config)
     {
         // Set all listed blocks as true to be obfuscated
@@ -50,12 +51,34 @@ public class AntiXray
         replacementOres = blocks.toArray();
     }
 
+    // Titanium start
+    public AntiXray(net.titanium.config.SpigotWorldConfig.AntiXray config) {
+        // Set all listed blocks as true to be obfuscated
+        for (int id : (config.engineMode == 1) ? config.hideBlocks : config.replaceBlocks) {
+            obfuscateBlocks[id] = true;
+        }
+
+        // For every block
+        TByteSet blocks = new TByteHashSet();
+        for (Integer i : config.hideBlocks) {
+            Block block = Block.getById(i);
+            // Check it exists and is not a tile entity
+            if (block != null && !block.isTileEntity()) {
+                // Add it to the set of replacement blocks
+                blocks.add((byte) (int) i);
+            }
+        }
+        // Bake it to a flat array of replacements
+        replacementOres = blocks.toArray();
+    }
+    // Titanium end
+
     /**
      * PaperSpigot - Flush queued block updates for world.
      */
     public void flushUpdates(World world)
     {
-        if ( world.spigotConfig.antiXray && !pendingUpdates.isEmpty() )
+        if ( world.spigotConfigTitanium.antiXray.enabled && !pendingUpdates.isEmpty() )
         {
             queueUpdates = false;
 
@@ -75,7 +98,7 @@ public class AntiXray
      */
     public void updateNearbyBlocks(World world, BlockPosition position)
     {
-        if ( world.spigotConfig.antiXray )
+        if (  world.spigotConfigTitanium.antiXray.enabled )
         {
             // PaperSpigot start
             if ( queueUpdates )
@@ -96,7 +119,7 @@ public class AntiXray
      */
     public void obfuscateSync(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
     {
-        if ( world.spigotConfig.antiXray )
+        if ( world.spigotConfigTitanium.antiXray.enabled )
         {
             SpigotTimings.antiXrayObfuscateTimer.startTiming();
             obfuscate( chunkX, chunkY, bitmask, buffer, world );
@@ -110,7 +133,7 @@ public class AntiXray
     public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
     {
         // If the world is marked as obfuscated
-        if ( world.spigotConfig.antiXray )
+        if (  world.spigotConfigTitanium.antiXray.enabled )
         {
             // Initial radius to search around for air
             int initialRadius = 1;
@@ -174,7 +197,7 @@ public class AntiXray
                                     if ( !hasTransparentBlockAdjacent( world, new BlockPosition( startX + x, ( i << 4 ) + y, startZ + z ), initialRadius ) )
                                     {
                                         int newId = blockId;
-                                        switch ( world.spigotConfig.engineMode )
+                                        switch (  world.spigotConfigTitanium.antiXray.engineMode )
                                         {
                                             case 1:
                                                 // Replace with replacement material
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index e366f56e..10029389 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -4,6 +4,7 @@ import java.io.File;
 import java.util.List;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
@@ -37,7 +38,7 @@ public class RestartCommand extends Command
 
     public static void restart()
     {
-        restart( new File( SpigotConfig.restartScript ) );
+        restart( new File( TitaniumConfig.get().spigot.settings.restartScript ) );
     }
 
     public static void restart(final File script)
@@ -47,7 +48,7 @@ public class RestartCommand extends Command
         {
             if ( script.isFile() )
             {
-                System.out.println( "Attempting to restart with " + SpigotConfig.restartScript );
+                System.out.println( "Attempting to restart with " + TitaniumConfig.get().spigot.settings.restartScript );
 
                 // Disable Watchdog
                 WatchdogThread.doStop();
@@ -55,7 +56,7 @@ public class RestartCommand extends Command
                 // Kick all players
                 for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
                 {
-                    p.playerConnection.disconnect(SpigotConfig.restartMessage);
+                    p.playerConnection.disconnect(TitaniumConfig.get().spigot.messages.restart);
                 }
                 // Give the socket a chance to send the packets
                 try
@@ -113,7 +114,7 @@ public class RestartCommand extends Command
                 Runtime.getRuntime().addShutdownHook( shutdownHook );
             } else
             {
-                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+                System.out.println( "Startup script '" + TitaniumConfig.get().spigot.settings.restartScript + "' does not exist! Stopping server." );
             }
             System.exit( 0 );
         } catch ( Exception ex )
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 2b9358b2..b18ac3f5 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -23,6 +23,7 @@ import co.aikar.timings.Timings;
 import co.aikar.timings.TimingsManager;
 import org.github.paperspigot.SharedConfig;
 
+@Deprecated
 public class SpigotConfig
 {
     public static YamlConfiguration config;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 6438268d..a7ecf41b 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -6,6 +6,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.github.paperspigot.SharedConfig;
 
+@Deprecated
 public class SpigotWorldConfig
 {
     private static YamlConfiguration config;
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index 4bf4d2ac..64fdd83d 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -7,6 +7,7 @@ import net.minecraft.server.EntityItem;
 import net.minecraft.server.EntityItemFrame;
 import net.minecraft.server.EntityPainting;
 import net.minecraft.server.EntityPlayer;
+import net.titanium.config.SpigotConfig;
 
 public class TrackingRange
 {
@@ -21,31 +22,31 @@ public class TrackingRange
      */
     public static int getEntityTrackingRange(Entity entity, int defaultRange)
     {
-        SpigotWorldConfig config = entity.world.spigotConfig;
+        net.titanium.config.SpigotWorldConfig config = entity.world.spigotConfigTitanium;
         if ( entity instanceof EntityPlayer )
         {
-            return config.playerTrackingRange;
+            return config.entityTrackingRange.players;
         }  else if ( entity.activationType == 1 )
         {
-            return config.monsterTrackingRange;
+            return config.entityTrackingRange.monsters;
         } else if ( entity instanceof EntityGhast )
         {
-            if ( config.monsterTrackingRange > config.monsterActivationRange )
+            if ( config.entityTrackingRange.monsters > config.entityActivationRange.monsters )
             {
-                return config.monsterTrackingRange;
+                return config.entityTrackingRange.monsters;
             } else
             {
-                return config.monsterActivationRange;
+                return config.entityActivationRange.monsters;
             }
         } else if ( entity.activationType == 2 )
         {
-            return config.animalTrackingRange;
+            return config.entityTrackingRange.animals;
         } else if ( entity instanceof EntityItemFrame || entity instanceof EntityPainting || entity instanceof EntityItem || entity instanceof EntityExperienceOrb )
         {
-            return config.miscTrackingRange;
+            return config.entityTrackingRange.misc;
         } else 
         {
-            return config.otherTrackingRange;
+            return config.entityTrackingRange.other;
         }
     }
 }
-- 
2.32.0.windows.2

