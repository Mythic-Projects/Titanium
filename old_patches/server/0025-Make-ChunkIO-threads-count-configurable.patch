From 947dd0eaeed3b77b2ba9d860500c24a54c027b10 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 30 Apr 2022 18:56:32 +0200
Subject: [PATCH] Make ChunkIO threads count configurable


diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 9a4d74f2..f76119e0 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -49,9 +49,25 @@ public class TitaniumConfig extends OkaeriConfig {
     @Comment("Configuration from ion.yml")
     public IonConfig ion = new IonConfig();
 
-    //TODO comment this (https://github.com/CobbleSword/NachoSpigot/commit/64b8084cb8516df77d362512fe76dc54b17ba594)
+    @Comment("The max NBT size in bytes. The default value is 2097152 which is ~2Mb - it's insane big.")
+    @Comment("We are setting this to 50000 which is only ~0.05MB. That's enough in most cases.")
+    @Comment("Smaller values (Our 50000 is probably enough, but smaller value would be even better) prevents most NBT related overflow exploits (for eg. Books)")
     public long nbtReadLimiter = 50000L;
 
+    public Chunk chunk = new Chunk();
+
+    public static class Chunk extends TitaniumConfigSection {
+
+        public IO io = new IO();
+
+        //TODO Add comments to this
+        public static class IO extends TitaniumConfigSection {
+            public int baseThreads = 2; // PaperSpigot - Bumped value
+            public int playersPerThread = 50;
+        }
+
+    }
+
     public Commands commands = new Commands();
 
     public static class Commands extends TitaniumConfigSection {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 8d1a0380..4980c189 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -149,13 +149,13 @@ public class Main {
 
                 acceptsAll(asList("demo"), "Demo mode");
 
-                // SportPaper start // Titanium start
-                acceptsAll(asList("SP", "sportpaper-settings", "TS", "titanium-settings"), "File for titanium settings")
+                // Titanium start
+                acceptsAll(asList("TS", "titanium-settings"), "File for titanium settings")
                         .withRequiredArg()
                         .ofType(File.class)
                         .defaultsTo(new File("titanium.yml"))
                         .describedAs("Yml file");
-                // SportPaper end // Titanium end
+                // Titanium end
 
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index ed31ec83..7c5c60c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -5,11 +5,12 @@ import net.minecraft.server.ChunkProviderServer;
 import net.minecraft.server.ChunkRegionLoader;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.World;
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 
 public class ChunkIOExecutor {
-    static final int BASE_THREADS = 2; // PaperSpigot - Bumped value
-    static final int PLAYERS_PER_THREAD = 50;
+    static final int BASE_THREADS = TitaniumConfig.get().chunk.io.baseThreads;
+    static final int PLAYERS_PER_THREAD = TitaniumConfig.get().chunk.io.playersPerThread;
 
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
-- 
2.32.0.windows.2

