From bc726d2b10e42a1362bc2df95292d23b7fdfdcfb Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 15 May 2022 18:05:23 +0200
Subject: [PATCH] Implement [Spigot-0097] Remove DataWatcher Locking by leafy


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index f1e70d98..531da8d2 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -24,19 +24,21 @@ public class DataWatcher {
     private boolean b = true;
     // SportPaper start
     private static final Object2IntMap<Class<?>> classToId = new Object2IntOpenHashMap(10, 0.5f);
-    private final Int2ObjectMap dataValues = new Int2ObjectOpenHashMap(10, 0.5f);
+    private final Int2ObjectMap<WatchableObject> dataValues = new Int2ObjectOpenHashMap<>(10, 0.5f);
     // These exist as an attempt at backwards compatability for (broken) NMS plugins
     private static final Map<Class<?>, Integer> c = classToId;
     private final Map<Integer, DataWatcher.WatchableObject> d = dataValues;
 	// SportPaper end
     private boolean e;
-    private ReadWriteLock f = new ReentrantReadWriteLock();
+    //    private ReadWriteLock f = new ReentrantReadWriteLock(); // Spigot - Remove DataWatcher Locking
+    boolean registrationLocked; // Spigot
 
     public DataWatcher(Entity entity) {
         this.a = entity;
     }
 
     public <T> void a(int i, T t0) {
+        if (this.registrationLocked) throw new IllegalStateException("Registering datawatcher object after entity initialization"); // Spigot
         int integer = classToId.get(t0.getClass()); // Spigot
 
         if (integer == -1) { // Spigot
@@ -48,9 +50,9 @@ public class DataWatcher {
         } else {
             DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(integer, i, t0); // Spigot
 
-            this.f.writeLock().lock();
+            // this.f.writeLock().lock(); // Spigot - not required
             this.dataValues.put(i, datawatcher_watchableobject); // Spigot
-            this.f.writeLock().unlock();
+            // this.f.writeLock().unlock(); // Spigot - not required
             this.b = false;
         }
     }
@@ -58,26 +60,26 @@ public class DataWatcher {
     public void add(int i, int j) {
         DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(j, i, (Object) null);
 
-        this.f.writeLock().lock();
+        // this.f.writeLock().lock(); // Spigot - not required
         this.dataValues.put(i, datawatcher_watchableobject); // Spigot
-        this.f.writeLock().unlock();
+        // this.f.writeLock().unlock(); // Spigot - not required
         this.b = false;
     }
 
     public byte getByte(int i) {
-        return ((Byte) this.j(i).b()).byteValue();
+        return (Byte) this.j(i).b();
     }
 
     public short getShort(int i) {
-        return ((Short) this.j(i).b()).shortValue();
+        return (Short) this.j(i).b();
     }
 
     public int getInt(int i) {
-        return ((Integer) this.j(i).b()).intValue();
+        return (Integer) this.j(i).b();
     }
 
     public float getFloat(int i) {
-        return ((Float) this.j(i).b()).floatValue();
+        return (Float) this.j(i).b();
     }
 
     public String getString(int i) {
@@ -89,6 +91,8 @@ public class DataWatcher {
     }
 
     private DataWatcher.WatchableObject j(int i) {
+        // Spigot - not required
+        /*
         this.f.readLock().lock();
 
         DataWatcher.WatchableObject datawatcher_watchableobject;
@@ -104,7 +108,8 @@ public class DataWatcher {
         }
 
         this.f.readLock().unlock();
-        return datawatcher_watchableobject;
+        return datawatcher_watchableobject;*/
+        return this.dataValues.get(i);
     }
 
     public Vector3f h(int i) {
@@ -150,7 +155,7 @@ public class DataWatcher {
         ArrayList arraylist = null;
 
         if (this.e) {
-            this.f.readLock().lock();
+            // this.f.readLock().lock(); // Spigot - not required
             Iterator iterator = this.dataValues.values().iterator(); // SportPaper
 
             while (iterator.hasNext()) {
@@ -177,7 +182,7 @@ public class DataWatcher {
                 }
             }
 
-            this.f.readLock().unlock();
+            // this.f.readLock().unlock(); // Spigot - not required
         }
 
         this.e = false;
@@ -185,7 +190,7 @@ public class DataWatcher {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.f.readLock().lock();
+        // this.f.readLock().lock(); // Spigot - not required
         Iterator iterator = this.dataValues.values().iterator(); // SportPaper
 
         while (iterator.hasNext()) {
@@ -194,14 +199,14 @@ public class DataWatcher {
             a(packetdataserializer, datawatcher_watchableobject);
         }
 
-        this.f.readLock().unlock();
+        // this.f.readLock().unlock(); // Spigot - not required
         packetdataserializer.writeByte(127);
     }
 
     public List<DataWatcher.WatchableObject> c() {
         ArrayList arraylist = Lists.newArrayList(); // Spigot
 
-        this.f.readLock().lock();
+        // this.f.readLock().lock(); // Spigot - not required
 
         arraylist.addAll(this.dataValues.values()); // SportPaper
         // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
@@ -220,7 +225,7 @@ public class DataWatcher {
         }
         // Spigot end
 
-        this.f.readLock().unlock();
+        // this.f.readLock().unlock(); // Spigot - not required
         return arraylist;
     }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 6f1578fb..7ca25981 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -214,6 +214,7 @@ public abstract class Entity implements ICommandListener {
         this.datawatcher.a(2, "");
         this.datawatcher.a(4, Byte.valueOf((byte) 0));
         this.h();
+        this.datawatcher.registrationLocked = true; // Spigot
     }
 
     protected abstract void h();
-- 
2.36.0.windows.1

