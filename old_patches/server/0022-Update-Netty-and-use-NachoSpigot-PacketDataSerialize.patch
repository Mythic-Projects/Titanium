From 7f3de34811b7ffa05d688375f75363239e5e75fd Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 30 Apr 2022 17:16:44 +0200
Subject: [PATCH] Update Netty and use NachoSpigot PacketDataSerializer


diff --git a/pom.xml b/pom.xml
index 847e0427..5bb611fc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -27,6 +27,11 @@
     </parent>
 
     <dependencies>
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-all</artifactId>
+            <version>4.1.75.Final</version>
+        </dependency>
         <dependency>
             <groupId>it.unimi.dsi</groupId>
             <artifactId>fastutil</artifactId>
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index e2eb3054..8c0cc52e 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -8,7 +8,8 @@ import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.ByteBufProcessor;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
-import io.netty.util.ReferenceCounted;
+import io.netty.util.ByteProcessor;
+
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
@@ -16,18 +17,36 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
+import java.nio.channels.FileChannel;
 import java.nio.channels.GatheringByteChannel;
 import java.nio.channels.ScatteringByteChannel;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.UUID;
 
+import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
+// TacoSpigot start
+import net.techcable.tacospigot.CompatHacks;
+// TacoSpigot end
 
 public class PacketDataSerializer extends ByteBuf {
 
     private final ByteBuf a;
 
+    // TacoSpigot start
+    private final boolean allowLargePackets;
     public PacketDataSerializer(ByteBuf bytebuf) {
+        /*
+         * By default, we limit the size of the received byte array to Short.MAX_VALUE, which is 31 KB.
+         * However, we make an exception when ProtocolSupport is installed, to allow 1.7 clients to work,
+         * and limit them to 31 MEGABYTES as they seem to need to send larger packets sometimes.
+         * Although a 31 MB limit leaves the server slightly vulnerable,
+         * it's still much better than the old system of having no limit,
+         * which would leave the server vulnerable to packets up to 2 GIGABYTES in size.
+         */
+        this.allowLargePackets = CompatHacks.hasProtocolSupport();
+        // TacoSpigot end
         this.a = bytebuf;
     }
 
@@ -46,17 +65,20 @@ public class PacketDataSerializer extends ByteBuf {
         this.writeBytes(abyte);
     }
 
-    // Paper start
+    // TacoSpigot start
+    private static final int DEFAULT_LIMIT = Short.MAX_VALUE;
+    private static final int LARGE_PACKET_LIMIT = Short.MAX_VALUE * 1024;
     public byte[] a() {
-        return readByteArray(Short.MAX_VALUE);
+        // TacoSpigot start
+        int limit = allowLargePackets ? LARGE_PACKET_LIMIT : DEFAULT_LIMIT;
+        return readByteArray(limit);
     }
 
-    public byte[]readByteArray(int limit) {
-        int len = this.e();
+    public byte[] readByteArray(int limit) {
+        int len = this.readVarInt();
         if (len > limit) throw new DecoderException("The received a byte array longer than allowed " + len + " > " + limit);
         byte[] abyte = new byte[len];
-    // Paper end
-
+        // TacoSpigot end
         this.readBytes(abyte);
         return abyte;
     }
@@ -78,44 +100,37 @@ public class PacketDataSerializer extends ByteBuf {
     }
 
     public <T extends Enum<T>> T a(Class<T> oclass) {
-        return ((T[]) oclass.getEnumConstants())[this.e()]; // CraftBukkit - fix decompile error
+        return ((T[]) oclass.getEnumConstants())[this.readVarInt()]; // CraftBukkit - fix decompile error
     }
 
     public void a(Enum<?> oenum) {
         this.b(oenum.ordinal());
     }
 
+    public int readVarInt() { return e(); } // Nacho - OBFHELPER
     public int e() {
+        byte b0;
         int i = 0;
         int j = 0;
-
-        byte b0;
-
         do {
-            b0 = this.readByte();
-            i |= (b0 & 127) << j++ * 7;
-            if (j > 5) {
+            b0 = readByte();
+            i |= (b0 & Byte.MAX_VALUE) << j++ * 7;
+            if (j > 5)
                 throw new RuntimeException("VarInt too big");
-            }
-        } while ((b0 & 128) == 128);
-
+        } while ((b0 & 0x80) == 128);
         return i;
     }
 
     public long f() {
+        byte b0;
         long i = 0L;
         int j = 0;
-
-        byte b0;
-
         do {
-            b0 = this.readByte();
-            i |= (long) (b0 & 127) << j++ * 7;
-            if (j > 10) {
+            b0 = readByte();
+            i |= (long) (b0 & Byte.MAX_VALUE) << j++ * 7;
+            if (j > 10)
                 throw new RuntimeException("VarLong too big");
-            }
-        } while ((b0 & 128) == 128);
-
+        } while ((b0 & 0x80) == 128);
         return i;
     }
 
@@ -124,10 +139,14 @@ public class PacketDataSerializer extends ByteBuf {
         this.writeLong(uuid.getLeastSignificantBits());
     }
 
+    public UUID readUUID() { return g(); } // Nacho - OBFHELPER
+
     public UUID g() {
         return new UUID(this.readLong(), this.readLong());
     }
 
+    public void writeVarInt(int value) { this.b(value); } // Nacho - OBFHELPER
+
     public void b(int i) {
         while ((i & -128) != 0) {
             this.writeByte(i & 127 | 128);
@@ -159,7 +178,9 @@ public class PacketDataSerializer extends ByteBuf {
 
     }
 
-    public NBTTagCompound h() throws IOException {
+    public NBTTagCompound h() throws IOException
+    {
+
         int i = this.readerIndex();
         byte b0 = this.readByte();
 
@@ -167,7 +188,11 @@ public class PacketDataSerializer extends ByteBuf {
             return null;
         } else {
             this.readerIndex(i);
-            return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(2097152L));
+            try {
+                return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(TitaniumConfig.get().nbtReadLimiter));
+            } catch (IOException ioexception) {
+                throw new EncoderException(ioexception);
+            }
         }
     }
 
@@ -193,42 +218,47 @@ public class PacketDataSerializer extends ByteBuf {
 
     }
 
-    public ItemStack i() throws IOException {
+    public ItemStack i() throws IOException
+    {
+        return this.decodeItemStack();
+    }
+
+    public ItemStack decodeItemStack() throws IOException
+    {
         ItemStack itemstack = null;
-        short short0 = this.readShort();
+        short itemId = this.readShort();
 
-        if (short0 >= 0) {
-            byte b0 = this.readByte();
-            short short1 = this.readShort();
+        if (itemId >= 0)
+        {
+            byte amount = this.readByte();
+            short data = this.readShort();
 
-            itemstack = new ItemStack(Item.getById(short0), b0, short1);
+            itemstack = new ItemStack(Item.getById(itemId), amount, data);
             itemstack.setTag(this.h());
             // CraftBukkit start
-            if (itemstack.getTag() != null) {
+            if (itemstack.getTag() != null)
+            {
                 CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
             }
             // CraftBukkit end
         }
-
         return itemstack;
     }
 
-    public String c(int i) {
-        int j = this.e();
+    public String readUUID(int maxLength) { return c(maxLength); } // Nacho - OBFHELPER
 
-        if (j > i * 4) {
-            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + j + " > " + i * 4 + ")");
-        } else if (j < 0) {
+    public String c(int i) {
+        int j = this.readVarInt();
+        if (j > i * 4)
+            throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + j + " > " + (i * 4) + ")");
+        if (j < 0)
             throw new DecoderException("The received encoded string buffer length is less than zero! Weird string!");
-        } else {
-            String s = new String(this.readBytes(j).array(), Charsets.UTF_8);
-
-            if (s.length() > i) {
-                throw new DecoderException("The received string length is longer than maximum allowed (" + j + " > " + i + ")");
-            } else {
-                return s;
-            }
-        }
+        String s = toString(readerIndex(), j, StandardCharsets.UTF_8);
+        readerIndex(readerIndex() + j);
+        if (s.length() > i)
+            throw new DecoderException("The received string length is longer than maximum allowed (" + j + " > " + i + ")");
+        // Nacho end
+        return s;
     }
 
     public PacketDataSerializer a(String s) {
@@ -275,6 +305,14 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.isDirect();
     }
 
+    public boolean isReadOnly() {
+        return this.a.isReadOnly();
+    }
+
+    public ByteBuf asReadOnly() {
+        return this.a.asReadOnly();
+    }
+
     public int readerIndex() {
         return this.a.readerIndex();
     }
@@ -375,26 +413,54 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.getShort(i);
     }
 
+    public short getShortLE(int i) {
+        return this.a.getShortLE(i);
+    }
+
     public int getUnsignedShort(int i) {
         return this.a.getUnsignedShort(i);
     }
 
+    public int getUnsignedShortLE(int i) {
+        return this.a.getUnsignedShortLE(i);
+    }
+
     public int getMedium(int i) {
         return this.a.getMedium(i);
     }
 
+    public int getMediumLE(int i) {
+        return this.a.getMediumLE(i);
+    }
+
     public int getUnsignedMedium(int i) {
         return this.a.getUnsignedMedium(i);
     }
 
+    public int getUnsignedMediumLE(int i) {
+        return this.a.getUnsignedMediumLE(i);
+    }
+
     public int getInt(int i) {
         return this.a.getInt(i);
     }
 
+    public int getIntLE(int i) {
+        return this.a.getIntLE(i);
+    }
+
     public long getUnsignedInt(int i) {
         return this.a.getUnsignedInt(i);
     }
 
+    public long getUnsignedIntLE(int i) {
+        return this.a.getUnsignedIntLE(i);
+    }
+
+    public long getLongLE(int i) {
+        return this.a.getLongLE(i);
+    }
+
     public long getLong(int i) {
         return this.a.getLong(i);
     }
@@ -443,6 +509,16 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.getBytes(i, gatheringbytechannel, j);
     }
 
+    @Override
+    public int getBytes(int i, FileChannel fileChannel, long l, int i1) throws IOException {
+        return this.a.getBytes(i, fileChannel, l, i1);
+    }
+
+    @Override
+    public CharSequence getCharSequence(int i, int j, Charset charset) {
+        return this.a.getCharSequence(i, j, charset);
+    }
+
     public ByteBuf setBoolean(int i, boolean flag) {
         return this.a.setBoolean(i, flag);
     }
@@ -455,18 +531,38 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.setShort(i, j);
     }
 
+    @Override
+    public ByteBuf setShortLE(int i, int j) {
+        return this.a.setShortLE(i, j);
+    }
+
     public ByteBuf setMedium(int i, int j) {
         return this.a.setMedium(i, j);
     }
 
+    @Override
+    public ByteBuf setMediumLE(int i, int j) {
+        return this.a.setMediumLE(i, j);
+    }
+
     public ByteBuf setInt(int i, int j) {
         return this.a.setInt(i, j);
     }
 
+    @Override
+    public ByteBuf setIntLE(int i, int j) {
+        return this.a.setIntLE(i, j);
+    }
+
     public ByteBuf setLong(int i, long j) {
         return this.a.setLong(i, j);
     }
 
+    @Override
+    public ByteBuf setLongLE(int i, long j) {
+        return this.a.setLongLE(i, j);
+    }
+
     public ByteBuf setChar(int i, int j) {
         return this.a.setChar(i, j);
     }
@@ -511,10 +607,20 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.setBytes(i, scatteringbytechannel, j);
     }
 
+    @Override
+    public int setBytes(int i, FileChannel filechannel, long j, int k) throws IOException {
+        return this.a.setBytes(i, filechannel, j, k);
+    }
+
     public ByteBuf setZero(int i, int j) {
         return this.a.setZero(i, j);
     }
 
+    @Override
+    public int setCharSequence(int i, CharSequence charsequence, Charset charset) {
+        return this.a.setCharSequence(i, charsequence, charset);
+    }
+
     public boolean readBoolean() {
         return this.a.readBoolean();
     }
@@ -531,30 +637,65 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.readShort();
     }
 
+    @Override
+    public short readShortLE() {
+        return this.a.readShortLE();
+    }
+
     public int readUnsignedShort() {
         return this.a.readUnsignedShort();
     }
 
+    @Override
+    public int readUnsignedShortLE() {
+        return this.a.readUnsignedShortLE();
+    }
+
     public int readMedium() {
         return this.a.readMedium();
     }
 
+    @Override
+    public int readMediumLE() {
+        return this.a.readMediumLE();
+    }
+
     public int readUnsignedMedium() {
         return this.a.readUnsignedMedium();
     }
 
+    @Override
+    public int readUnsignedMediumLE() {
+        return this.a.readUnsignedMediumLE();
+    }
+
     public int readInt() {
         return this.a.readInt();
     }
 
+    @Override
+    public int readIntLE() {
+        return this.a.readIntLE();
+    }
+
     public long readUnsignedInt() {
         return this.a.readUnsignedInt();
     }
 
+    @Override
+    public long readUnsignedIntLE() {
+        return this.a.readUnsignedIntLE();
+    }
+
     public long readLong() {
         return this.a.readLong();
     }
 
+    @Override
+    public long readLongLE() {
+        return this.a.readLongLE();
+    }
+
     public char readChar() {
         return this.a.readChar();
     }
@@ -575,6 +716,12 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.readSlice(i);
     }
 
+    @Override
+    public ByteBuf readRetainedSlice(int i) {
+        return this.a.readRetainedSlice(i);
+    }
+
+
     public ByteBuf readBytes(ByteBuf bytebuf) {
         return this.a.readBytes(bytebuf);
     }
@@ -607,6 +754,16 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.readBytes(gatheringbytechannel, i);
     }
 
+    @Override
+    public CharSequence readCharSequence(int i, Charset charset) {
+        return this.a.readCharSequence(i, charset);
+    }
+
+    @Override
+    public int readBytes(FileChannel filechannel, long i, int j) throws IOException {
+        return this.a.readBytes(filechannel, i, j);
+    }
+
     public ByteBuf skipBytes(int i) {
         return this.a.skipBytes(i);
     }
@@ -623,18 +780,38 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.writeShort(i);
     }
 
+    @Override
+    public ByteBuf writeShortLE(int i) {
+        return this.a.writeShortLE(i);
+    }
+
     public ByteBuf writeMedium(int i) {
         return this.a.writeMedium(i);
     }
 
+    @Override
+    public ByteBuf writeMediumLE(int i) {
+        return this.a.writeMediumLE(i);
+    }
+
     public ByteBuf writeInt(int i) {
         return this.a.writeInt(i);
     }
 
+    @Override
+    public ByteBuf writeIntLE(int i) {
+        return this.a.writeIntLE(i);
+    }
+
     public ByteBuf writeLong(long i) {
         return this.a.writeLong(i);
     }
 
+    @Override
+    public ByteBuf writeLongLE(long i) {
+        return this.a.writeLongLE(i);
+    }
+
     public ByteBuf writeChar(int i) {
         return this.a.writeChar(i);
     }
@@ -679,10 +856,18 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.writeBytes(scatteringbytechannel, i);
     }
 
+    public int writeBytes(FileChannel filechannel, long i, int j) throws IOException {
+        return this.a.writeBytes(filechannel, i, j);
+    }
+
     public ByteBuf writeZero(int i) {
         return this.a.writeZero(i);
     }
 
+    public int writeCharSequence(CharSequence charsequence, Charset charset) {
+        return this.a.writeCharSequence(charsequence, charset);
+    }
+
     public int indexOf(int i, int j, byte b0) {
         return this.a.indexOf(i, j, b0);
     }
@@ -699,6 +884,23 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.bytesBefore(i, j, b0);
     }
 
+    public int forEachByte(int i, int j, ByteProcessor byteprocessor) {
+        return this.a.forEachByte(i, j, byteprocessor);
+    }
+
+    public int forEachByte(ByteProcessor byteprocessor) {
+        return this.a.forEachByte(byteprocessor);
+    }
+
+    @Override
+    public int forEachByteDesc(ByteProcessor byteprocessor) {
+        return this.a.forEachByteDesc(byteprocessor);
+    }
+
+    public int forEachByteDesc(int i, int j, ByteProcessor byteprocessor) {
+        return this.a.forEachByteDesc(i, j, byteprocessor);
+    }
+
     public int forEachByte(ByteBufProcessor bytebufprocessor) {
         return this.a.forEachByte(bytebufprocessor);
     }
@@ -727,14 +929,29 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.slice();
     }
 
+    @Override
+    public ByteBuf retainedSlice() {
+        return this.a.retainedSlice();
+    }
+
     public ByteBuf slice(int i, int j) {
         return this.a.slice(i, j);
     }
 
+    @Override
+    public ByteBuf retainedSlice(int i, int i1) {
+        return this.a.readRetainedSlice(i);
+    }
+
     public ByteBuf duplicate() {
         return this.a.duplicate();
     }
 
+    @Override
+    public ByteBuf retainedDuplicate() {
+        return this.a.retainedDuplicate();
+    }
+
     public int nioBufferCount() {
         return this.a.nioBufferCount();
     }
@@ -811,6 +1028,14 @@ public class PacketDataSerializer extends ByteBuf {
         return this.a.retain();
     }
 
+    public ByteBuf touch() {
+        return this.a.touch();
+    }
+
+    public ByteBuf touch(Object o) {
+        return this.a.touch(o);
+    }
+
     public int refCnt() {
         return this.a.refCnt();
     }
@@ -822,4 +1047,4 @@ public class PacketDataSerializer extends ByteBuf {
     public boolean release(int i) {
         return this.a.release(i);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/CompatHacks.java b/src/main/java/net/techcable/tacospigot/CompatHacks.java
new file mode 100644
index 00000000..8558735c
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/CompatHacks.java
@@ -0,0 +1,10 @@
+package net.techcable.tacospigot;
+
+import org.bukkit.Bukkit;
+
+public class CompatHacks {
+    private CompatHacks() {}
+    public static boolean hasProtocolSupport() {
+        return Bukkit.getPluginManager().isPluginEnabled("ProtocolSupport");
+    }
+}
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 7d270143..cebcbda9 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -58,6 +58,9 @@ public class TitaniumConfig extends OkaeriConfig {
 
     }
 
+    //TODO comment this (https://github.com/CobbleSword/NachoSpigot/commit/64b8084cb8516df77d362512fe76dc54b17ba594)
+    public long nbtReadLimiter = 50000L;
+
     @Override
     public OkaeriConfig load() throws OkaeriException {
         super.load();
-- 
2.32.0.windows.2

