From d78041ffeed2967e00753436ee5391a3627a1df4 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Mon, 9 May 2022 22:30:28 +0200
Subject: [PATCH] Implement [Taco-0024] and [Taco-0025]


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index fe2e81917..47de4c646 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -551,7 +551,16 @@ public abstract class Entity implements ICommandListener {
                 }
             }
 
-            List list = this.world.getCubes(this, this.getBoundingBox().a(d0, d1, d2));
+            // TacoSpigot start - do axis by axis scan if the entity is travelling a large area
+            AxisAlignedBB totalArea = this.getBoundingBox().a(d0, d1, d2);
+            double xLength = totalArea.d - totalArea.a;
+            double yLength = totalArea.e - totalArea.b;
+            double zLength = totalArea.f - totalArea.c;
+            boolean axisScan = this.world.tacoSpigotConfigTitanium.tnt.optimizeMovement && xLength * yLength * zLength > 10;
+
+            List list = this.world.getCubes(this, axisScan ? this.getBoundingBox().a(0, d1, 0) : totalArea);
+            // TacoSpigot end
+
             AxisAlignedBB axisalignedbb = this.getBoundingBox();
 
             AxisAlignedBB axisalignedbb1;
@@ -566,17 +575,43 @@ public abstract class Entity implements ICommandListener {
             AxisAlignedBB axisalignedbb2;
             Iterator iterator1;
 
-            for (iterator1 = list.iterator(); iterator1.hasNext(); d0 = axisalignedbb2.a(this.getBoundingBox(), d0)) {
-                axisalignedbb2 = (AxisAlignedBB) iterator1.next();
-            }
+            if (this.world.tacoSpigotConfigTitanium.fixEastWestCannoning && Math.abs(d0) > Math.abs(d2)) { //TacoSpigot - fix east/west cannoning by calculating the z movement before x if the x velocity is greater
+                if (axisScan) {
+                    list = this.world.getCubes(this, this.getBoundingBox().a(0, 0, d2)); // TacoSpigot - get z axis blocks
+                }
+
+                for (iterator1 = list.iterator(); iterator1.hasNext(); d2 = axisalignedbb2.c(this.getBoundingBox(), d2)) {
+                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                }
+
+                this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
+
+                if (axisScan) {
+                    list = this.world.getCubes(this, this.getBoundingBox().a(d0, 0, 0)); // TacoSpigot - get x axis blocks
+                }
 
-            this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
+                for (iterator1 = list.iterator(); iterator1.hasNext(); d0 = axisalignedbb2.a(this.getBoundingBox(), d0)) {
+                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                }
+
+                this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
+
+            } else {
+                if (axisScan) list = this.world.getCubes(this, this.getBoundingBox().a(d0, 0, 0)); // TacoSpigot - get x axis blocks
+
+                for (iterator1 = list.iterator(); iterator1.hasNext(); d0 = axisalignedbb2.a(this.getBoundingBox(), d0)) {
+                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                }
+
+                this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
+
+                for (iterator1 = list.iterator(); iterator1.hasNext(); d2 = axisalignedbb2.c(this.getBoundingBox(), d2)) {
+                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                }
 
-            for (iterator1 = list.iterator(); iterator1.hasNext(); d2 = axisalignedbb2.c(this.getBoundingBox(), d2)) {
-                axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
             }
 
-            this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
             if (this.S > 0.0F && flag1 && (d6 != d0 || d8 != d2)) {
                 double d10 = d0;
                 double d11 = d1;
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 6d123a0b2..767d83c16 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -54,40 +54,44 @@ public class Explosion {
         int i;
         int j;
 
-        for (int k = 0; k < 16; ++k) {
-            for (i = 0; i < 16; ++i) {
-                for (j = 0; j < 16; ++j) {
-                    if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
-                        double d0 = (double) ((float) k / 15.0F * 2.0F - 1.0F);
-                        double d1 = (double) ((float) i / 15.0F * 2.0F - 1.0F);
-                        double d2 = (double) ((float) j / 15.0F * 2.0F - 1.0F);
-                        double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
-
-                        d0 /= d3;
-                        d1 /= d3;
-                        d2 /= d3;
-                        float f = this.size * (0.7F + this.world.random.nextFloat() * 0.6F);
-                        double d4 = this.posX;
-                        double d5 = this.posY;
-                        double d6 = this.posZ;
-
-                        for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
-                            BlockPosition blockposition = new BlockPosition(d4, d5, d6);
-                            IBlockData iblockdata = this.world.getType(blockposition);
-
-                            if (iblockdata.getBlock().getMaterial() != Material.AIR) {
-                                float f2 = this.source != null ? this.source.a(this, this.world, blockposition, iblockdata) : iblockdata.getBlock().a((Entity) null);
-
-                                f -= (f2 + 0.3F) * 0.3F;
+        Block b = world.getChunkAt((int)posX >> 4, (int)posZ >> 4).getBlockData(new BlockPosition(posX, posY, posZ)).getBlock(); // TacoSpigot - get block of the explosio
+
+        if (!this.world.tacoSpigotConfigTitanium.tnt.optimizeLiquidExplosions || !b.getMaterial().isLiquid()) { //TacoSpigot - skip calculating what blocks to blow up in water/lava
+            for (int k = 0; k < 16; ++k) {
+                for (i = 0; i < 16; ++i) {
+                    for (j = 0; j < 16; ++j) {
+                        if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
+                            double d0 = (double) ((float) k / 15.0F * 2.0F - 1.0F);
+                            double d1 = (double) ((float) i / 15.0F * 2.0F - 1.0F);
+                            double d2 = (double) ((float) j / 15.0F * 2.0F - 1.0F);
+                            double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+
+                            d0 /= d3;
+                            d1 /= d3;
+                            d2 /= d3;
+                            float f = this.size * (0.7F + this.world.random.nextFloat() * 0.6F);
+                            double d4 = this.posX;
+                            double d5 = this.posY;
+                            double d6 = this.posZ;
+
+                            for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
+                                BlockPosition blockposition = new BlockPosition(d4, d5, d6);
+                                IBlockData iblockdata = this.world.getType(blockposition);
+
+                                if (iblockdata.getBlock().getMaterial() != Material.AIR) {
+                                    float f2 = this.source != null ? this.source.a(this, this.world, blockposition, iblockdata) : iblockdata.getBlock().a((Entity) null);
+
+                                    f -= (f2 + 0.3F) * 0.3F;
+                                }
+
+                                if (f > 0.0F && (this.source == null || this.source.a(this, this.world, blockposition, iblockdata, f)) && blockposition.getY() < 256 && blockposition.getY() >= 0) { // CraftBukkit - don't wrap explosions
+                                    hashset.add(blockposition);
+                                }
+
+                                d4 += d0 * 0.30000001192092896D;
+                                d5 += d1 * 0.30000001192092896D;
+                                d6 += d2 * 0.30000001192092896D;
                             }
-
-                            if (f > 0.0F && (this.source == null || this.source.a(this, this.world, blockposition, iblockdata, f)) && blockposition.getY() < 256 && blockposition.getY() >= 0) { // CraftBukkit - don't wrap explosions
-                                hashset.add(blockposition);
-                            }
-
-                            d4 += d0 * 0.30000001192092896D;
-                            d5 += d1 * 0.30000001192092896D;
-                            d6 += d2 * 0.30000001192092896D;
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 37bd8c0a7..3e6af4f14 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import net.titanium.config.PaperWorldConfig;
 import net.titanium.config.SpigotWorldConfig;
+import net.titanium.config.TacoSpigotWorldConfig;
 import net.titanium.config.TitaniumConfig;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
@@ -13,12 +14,10 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
-import co.aikar.timings.SpigotTimings;
 
 import java.util.*;
 import java.util.concurrent.Callable;
@@ -174,6 +173,7 @@ public abstract class World implements IBlockAccess {
     // Titanium start
     public final SpigotWorldConfig spigotConfigTitanium;
     public final PaperWorldConfig paperConfigTitanium;
+    public final TacoSpigotWorldConfig tacoSpigotConfigTitanium;
     // Titanium end
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
@@ -201,6 +201,7 @@ public abstract class World implements IBlockAccess {
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig(); // PaperSpigot
         this.spigotConfigTitanium = TitaniumConfig.get().spigot.worldSettings;
         this.paperConfigTitanium = TitaniumConfig.get().paper.worldSettings;
+        this.tacoSpigotConfigTitanium = TitaniumConfig.get().taco.worldSettings;
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
@@ -1327,6 +1328,8 @@ public abstract class World implements IBlockAccess {
 
         if (entity instanceof EntityItem) return arraylist; // PaperSpigot - Optimize item movement
         if (entity instanceof EntityArmorStand && !entity.world.paperConfigTitanium.armorStandsDoCollisionEntityLookups) return arraylist; // Paper
+        if (entity instanceof EntityTNTPrimed) return arraylist; // TacoSpigot - Optimize tnt entity movement
+        if (entity instanceof EntityFallingBlock) return arraylist; // TacoSpigot - Optimize falling block movement
 
         double d0 = 0.25D;
         List list = this.getEntities(entity, axisalignedbb.grow(d0, d0, d0));
diff --git a/src/main/java/net/titanium/config/TacoSpigotConfig.java b/src/main/java/net/titanium/config/TacoSpigotConfig.java
new file mode 100644
index 000000000..da1cee705
--- /dev/null
+++ b/src/main/java/net/titanium/config/TacoSpigotConfig.java
@@ -0,0 +1,12 @@
+package net.titanium.config;
+
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class TacoSpigotConfig extends TitaniumConfigSection {
+
+    public TacoSpigotWorldConfig worldSettings = new TacoSpigotWorldConfig();
+
+}
diff --git a/src/main/java/net/titanium/config/TacoSpigotWorldConfig.java b/src/main/java/net/titanium/config/TacoSpigotWorldConfig.java
new file mode 100644
index 000000000..bd5ca3133
--- /dev/null
+++ b/src/main/java/net/titanium/config/TacoSpigotWorldConfig.java
@@ -0,0 +1,25 @@
+package net.titanium.config;
+
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class TacoSpigotWorldConfig extends TitaniumConfigSection {
+
+    public Tnt tnt = new Tnt();
+
+    public static class Tnt extends TitaniumConfigSection {
+
+        //TODO comment this (See TacoSpigot-0024)
+        public boolean optimizeMovement = false;
+
+        //TODO comment this (See TacoSpigot-0024)
+        public boolean optimizeLiquidExplosions = true;
+
+    }
+
+    //TODO comment this
+    public boolean fixEastWestCannoning = false;
+
+}
diff --git a/src/main/java/net/titanium/config/TitaniumConfig.java b/src/main/java/net/titanium/config/TitaniumConfig.java
index 6da6e5426..ebd01683e 100644
--- a/src/main/java/net/titanium/config/TitaniumConfig.java
+++ b/src/main/java/net/titanium/config/TitaniumConfig.java
@@ -46,6 +46,9 @@ public class TitaniumConfig extends OkaeriConfig {
     @Comment("Configuration from paper.yml")
     public PaperConfig paper = new PaperConfig();
 
+    @Comment("Configuration from taco.yml")
+    public TacoSpigotConfig taco = new TacoSpigotConfig();
+
     @Comment("Configuration from ion.yml")
     public IonConfig ion = new IonConfig();
 
@@ -102,10 +105,10 @@ public class TitaniumConfig extends OkaeriConfig {
 
     public static class Chunk extends TitaniumConfigSection {
 
-        // TODO comment this
+        //TODO comment this
         public boolean disableUnloadedChunksMovement = false;
 
-        // TODO comment this
+        //TODO comment this
         public boolean adaptiveChunkGC = false;
 
         @Comment("Configuration of chunk I/O (loading) since chunk loading is asynchronous.")
-- 
2.36.0.windows.1

